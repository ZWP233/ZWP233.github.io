<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Podfile</title>
      <link href="/post/8672b3c7.html"/>
      <url>/post/8672b3c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>iOS开发会经常用到cocoapods管理第三方，简单、方便、高效。如何集成cocoapods在<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcocoapods.org%2F">cocoapods官网</a>和<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fguides.cocoapods.org%2Fsyntax%2Fpodfile.html">Podfile语法说明</a>会有详细介绍，本文我想介绍的是关于集成cocoapods时会用到的一个文件Podfile文件。</p><h2 id="什么是Podfile">什么是Podfile</h2><p>Podfile是一个规范，描述了一个或多个一套工程目标的依赖项</p><p>一个简单写法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;MyApp&#x27; do</span><br><span class="line">  pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 3.0&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是最简单最普遍的写法，针对MyApp这个target引入AFNetworking这个依赖库，也是大家平时用的最多的一种方式。</p><p>下面是个更复杂的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 下面两行是指明依赖库的来源地址</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">source &#x27;https://github.com/Artsy/Specs.git&#x27;</span><br><span class="line"></span><br><span class="line"># 说明平台是ios，版本是9.0</span><br><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line"># 忽略引入库的所有警告（强迫症者的福音啊）</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line"># 针对MyApp target引入AFNetworking</span><br><span class="line"># 针对MyAppTests target引入OCMock，</span><br><span class="line">target &#x27;MyApp&#x27; do </span><br><span class="line">    pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 3.0&#x27; </span><br><span class="line">    target &#x27;MyAppTests&#x27; do</span><br><span class="line">       inherit! :search_paths </span><br><span class="line">       pod &#x27;OCMock&#x27;, &#x27;~&gt; 2.0.1&#x27; </span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"># 这个是cocoapods的一些配置,官网并没有太详细的说明,一般采取默认就好了,也就是不写.</span><br><span class="line">post_install do |installer|       </span><br><span class="line">   installer.pods_project.targets.each do |target| </span><br><span class="line">     puts target.name </span><br><span class="line">   end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主配置">主配置</h2><p><code>install!</code> 这个命令是cocoapods声明的一个安装命令，用于安装引入Podfile里面的依赖库。<br><code>install!</code> 这个命令还有一些个人设置选项，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install! &#x27;cocoapods&#x27;, </span><br><span class="line">  :deterministic_uuids =&gt; false, </span><br><span class="line">  :integrate_targets =&gt; false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还支持其他的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Supported Keys:</span><br><span class="line"></span><br><span class="line">:clean</span><br><span class="line"></span><br><span class="line">:deduplicate_targets</span><br><span class="line"></span><br><span class="line">:deterministic_uuids</span><br><span class="line"></span><br><span class="line">:integrate_targets</span><br><span class="line"></span><br><span class="line">:lock_pod_sources</span><br><span class="line"></span><br><span class="line">:share_schemes_for_development_pods</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于以上的配置，官网也没有一个确切的说明，以为我们只需用系统默认即可。</p><h2 id="Dependencies（依赖项）">Dependencies（依赖项）</h2><p>Podfile指定每个target的依赖项</p><ul><li><code>pod</code>指定特定的依赖库</li><li><code>podspec</code>可以提供一个API来创建podspecs</li><li><code>target</code>通过target指定依赖范围</li></ul><h4 id="pod-指定项目的依赖项">pod - 指定项目的依赖项</h4><p>依赖项规范是由Pod的名称和一个可选的版本组合一起。<br>1&gt; 如果后面不写依赖库的具体版本号，那么cocoapods会默认选取最新版本。</p><p>2&gt; 如果你想要特定的依赖库的版本，就需要在后面写上具体版本号，格式：</p><p>3&gt; 也可以指定版本范围</p><ul><li><code>&gt; 0.1</code> 高于0.1版本（不包含0.1版本）的任意一个版本</li><li><code>&gt;= 0.1</code> 高于0.1版本（包含0.1版本）的任意一个版本</li><li><code>&lt; 0.1</code> 低于0.1版本（不包含0.1版本）的任意一个</li><li><code>&lt;= 0.1</code>低于0.1版本（包含0.1版本）的任意一个</li><li><code>~&gt; 0.1.2</code> 版本 0.1.2的版本到0.2 ，不包括0.2。这个基于你指定的版本号的最后一个部分。这个例子等效于&gt;= 0.1.2并且 &lt;0.2.0，并且始终是你指定范围内的最新版本。</li></ul><p>关于版本形式规范详情请参考下面链接：<br><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fsemver.org%2Flang%2Fzh-CN%2F">语义化版本</a></p><h4 id="Build-configurations（编译配置）">Build configurations（编译配置）</h4><p>默认情况下， 依赖项会被安装在所有target的build configuration中。为了调试或者处于其他原因，依赖项只能在给定的build configuration中被启用。<br>下面写法指明只有在Debug和Beta模式下才有启用配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;PonyDebugger&#x27;, :configurations =&gt; [&#x27;Debug&#x27;, &#x27;Beta&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者，可以弄白名单只指定一个build configurations。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;PonyDebugger&#x27;, :configuration =&gt; &#x27;Debug&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：默认情况下如果不指定具体生成配置，那么会包含在所有的配置中，如果你想具体指定就必须手动指明。</p><h4 id="Subspecs">Subspecs</h4><p>一般情况我们会通过依赖库的名称来引入，cocoapods会默认安装依赖库的所有内容。<br>我们也可以指定安装具体依赖库的某个子模块，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 仅安装QueryKit库下的Attribute模块</span><br><span class="line">pod &#x27;QueryKit/Attribute&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 仅安装QueryKit下的Attribute和QuerySet模块</span><br><span class="line">pod &#x27;QueryKit&#x27;, :subspecs =&gt; [&#x27;Attribute&#x27;, &#x27;QuerySet&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Using-the-files-from-a-local-path-使用本地文件">Using the files from a local path (使用本地文件)</h4><p>我们也可以指定依赖库的来源地址。如果我们想引入我们本地的一个库，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :path =&gt; &#x27;~/Documents/AFNetworking&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用这个选项后，Cocoapods会将给定的文件夹认为是Pod的源，并且在工程中直接引用这些文件。这就意味着你编辑的部分可以保留在CocoaPods安装中，如果我们更新本地AFNetworking里面的代码，cocoapods也会自动更新。</p><p>被引用的文件夹可以来自你喜爱的SCM，甚至当前仓库的一个git子模块</p><p>注意：Pod的podspec文件也应该被放在这个文件夹当中</p><h4 id="From-a-podspec-in-the-root-of-a-library-repository-引用仓库根目录的podspec">From a podspec in the root of a library repository (引用仓库根目录的podspec)</h4><p>有时我们需要引入依赖库指定的分支或节点，写法如下。</p><ul><li>引入master分支（默认）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>引入指定的分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;, :branch =&gt; &#x27;dev&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>引入某个节点的代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;, :tag =&gt; &#x27;0.7.0&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>引入某个特殊的提交节点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;, :commit =&gt; &#x27;082f8319af&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要特别注意的是，虽然这样将会满足任何在Pod中的依赖项通过其他Pods 但是podspec必须存在于仓库的根目录中。</p><h3 id="从外部引入podspec引入">从外部引入podspec引入</h3><p>podspec可以从另一个源库的地址引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;JSONKit&#x27;, :podspec =&gt; &#x27;https://example.com/JSONKit.podspec&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="podspec">podspec</h4><p>使用给定podspec文件中定义的代码库的依赖关系。如果没有传入任何参数，podspec优先使用根目录，如果是其他情况必须在后面指明。(一般使用默认设置即可)例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 不指定表示使用根目录下的podspec，默认一般都会放在根目录下</span><br><span class="line">podspec</span><br><span class="line"># 如果podspec的名字与库名不一样，可以通过这样来指定</span><br><span class="line">podspec :name =&gt; &#x27;QuickDialog&#x27;</span><br><span class="line"># 如果podspec不是在根目录下，那么可以通过:path来指定路径</span><br><span class="line">podspec :path =&gt; &#x27;/Documents/PrettyKit/PrettyKit.podspec&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="target">target</h4><p>在给定的块内定义pod的target（Xcode工程中的target）和指定依赖的范围。一个target应该与Xcode工程的target有关联。默认情况下，target会包含定义在块外的依赖，除非指定不使用inherit!来继承（说的是嵌套的块里的继承问题）</p><ul><li>定义一个简单target <code>ZipApp</code>引入<code>SSZipArchive</code>库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;ZipApp&#x27; do </span><br><span class="line">  pod &#x27;SSZipArchive&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义一个<code>ZipApp</code>target仅引入<code>SSZipArchive</code>库，定义<code>ZipAppTests</code>target 引入<code>Nimble</code>的同时也会继承<code>ZipApp</code>target里面的<code>SSZipArchive</code>库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;ZipApp&#x27; do </span><br><span class="line">  pod &#x27;SSZipArchive&#x27; </span><br><span class="line">  target &#x27;ZipAppTests&#x27; do</span><br><span class="line">    inherit! :search_paths </span><br><span class="line">    pod &#x27;Nimble&#x27; </span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>target块中嵌套多个子块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;ShowsApp&#x27; do</span><br><span class="line">    # ShowsApp 仅仅引入ShowsKit</span><br><span class="line">    pod &#x27;ShowsKit&#x27; </span><br><span class="line">    # 引入 ShowsKit 和 ShowTVAuth </span><br><span class="line">    target &#x27;ShowsTV&#x27; do </span><br><span class="line">        pod &#x27;ShowTVAuth&#x27; </span><br><span class="line">    end </span><br><span class="line">    # 引入了Specta和Expecta以及ShowsKit</span><br><span class="line">    target &#x27;ShowsTests&#x27; do </span><br><span class="line">        inherit! :search_paths </span><br><span class="line">        pod &#x27;Specta&#x27; </span><br><span class="line">        pod &#x27;Expecta&#x27; </span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="抽象target">抽象target</h4><p>定义一个新的抽象目标，它可以方便的用于目标依赖继承。</p><ul><li>简单写法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abstract_target &#x27;Networking&#x27; do</span><br><span class="line">    pod &#x27;AlamoFire&#x27; </span><br><span class="line">    target &#x27;Networking App 1&#x27; </span><br><span class="line">    target &#x27;Networking App 2&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义一种abstract_target包含多个target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 注意：这是个抽象的target也就是说在工程中并没有这个target引入ShowsKit</span><br><span class="line">abstract_target &#x27;Shows&#x27; do</span><br><span class="line">    pod &#x27;ShowsKit&#x27;</span><br><span class="line">    # ShowsiOS target会引入ShowWebAuth库以及继承自Shows的ShowsKit库</span><br><span class="line">    target &#x27;ShowsiOS&#x27; do</span><br><span class="line">        pod &#x27;ShowWebAuth&#x27;</span><br><span class="line">    end</span><br><span class="line">    # ShowsTV target会引入ShowTVAuth库以及继承自Shows的ShowsKit库</span><br><span class="line">    target &#x27;ShowsTV&#x27; do</span><br><span class="line">        pod &#x27;ShowTVAuth&#x27;</span><br><span class="line">    end</span><br><span class="line">    # ShowsTests target引入了Specta和Expecta库，并且指明继承Shows，所以也会引入ShowsKit</span><br><span class="line">    target &#x27;ShowsTests&#x27; do</span><br><span class="line">        inherit! :search_paths </span><br><span class="line">        pod &#x27;Specta&#x27; </span><br><span class="line">        pod &#x27;Expecta&#x27; </span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="abstract-和-inherit">abstract! 和 inherit!</h4><ul><li>abstract! 指示当前的target是抽象的，因此不会直接链接Xcode target。</li><li>inherit! 设置当前target的继承模式。例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;App&#x27; do</span><br><span class="line">   target &#x27;AppTests&#x27; do</span><br><span class="line">      inherit! :search_paths </span><br><span class="line">   end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Target-configuration-目标项配置">Target configuration (目标项配置)</h2><p>使用target 配置来控制的cocoapods生成project。<br>开始时详细说明您正在使用什么平台上。工程文件里允许您具体说明哪些项目的链接。</p><h4 id="platform">platform</h4><p>platform用于指定应建立的静态库的平台。CocoaPods提供了默认的平台版本配置：</p><ul><li>iOS-&gt;4.3</li><li>OS X-&gt;10.6</li><li>tvOS-&gt;9.0</li><li>watchOS-&gt;2.0</li></ul><p>如果部署目标需要iOS &lt; 4.3，armv6体系结构将被添加到ARCHS。<br>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#指定具体平台和版本</span><br><span class="line">platform :ios, &#x27;4.0&#x27;</span><br><span class="line">platform :ios</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="project">project</h4><p>如果没有显示的project被指定，那么会默认使用target的父target指定的project作为目标。如果如果没有任何一个target指定目标，那么就会使用和Podefile在同一目录下的project。同样也能够指定是否这些设置在release或者debug模式下生效。为了做到这一点，你必须指定一个名字和:release/:debuge关联起来</p><p>Examples:<br>Specifying the user project</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># MyGPSApp这个target引入的库只能在FastGPS工程中引用</span><br><span class="line">target &#x27;MyGPSApp&#x27; do </span><br><span class="line">    project &#x27;FastGPS&#x27; </span><br><span class="line">    ...</span><br><span class="line">end</span><br><span class="line"># 原理同上</span><br><span class="line">target &#x27;MyNotesApp&#x27; do </span><br><span class="line">    project &#x27;FastNotes&#x27; </span><br><span class="line">    ...</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用自定义的编译配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project &#x27;TestProject&#x27;, &#x27;Mac App Store&#x27; =&gt; :release, &#x27;Test&#x27; =&gt; :debug</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="inhibit-all-warnings-（强迫症者的福音）">inhibit_all_warnings!（强迫症者的福音）</h4><p>inhibit_all_warnings! 屏蔽所有来自于cocoapods依赖库的警告。你可以全局定义，也能在子target里面定义，也可以指定某一个库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 隐藏SSZipArchive的警告而不隐藏ShowTVAuth的警告</span><br><span class="line">pod &#x27;SSZipArchive&#x27;, :inhibit_warnings =&gt; true</span><br><span class="line">pod &#x27;ShowTVAuth&#x27;, :inhibit_warnings =&gt; false</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="use-frameworks">use_frameworks!</h4><p>通过指定use_frameworks!要求生成的是framework而不是静态库。<br>如果使用use_frameworks!命令会在Pods工程下的Frameworks目录下生成依赖库的framework<br>如果不使用use_frameworks!命令会在Pods工程下的Products目录下生成.a的静态库</p><h2 id="Workspace">Workspace</h2><p>默认情况下，我们不需要指定，直接使用与Podfile所在目录的工程名一样就可以了。如果要指定另外的名称，而不是使用工程的名称，可以这样指定：</p><h2 id="Source">Source</h2><p>source是指定pod的来源。如果不指定source，默认是使用CocoaPods官方的source。(建议使用默认设置)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CocoaPods Master Repository</span><br><span class="line"># 使用其他来源地址</span><br><span class="line">source &#x27;https://github.com/artsy/Specs.git&#x27;</span><br><span class="line"># 使用官方默认地址（默认）</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hooks">Hooks</h2><p>Podfile提供了hook机制，它将在安装过程中调用。hook是全局性的，不存储于每个target中。</p><h3 id="Plugin">Plugin</h3><p>指定应在安装期间使用的插件。使用此方法指定应在安装期间使用的插件，以及当它被调用时，应传递给插件的选项。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定在安装期间使用cocoapods-keys和slather这两个插件</span><br><span class="line">plugin &#x27;cocoapods-keys&#x27;, :keyring =&gt; &#x27;Eidolon&#x27;</span><br><span class="line">plugin &#x27;slather&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pre-install">pre_install</h4><p>当我们下载完成，但是还没有安装之时，可以使用hook机制通过pre_install指定要做更改，更改完之后进入安装阶段。<br>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pre_install do |installer| </span><br><span class="line">    # 做一些安装之前的更改</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="post-install">post_install</h4><p>当我们安装完成，但是生成的工程还没有写入磁盘之时，我们可以指定要执行的操作。<br>比如，我们可以在写入磁盘之前，修改一些工程的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_install do |installer| installer.pods_project.targets.each do |target| </span><br><span class="line">        target.build_configurations.each do |config| </span><br><span class="line">            config.build_settings[&#x27;GCC_ENABLE_OBJC_GC&#x27;] = &#x27;supported&#x27; </span><br><span class="line">        end </span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="def">def</h4><p>我们还可以通过def命令来声明一个pod集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def &#x27;CustomPods&#x27;</span><br><span class="line">   pod &#x27;IQKeyboardManagerSwift&#x27;</span><br><span class="line">end </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，我们就可以在需要引入的target处引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;MyTarget&#x27; do </span><br><span class="line">   CustomPods</span><br><span class="line">end </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这么写的好处是：如果有多个target，而不同target之间并不全包含，那么可以通过这种方式来分开引入。</p><h2 id="总结">总结</h2><p>本文主要介绍Podfile文件的一些要素，也是自己的一个学习记录过程，由于本人水平有限，难免会有纰漏之处，还望指出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS终端利器iTerm2</title>
      <link href="/post/db3cbb2c.html"/>
      <url>/post/db3cbb2c.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120325"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120325" alt=""></a></p><p>image</p><blockquote><p>Mac OS 终端利器 iTerm2  image 之前一直使用 Mac OS 自带的终端，用起来虽然有些不太方便，但总体来说还是可以接受的，是有想换个终端的想法，然后今天偶然看到一个终端利器 iTerm2，发现真的很强大，也非常的好用，按照网上配置了主题什么的，还是有些坑的，这边再记录下，以便后面查阅。 安装 iTerm2 下载地址：<a href="https://www.iterm2.com/download">https://www.iterm2.com/download</a></p></blockquote><h2 id="1-安装-iTerm2">1. 安装 iTerm2</h2><p>下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.iterm2.com%2Fdownloads.html">https://www.iterm2.com/downloads.html</a></p><p>下载的是压缩文件，解压后是执行程序文件，你可以直接双击，或者直接将它拖到 Applications 目录下。</p><p>或者你可以直接使用 Homebrew 进行安装：</p><h2 id="2-配置-iTerm2-主题">2. 配置 iTerm2 主题</h2><p>iTerm2 最常用的主题是 Solarized Dark theme，下载地址：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fethanschoonover.com%2Fsolarized">http://ethanschoonover.com/solarized</a></p><p>下载的是压缩文件，你先解压一下，然后打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles -&gt; Colors -&gt; Color Presets -&gt; Import</code>，选择刚才解压的<code>solarized-&gt;iterm2-colors-solarized-&gt;Solarized Dark.itermcolors</code>文件，导入成功，最后选择 Solarized Dark 主题，就可以了。</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120380"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120380" alt=""></a></p><p>image</p><h2 id="3-配置-Oh-My-Zsh">3. 配置 Oh My Zsh</h2><p>Oh My Zsh 是对主题的进一步扩展，地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Frobbyrussell%2Foh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p><p>一键安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>安装好之后，需要把 Zsh 设置为当前用户的默认 Shell（这样新建标签的时候才会使用 Zsh）：</p><p>然后，我们编辑<code>vim ~/.zshrc</code>文件，将主题配置修改为<code>ZSH_THEME=&quot;agnoster&quot;</code>。</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120348"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120348" alt=""></a></p><p>image</p><p><code>agnoster</code>是比较常用的 zsh 主题之一，你可以挑选你喜欢的主题，zsh 主题列表：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Frobbyrussell%2Foh-my-zsh%2Fwiki%2Fthemes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p><p>效果如下（配置了声明高亮）：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120414"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120414" alt=""></a></p><p>image</p><h2 id="4-配置-Meslo-字体">4. 配置 Meslo 字体</h2><p>使用上面的主题，需要 Meslo 字体支持，要不然会出现乱码的情况，字体下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpowerline%2Ffonts%2Fblob%2Fmaster%2FMeslo%2520Slashed%2FMeslo%2520LG%2520M%2520Regular%2520for%2520Powerline.ttf">Meslo LG M Regular for Powerline.ttf</a></p><p>下载好之后，直接在 Mac OS 中安装即可。</p><p>然后打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles -&gt; Text -&gt; Font -&gt; Chanage Font</code>，选择 Meslo LG M Regular for Powerline 字体。</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120374"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120374" alt=""></a></p><p>image</p><p>当然，如果你觉得默认的<code>12px</code>字体大小不合适，可以自己进行修改。</p><p>另外，VS Code 的终端字体，也需要进行配置，打开 VS Code，按<code>Command + ,</code>键，打开用户配置，搜索<code>fontFamily</code>，然后将右边的配置增加<code>&quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M for Powerline&quot;</code>，示例：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120359"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120359" alt=""></a></p><p>image</p><h2 id="5-声明高亮">5. 声明高亮</h2><p>效果就是上面截图的那样，特殊命令和错误命令，会有高亮显示。</p><p>使用 Homebrew 安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>安装成功之后，编辑<code>vim ~/.zshrc</code>文件，在最后一行增加下面配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120418"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120418" alt=""></a></p><p>image</p><h2 id="6-自动建议填充">6. 自动建议填充</h2><p>这个功能是非常实用的，可以方便我们快速的敲命令。</p><p>配置步骤，先克隆<code>zsh-autosuggestions</code>项目，到指定目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>然后编辑<code>vim ~/.zshrc</code>文件，找到<code>plugins</code>配置，增加<code>zsh-autosuggestions</code>插件。</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120421"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120421" alt=""></a></p><p>image</p><p>注：上面声明高亮，如果配置不生效的话，在<code>plugins</code>配置，再增加<code>zsh-syntax-highlighting</code>插件试试。</p><p>有时候因为自动填充的颜色和背景颜色很相似，以至于自动填充没有效果，我们可以手动更改下自动填充的颜色配置，我修改的颜色值为：<code>586e75</code>，示例：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120428"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120428" alt=""></a></p><p>image</p><p>效果：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120430"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120430" alt=""></a></p><p>image</p><h2 id="7-左右键跳转">7. 左右键跳转</h2><p>主要是按住<code>option + → or ←</code>键，在命令的开始和结尾跳转切换，原本是不生效的，需要手动开启下。</p><p>打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles → Keys → Load Preset... → Natural Text Editing</code>，就可以了。</p><h2 id="8-iTerm2-快速隐藏和显示">8. iTerm2 快速隐藏和显示</h2><p>这个功能也非常使用，就是通过快捷键，可以快速的隐藏和打开 iTerm2，示例配置（<code>Commond + .</code>）：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120463"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120463" alt=""></a></p><p>image</p><h2 id="9-iTerm2-隐藏用户名和主机名">9. iTerm2 隐藏用户名和主机名</h2><p>有时候我们的用户名和主机名太长，比如我的<code>xishuai@xishuaideMacBook-Pro</code>，终端显示的时候会很不好看（上面图片中可以看到），我们可以手动去除。</p><p>编辑<code>vim ~/.zshrc</code>文件，增加<code>DEFAULT_USER=&quot;xishuai&quot;</code>配置，示例：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120471"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120471" alt=""></a></p><p>image</p><p>我们可以通过<code>whoami</code>命令，查看当前用户，效果（另外分屏的效果）：</p><p><a href="http://zwp233.top/post/db3cbb2c/webp-20230609105120475"><img src="http://zwp233.top/post/db3cbb2c/webp-20230609105120475" alt=""></a></p><p>image</p><h2 id="10-iTerm2-配置代理">10. iTerm2 配置代理</h2><p>编辑<code>~ vim ~/.zshrc</code>，增加下面配置（使用的 shadowsocks）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># proxy list</span><br><span class="line">alias proxy=&#x27;export all_proxy=socks5://127.0.0.1:1086&#x27;</span><br><span class="line">alias unproxy=&#x27;unset all_proxy&#x27;</span><br></pre></td></tr></table></figure><p>iTerm2 需要新建标签页，才有效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ proxy</span><br><span class="line">$ curl ip.cn</span><br><span class="line">当前 IP：185.225.14.5 来自：美国</span><br><span class="line"></span><br><span class="line">$ unproxy</span><br><span class="line">$ curl ip.cn</span><br><span class="line">当前 IP：115.236.186.130 来自：浙江省杭州市 电信</span><br></pre></td></tr></table></figure><p>我们可以测试下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Directory listing for /yum/repos/kubernetes-el7-x86_64/&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Index of /yum/repos/kubernetes-el7-x86_64/&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;a href=&quot;/yum/repos/kubernetes-el7-x86_64/repodata&quot;&gt;repodata&lt;/a&gt;&lt;br /&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="11-iTerm2-快捷命令">11. iTerm2 快捷命令</h2><p>快捷命令说明：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command + t</td><td>新建标签</td></tr><tr><td>command + w</td><td>关闭标签</td></tr><tr><td>command + 数字 command + 左右方向键</td><td>切换标签</td></tr><tr><td>command + enter</td><td>切换全屏</td></tr><tr><td>command + f</td><td>查找</td></tr><tr><td>command + d</td><td>垂直分屏</td></tr><tr><td>command + shift + d</td><td>水平分屏</td></tr><tr><td>command + option + 方向键 command + [ 或 command + ]</td><td>切换屏幕</td></tr><tr><td>command + ;</td><td>查看历史命令</td></tr><tr><td>command + shift + h</td><td>查看剪贴板历史</td></tr><tr><td>ctrl + u</td><td>清除当前行</td></tr><tr><td>ctrl + l</td><td>清屏</td></tr><tr><td>ctrl + a</td><td>到行首</td></tr><tr><td>ctrl + e</td><td>到行尾</td></tr><tr><td>ctrl + f/b</td><td>前进后退</td></tr><tr><td>ctrl + p</td><td>上一条命令</td></tr><tr><td>ctrl + r</td><td>搜索命令历史</td></tr></tbody></table><p>参考资料：</p><ul><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgist.github.com%2Fkevin-smets%2F8568070">iTerm2 + Oh My Zsh + Solarized color scheme + Meslo powerline font + [Powerlevel9k] - (macOS)</a>（<strong>推荐</strong>）</li><li><a href="https://www.jianshu.com/p/0ff3269bc261">iTerm2 + oh my zsh + solarized + Meslo powerline font (OS X / macOS)</a></li><li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fzhuxin.tech%2F2017%2F09%2F21%2Fzsh%25E9%2585%258D%25E7%25BD%25AE%2F">Mac 下终端配置（item2 + oh-my-zsh + solarized 配色方案）</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zybuluo.com%2FSweetfish%2Fnote%2F636550">MAC 下 iTerm 主题配置</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcnbin.github.io%2Fblog%2F2015%2F06%2F20%2Fiterm2-kuai-jie-jian-da-quan%2F">iTerm2 快捷键大全</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cocoapod安装</title>
      <link href="/post/8a163dc8.html"/>
      <url>/post/8a163dc8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>一.</p></blockquote><p>1.在装之前最好先卸载点老版本</p><p><code>$ sudo gem uninstall cocoapods</code></p><p>2.查看本地安装过的cocopods相关东西</p><p><code>$ gem list --local | grep cocoapods</code></p><p>显示如下:</p><p>cocoapods (1.0.1)</p><p>cocoapods-core (1.0.1)</p><p>cocoapods-deintegrate (1.0.1)</p><p>cocoapods-downloader (1.1.1)</p><p>cocoapods-plugins (1.0.0)</p><p>cocoapods-search (1.0.0)</p><p>cocoapods-stats (1.0.0)</p><p>cocoapods-trunk (1.0.0)</p><p>cocoapods-try (1.1.0)</p><p>然后使用命令逐个删除</p><p><code>$ sudo gem uninstall cocoapods-core</code></p><p><code>$ sudo gem uninstall cocoapods-deintegrate</code><br>…<br>或者找出目前版本的pod路径</p><p><code>$ which pod</code></p><p>移除现有pod</p><p><code>$ rm -rf /usr/local/bin/pod</code></p><p>删除完之后接下来安装RVM</p><p>RVM 是干什么的这里就不解释了，后面你将会慢慢搞明白。<br><code>$ curl -L https://get.rvm.io | bash -s stable</code></p><p>然后，载入 RVM 环境<br><code>$ source ~/.rvm/scripts/rvm</code></p><p>检查一下是否安装正确<br><code>$ rvm -v</code><br>rvm 1.29.7 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [<a href="https://links.jianshu.com/go?to=https%3A%2F%2Frvm.io%255D">https://rvm.io]</a></p><p>用RVM安装Ruby环境</p><p>可以先查询已经安装的ruby<br><code>$ rvm list</code></p><p>卸载一个已安装版本<br><code>$ rvm remove 2.4.0</code></p><p>列出已知的ruby版本<br><code>$ rvm list known</code></p><p>可以选择现有的rvm版本来进行安装（下面以rvm 2.6.0版本的安装为例）<br><code>$ rvm install 2.6.0</code></p><p>这里需要等上一段时间</p><p>设置Ruby版本<br>RVM 装好以后，需要执行下面的命令将指定版本的 Ruby 设置为系统默认版本<br><code>$ rvm 2.6.0 --default</code></p><p>同样，也可以用其他版本号，前提是你有用 rvm install 安装过那个版本<br>这个时候你可以测试是否正确<br><code>$ ruby -v</code></p><p>ruby 2.6.0p0 (2018-12-25 revision 66547) [x86_64-darwin18]</p><p>三</p><p>安装 coocapods 其实也需要FQ的,这里不多说了,直接切换到淘宝镜像服务器</p><p>查询：<br><code>$ gem sources -l</code><br>可以查看当前是什么连接，然后替换方式如下：<br><code>$ gem source -r https://gems.ruby-china.org</code><br><code>$ gem sources --add https://gems.ruby-china.com</code></p><p>要想验证是否替换成功了，可以执行：<br><code>$ gem sources -l</code></p><p>成功显示</p><p>*** CURRENT SOURCES ***</p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgems.ruby-china.com%2F">https://gems.ruby-china.com/</a></p><p>四</p><p>这里开始安装 cocoapods</p><p><code>$ sudo gem install cocoapods</code> 差不多过个几十秒吧</p><p>会提示:gems installed</p><p><code>$ pod setup</code></p><p>Terminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下</p><p>看到最后一条</p><p>五 coocapods 的使用,</p><p>使用 xcode 创建一个项目 然后cd 进入文件夹</p><p>执行命令 <code>touch Podfile</code> 创建 podfile 文件</p><p>打开 podfile文件 <code>open -e Podfile</code> ,或者拖动文件直接使用 xcode打开</p><p>在文件中输入</p><p>platform :ios, ‘8.1’</p><p>//这里不写版本号,默认是下载最新的</p><p>pod ‘AFNetworking’</p><p>注意:新版本要加上下面两句话</p><p>target “项目的名称” do<br>end</p><p>注意：'项目名称’是你项目文件中’xx.xcodeproj’文件，'xx.xcodeproj’去掉后缀名所得的‘xx’==（就是）‘你的项目名称’</p><p>如果不加会报以下错误</p><p>[!] The dependency <code>AFNetworking (~&gt; 3.0)</code> is not used in any concrete target.</p><p>最后执行命令:</p><p><code>pod install</code></p><p>或</p><p><code>pod install --verbose --no-repo-update</code></p><p>verbose此参数可以显示命令执行过程中的详细信息</p><p>pod install或pod update可能会卡在Analyzing dependencies步骤，因为这两个命令会升级 CocoaPods 的 spec 仓库，追加该参数可以省略此步骤，提升命令执行速度。</p><p>完成.</p><p>如后面需添加新的库 使用 <code>pod search SDWebImage</code></p><p>搜索你需要找的库</p><p>然后 <code>pod update</code> 更新就好了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/post/518e617c.html"/>
      <url>/post/518e617c.html</url>
      
        <content type="html"><![CDATA[<p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbrew.sh%2F">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p><h3 id="二-创建版本库">二.创建版本库</h3><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><p>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</p><h3 id="三-时光机穿梭">三.时光机穿梭</h3><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p><p>如果git status告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p><h4 id="1-版本回退">1.版本回退</h4><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure><p>回退到上一版本：</p><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数</p><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p><h4 id="2-撤销修改">2.撤销修改</h4><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h4 id="3-删除文件">3.删除文件</h4><p>本地仓库删除了文件或者<code>rm &lt;file&gt;</code></p><p>现在你有两个选择：<br>一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>文件就从版本库中被删除了</p><p>二是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</p><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p><h3 id="四-远程仓库">四.远程仓库</h3><p>获得GitHub远程仓库<br>第1步：创建SSH Key。在用户主目录(user)下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;xxxxx@mail.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第2步：登陆<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2F">GitHub</a>，点击右上角头像，选择<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsettings%2Fprofile">Settings</a>，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsettings%2Fkeys">SSH and GPG keys</a>页面;</p><p>然后，点<code>New SSH Key</code>，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容;</p><p>点<code>Add SSH Key</code>，你就应该看到已经添加的Key;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</span><br><span class="line"></span><br><span class="line">当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</span><br><span class="line"></span><br><span class="line">最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</span><br><span class="line"></span><br><span class="line">如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</span><br></pre></td></tr></table></figure><h4 id="1-添加远程库">1.添加远程库</h4><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p><p>首先，登陆<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2F">GitHub</a>，然后，在右上角+号找到<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fnew">New repository</a>按钮，创建一个新的仓库;</p><p>在Repository name填入仓库名<code>learngit</code>，其他保持默认设置，点击<code>Create repository</code>按钮，就成功地创建了一个新的Git仓库;</p><p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:xxxxx/learngit.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请千万注意，把上面的<code>xxxxx</code>替换成你自己的<code>GitHub账户名</code>，否则，你在本地关联的就是别人的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在别人的账户列表中。</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 20, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (15/15), done.</span><br><span class="line">Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.</span><br><span class="line">Total 20 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), done.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h5 id="SSH警告">SSH警告</h5><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (xx.xx.xx.xx)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &#x27;github.com&#x27; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fhelp.github.com%2Farticles%2Fwhat-are-github-s-ssh-key-fingerprints%2F">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><h5 id="小结">小结</h5><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h4 id="2-从远程库克隆">2.从远程库克隆</h4><p>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>;</p><p>勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件；</p><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:xxxxx/gitskills.git</span><br><span class="line">Cloning into &#x27;gitskills&#x27;...</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3</span><br><span class="line">Receiving objects: 100% (3/3), done.</span><br></pre></td></tr></table></figure><p>注意把Git库的地址换成你自己的，然后进入<code>gitskills</code>目录看看，已经有README.md文件了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd gitskills</span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</span><br><span class="line"></span><br><span class="line">你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。</span><br><span class="line"></span><br><span class="line">使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。</span><br></pre></td></tr></table></figure><h5 id="小结-2">小结</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。</span><br><span class="line"></span><br><span class="line">Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</span><br></pre></td></tr></table></figure><h3 id="五-分支管理">五.分支管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</span><br><span class="line"></span><br><span class="line">如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</span><br><span class="line"></span><br><span class="line">分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</span><br><span class="line"></span><br><span class="line">现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</span><br><span class="line"></span><br><span class="line">其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。</span><br><span class="line"></span><br><span class="line">但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</span><br></pre></td></tr></table></figure><h4 id="1-创建与合并分支">1.创建与合并分支</h4><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对readme.txt做个修改，加上一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick.</span><br></pre></td></tr></table></figure><p>然后提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;branch test&quot;</span><br><span class="line">[dev b17d20e] branch test</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure><p>切换回<code>master</code>分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变;</p><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h5 id="小结-3">小结</h5><p>Git鼓励大量使用分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><h4 id="2-解决冲突">2.解决冲突</h4><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature1</span><br><span class="line">Switched to a new branch &#x27;feature1&#x27;</span><br></pre></td></tr></table></figure><p>修改<code>readme.txt</code>最后一行，改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick AND simple.</span><br></pre></td></tr></table></figure><p>在<code>feature1</code>分支上提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">$ git commit -m &quot;AND simple&quot;</span><br><span class="line">[feature1 14096d0] AND simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>切换到<code>master</code>分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br></pre></td></tr></table></figure><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick &amp; simple.</span><br></pre></td></tr></table></figure><p>提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;&amp; simple&quot;</span><br><span class="line">[master 5dc6824] &amp; simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交;</p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 2 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">    both modified:   readme.txt</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>我们可以直接查看readme.txt的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><p>再提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;conflict fixed&quot;</span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p>[图片上传失败…(image-bd478-1557217136484)]</p><p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch test</span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure><p>最后，删除<code>feature1</code>分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure><h5 id="小结-4">小结</h5><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="3-分支管理策略">3.分支管理策略</h4><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下–no-ff方式的git merge：</p><p>首先，仍然创建并切换dev分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure><p>修改readme.txt文件，并提交一个新的commit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;add merge&quot;</span><br><span class="line">[dev f52c633] add merge</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>现在，我们切换回master：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure><p>准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p><p>合并后，我们用git log看看分支历史：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure><h5 id="分支策略">分支策略</h5><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><h5 id="小结-5">小结</h5><p>Git分支十分强大，在团队开发中应该充分应用。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h4 id="5-Bug分支">5.Bug分支</h4><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">    new file:   hello.py</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">    modified:   readme.txt</span><br></pre></td></tr></table></figure><p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch &#x27;issue-101&#x27;</span><br></pre></td></tr></table></figure><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;fix bug 101&quot;</span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> readme.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">    new file:   hello.py</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">    modified:   readme.txt</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br></pre></td></tr></table></figure><p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p><p>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><h5 id="小结-6">小结</h5><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p><h4 id="6-Feature分支">6.Feature分支</h4><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-vulcan</span><br><span class="line">Switched to a new branch &#x27;feature-vulcan&#x27;</span><br></pre></td></tr></table></figure><p>5分钟后，开发完毕：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git add vulcan.py</span><br><span class="line">$ git status</span><br><span class="line">On branch feature-vulcan</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">    new file:   vulcan.py</span><br><span class="line">$ git commit -m &quot;add feature vulcan&quot;</span><br><span class="line">[feature-vulcan 287773e] add feature vulcan</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 vulcan.py</span><br></pre></td></tr></table></figure><p>切回dev，准备合并：</p><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p><p>但是！</p><p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p><p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch &#x27;feature-vulcan&#x27; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#x27;git branch -D feature-vulcan&#x27;.</span><br></pre></td></tr></table></figure><p>销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。。</p><p>现在我们强行删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure><p>终于删除成功！</p><h5 id="小结-7">小结</h5><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h3 id="7-多人协作">7.多人协作</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>要查看远程库的信息，用<code>git remote</code>：</p><p>或者，用<code>git remote -v</code>显示更详细的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><h5 id="推送分支">推送分支</h5><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><p>如果要推送其他分支，比如<code>dev</code>，就改成：</p><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><p><code>master</code>分支是主分支，因此要时刻与远程同步；</p></li><li><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p></li><li><p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p></li><li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p></li></ul><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><h5 id="抓取分支">抓取分支</h5><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:michaelliao/learngit.git</span><br><span class="line">Cloning into &#x27;learngit&#x27;...</span><br><span class="line">remote: Counting objects: 40, done.</span><br><span class="line">remote: Compressing objects: 100% (21/21), done.</span><br><span class="line">remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0</span><br><span class="line">Receiving objects: 100% (40/40), done.</span><br><span class="line">Resolving deltas: 100% (14/14), done.</span><br></pre></td></tr></table></figure><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add env&quot;</span><br><span class="line">[dev 7a5e5dd] add env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   f52c633..7a5e5dd  dev -&gt; dev</span><br></pre></td></tr></table></figure><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat env.txt</span><br><span class="line">env</span><br><span class="line"></span><br><span class="line">$ git add env.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add new env&quot;</span><br><span class="line">[dev 7bd91f1] add new env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;git@github.com:michaelliao/learngit.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch &#x27;dev&#x27; set up to track remote branch &#x27;dev&#x27; from &#x27;origin&#x27;.</span><br></pre></td></tr></table></figure><p>再pull：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add/add): Merge conflict in env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;fix env conflict&quot;</span><br><span class="line">[dev 57c53ab] fix env conflict</span><br><span class="line"></span><br><span class="line">$ git push origin dev</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), done.</span><br><span class="line">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure><p>因此，多人协作的工作模式通常是这样：</p><ol><li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p></li><li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p></li><li><p>如果合并有冲突，则解决冲突，并在本地提交；</p></li><li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p></li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="小结-8">小结</h3><ul><li><p>查看远程库信息，使用<code>git remote -v</code>；</p></li><li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p></li><li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p></li><li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p></li><li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p></li></ul><h4 id="8-Rebase">8.Rebase</h4><p>多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p><p>每次合并再push后，分支变成了这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* d1be385 (HEAD -&gt; master, origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch &#x27;dev&#x27;</span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add env</span><br><span class="line">| * | 7bd91f1 add new env</span><br><span class="line">| |/  </span><br><span class="line">* |   12a631b merged bug fix 101</span><br><span class="line">|\ \  </span><br><span class="line">| * | 4c805e2 fix bug 101</span><br><span class="line">|/ /  </span><br><span class="line">* |   e1e9c68 merge with no-ff</span><br><span class="line">|\ \  </span><br><span class="line">| |/  </span><br><span class="line">| * f52c633 add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure><p>总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？</p><p>其实是可以做到的！</p><p>Git有一种称为<code>rebase</code>的操作，有人把它翻译成“变基”。</p><p>先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。</p><p>在和远程分支同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 582d922 (HEAD -&gt; master) add author</span><br><span class="line">* 8875536 add comment</span><br><span class="line">* d1be385 (origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch &#x27;dev&#x27;</span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add env</span><br><span class="line">| * | 7bd91f1 add new env</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意到Git用<code>(HEAD -&gt; master)</code>和<code>(origin/master)</code>标识出当前分支的HEAD和远程origin的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p><p>现在我们尝试推送本地分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &#x27;git@github.com:michaelliao/learngit.git&#x27;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure><p>很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (1/1), done.</span><br><span class="line">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From github.com:michaelliao/learngit</span><br><span class="line">   d1be385..f005ed4  master     -&gt; origin/master</span><br><span class="line"> * [new tag]         v1.0       -&gt; v1.0</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> hello.py | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>再用<code>git status</code>看看状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 3 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。</p><p>用<code>git log</code>看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e0ea545 (HEAD -&gt; master) Merge branch &#x27;master&#x27; of github.com:michaelliao/learngit</span><br><span class="line">|\  </span><br><span class="line">| * f005ed4 (origin/master) set exit=1</span><br><span class="line">* | 582d922 add author</span><br><span class="line">* | 8875536 add comment</span><br><span class="line">|/  </span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？</p><p>有！</p><p>什么问题？</p><p>不好看！</p><p>有没有解决方法？</p><p>有！</p><p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: add comment</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M   hello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Applying: add author</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M   hello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br></pre></td></tr></table></figure><p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 (origin/master) set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p><p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><p>最后，通过push操作把本地分支推送到远程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Mac:~/learngit michael$ git push origin master</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (5/5), done.</span><br><span class="line">Writing objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2/2), completed with 1 local object.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   f005ed4..7e61ed4  master -&gt; master</span><br></pre></td></tr></table></figure><p>再用<code>git log</code>看看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master, origin/master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>远程分支的提交历史也是一条直线。</p><h3 id="小结-9">小结</h3><ul><li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p></li><li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p></li></ul><h3 id="六-标签管理">六.标签管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</span><br><span class="line"></span><br><span class="line">Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</span><br><span class="line"></span><br><span class="line">Git有commit，为什么还要引入tag？</span><br><span class="line"></span><br><span class="line">“请把上周一的那个版本打包发布，commit号是6a5819e...”</span><br><span class="line"></span><br><span class="line">“一串乱七八糟的数字不好找！”</span><br><span class="line"></span><br><span class="line">如果换一个办法：</span><br><span class="line"></span><br><span class="line">“请把上周一的那个版本打包发布，版本号是v1.2”</span><br><span class="line"></span><br><span class="line">“好的，按照tag v1.2查找commit就行！”</span><br><span class="line"></span><br><span class="line">所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</span><br></pre></td></tr></table></figure><h4 id="1-创建标签">1.创建标签</h4><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure><p>然后，敲命令git tag <name>就可以打一个新标签：</p><p>可以用命令git tag查看所有标签：</p><p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p><p>方法是找到历史提交的commit id，然后打上就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline --abbrev-commit</span><br><span class="line">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class="line">4c805e2 fix bug 101</span><br><span class="line">e1e9c68 merge with no-ff</span><br><span class="line">f52c633 add merge</span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">5dc6824 &amp; simple</span><br><span class="line">14096d0 AND simple</span><br><span class="line">b17d20e branch test</span><br><span class="line">d46f35e remove test.txt</span><br><span class="line">b84166e add test.txt</span><br><span class="line">519219b git tracks changes</span><br><span class="line">e43a48b understand how stage works</span><br><span class="line">1094adb append GPL</span><br><span class="line">e475afc add distributed</span><br><span class="line">eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure><p>比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：</p><p>再用命令git tag查看标签：</p><p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.9</span><br><span class="line">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add merge</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到，v0.9确实打在add merge这次提交上。</p><p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure><p>用命令git show <tagname>可以看到说明文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.1</span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class="line"></span><br><span class="line">version 0.1 released</span><br><span class="line"></span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p><h5 id="小结-10">小结</h5><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p><p>命令<code>git tag</code>可以查看所有标签。</p><h4 id="2-操作标签">2.操作标签</h4><p>如果标签打错了，也可以删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag &#x27;v0.1&#x27; (was f15b0dd)</span><br></pre></td></tr></table></figure><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><p>如果要推送某个标签到远程，使用命令git push origin <tagname>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag &#x27;v0.9&#x27; (was f52c633)</span><br></pre></td></tr></table></figure><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure><p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p><h5 id="小结-11">小结</h5><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p><h3 id="七-使用GitHub">七.使用GitHub</h3><p>我们一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p><p>在GitHub出现以前，开源项目开源容易，但让广大人民群众参与进来比较困难，因为要参与，就要提交代码，而给每个想提交代码的群众都开一个账号那是不现实的，因此，群众也仅限于报个bug，即使能改掉bug，也只能把diff文件用邮件发过去，很不方便。</p><p>但是在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。</p><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftwbs%2Fbootstrap">https://github.com/twbs/bootstrap</a>，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/bootstrap.git</span><br></pre></td></tr></table></figure><p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌─ GitHub ────────────────────────────────────┐</span><br><span class="line">│                                             │</span><br><span class="line">│ ┌─────────────────┐     ┌─────────────────┐ │</span><br><span class="line">│ │ twbs/bootstrap  │────&gt;│  my/bootstrap   │ │</span><br><span class="line">│ └─────────────────┘     └─────────────────┘ │</span><br><span class="line">│                                  ▲          │</span><br><span class="line">└──────────────────────────────────┼──────────┘</span><br><span class="line">                                   ▼</span><br><span class="line">                          ┌─────────────────┐</span><br><span class="line">                          │ local/bootstrap │</span><br><span class="line">                          └─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p><p>如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FZWP233%2Flearngit">https://github.com/ZWP233/learngit</a>，创建一个<code>your-github-id.txt</code>的文本文件，写点自己学习Git的心得，然后推送一个pull request给我，我会视心情而定是否接受。</p><h3 id="小结-12">小结</h3><ul><li><p>在GitHub上，可以任意Fork开源仓库；</p></li><li><p>自己拥有Fork后的仓库的读写权限；</p></li><li><p>可以推送pull request给官方仓库来贡献代码。</p></li></ul><h3 id="八-使用码云">八.使用码云</h3><p>使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况（原因你懂的）。</p><p>如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务——<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2F">码云</a>（<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2F">gitee.com</a>）。</p><p>和GitHub相比，码云也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。</p><p>码云的免费版本也提供私有库功能，只是有5人的成员上限。</p><p>使用码云和使用GitHub类似，我们在码云上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -&gt; 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去;</p><p>点击“确定”即可完成并看到刚才添加的Key;</p><p>如果我们已经有了一个本地的git仓库（例如，一个名为learngit的本地库），如何把它关联到码云的远程库上呢？</p><p>首先，我们在码云上创建一个新的项目，选择右上角用户头像 -&gt; 菜单“控制面板”，然后点击“创建项目”;</p><p>项目名称最好与本地库保持一致：</p><p>然后，我们在本地库上使用命令<code>git remote add</code>把它和码云的远程库关联：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure><p>之后，就可以正常地用<code>git push</code>和<code>git pull</code>推送了！</p><p>如果在使用命令<code>git remote add</code>时报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure><p>这说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以先用<code>git remote -v</code>查看远程库信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>可以看到，本地库已经关联了<code>origin</code>的远程库，并且，该远程库指向GitHub。</p><p>我们可以删除已有的GitHub远程库：</p><p>再关联码云的远程库（注意路径中需要填写正确的用户名）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure><p>此时，我们再查看远程库信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin  git@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">origin  git@gitee.com:liaoxuefeng/learngit.git (push)</span><br></pre></td></tr></table></figure><p>现在可以看到，origin已经被关联到码云的远程库了。通过<code>git push</code>命令就可以把本地库推送到Gitee上。</p><p>有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联码云呢？</p><p>答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p><p>使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p><p>仍然以<code>learngit</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p><p>然后，先关联GitHub的远程库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure><p>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。</p><p>接着，再关联码云的远程库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure><p>同样注意，远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。</p><p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">gitee   git@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">gitee   git@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">github  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">github  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>如果要推送到GitHub，使用命令：</p><p>如果要推送到码云，使用命令：</p><p>这样一来，我们的本地库就可以同时与多个远程库互相同步：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌─────────┐ ┌─────────┐</span><br><span class="line">│ GitHub  │ │  Gitee  │</span><br><span class="line">└─────────┘ └─────────┘</span><br><span class="line">     ▲           ▲</span><br><span class="line">     └─────┬─────┘</span><br><span class="line">           │</span><br><span class="line">    ┌─────────────┐</span><br><span class="line">    │ Local Repo  │</span><br><span class="line">    └─────────────┘</span><br></pre></td></tr></table></figure><p>码云也同样提供了Pull request功能，可以让其他小伙伴参与到开源项目中来。你可以通过Fork我的仓库：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2FZWP233%2Flearngit">https://gitee.com/ZWP233/learngit</a>，创建一个<code>your-gitee-id.txt</code>的文本文件， 写点自己学习Git的心得，然后推送一个pull request给我，这个仓库会在码云和GitHub做双向同步。</p><h3 id="九-自定义Git">九.自定义Git</h3><p>在安装Git一节中，我们已经配置了<code>user.name</code>和<code>user.email</code>，实际上，Git还有很多可配置项。</p><p>比如，让Git显示颜色，会让命令输出看起来更醒目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui true</span><br></pre></td></tr></table></figure><p>这样，Git会适当地显示不同的颜色，比如<code>git status</code>命令;</p><p>文件名就会标上颜色。</p><p>我们在后面还会介绍如何更好地配置Git，以便让你的工作更高效。</p><h4 id="1-忽略特殊文件">1.忽略特殊文件</h4><p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示<code>Untracked files ...</code>，有强迫症的童鞋心里肯定不爽。</p><p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgithub%2Fgitignore">https://github.com/github/gitignore</a></p><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><p>举个例子：</p><p>假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<code>Desktop.ini</code>文件，因此你需要忽略Windows自动生成的垃圾文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br></pre></td></tr></table></figure><p>然后，继续忽略Python编译产生的<code>.pyc</code>、<code>.pyo</code>、<code>dist</code>等文件或目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br></pre></td></tr></table></figure><p>加上你自己定义的文件，最终得到一个完整的<code>.gitignore</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"># My configurations:</span><br><span class="line">db.ini</span><br><span class="line">deploy_key_rsa</span><br></pre></td></tr></table></figure><p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说<code>working directory clean</code>。</p><p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为<code>.gitignore</code>了。</p><p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add App.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">App.class</span><br><span class="line">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure><p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p><p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.class    App.class</span><br></pre></td></tr></table></figure><p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><h5 id="小结-13">小结</h5><ul><li><p>忽略某些文件时，需要编写<code>.gitignore</code>；</p></li><li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p></li></ul><h4 id="2-配置别名">2.配置别名</h4><p>有没有经常敲错命令？比如<code>git status</code>？<code>status</code>这个单词真心不好记。</p><p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p><p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><p>好了，现在敲<code>git st</code>看看效果。</p><p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure><p>以后提交就可以简写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure><p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p><p>在<code>撤销修改</code>一节中，我们知道，命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.unstage &#x27;reset HEAD&#x27;</span><br></pre></td></tr></table></figure><p>当你敲入命令：</p><p>实际上Git执行的是：</p><p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.last &#x27;log -1&#x27;</span><br></pre></td></tr></table></figure><p>这样，用<code>git last</code>就能显示最近一次的提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git last</span><br><span class="line">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</span><br><span class="line">Merge: bd6ae48 291bea8</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Thu Aug 22 22:49:22 2013 +0800</span><br><span class="line">    merge &amp; fix hello.py</span><br></pre></td></tr></table></figure><p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure><p>为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！</p><h5 id="配置文件">配置文件</h5><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/config </span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = true</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    ignorecase = true</span><br><span class="line">    precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = git@github.com:michaelliao/learngit.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br><span class="line">[alias]</span><br><span class="line">    last = log -1</span><br></pre></td></tr></table></figure><p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。</p><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat .gitconfig</span><br><span class="line">[alias]</span><br><span class="line">    co = checkout</span><br><span class="line">    ci = commit</span><br><span class="line">    br = branch</span><br><span class="line">    st = status</span><br><span class="line">[user]</span><br><span class="line">    name = Your Name</span><br><span class="line">    email = your@email.com</span><br></pre></td></tr></table></figure><p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p><h5 id="小结-14">小结</h5><p>给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p><h4 id="3-搭建Git服务器">3.搭建Git服务器</h4><p>在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p><p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p><p>假设你已经有<code>sudo</code>权限的用户账号，下面，正式开始安装。</p><p>第一步，安装<code>git</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><p>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：</p><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo git init --bare sample.git</span><br></pre></td></tr></table></figure><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R git:git sample.git</span><br></pre></td></tr></table></figure><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@server:/srv/sample.git</span><br><span class="line">Cloning into &#x27;sample&#x27;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure><p>剩下的推送就简单了。</p><h5 id="管理公钥">管理公钥</h5><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fres0nat0r%2Fgitosis">Gitosis</a>来管理公钥。</p><p>这里我们不介绍怎么玩<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fres0nat0r%2Fgitosis">Gitosis</a>了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p><h6 id="管理权限">管理权限</h6><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsitaramc%2Fgitolite">Gitolite</a>就是这个工具。</p><p>这里我们也不介绍<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsitaramc%2Fgitolite">Gitolite</a>了，不要把有限的生命浪费到权限斗争中。</p><h5 id="小结-15">小结</h5><ul><li><p>搭建Git服务器非常简单，通常10分钟即可完成；</p></li><li><p>要方便管理公钥，用<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsitaramc%2Fgitolite">Gitosis</a>；</p></li><li><p>要像SVN那样变态地控制权限，用<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsitaramc%2Fgitolite">Gitolite</a>。</p></li></ul><p>git</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode版本管理工具</title>
      <link href="/post/43d69001.html"/>
      <url>/post/43d69001.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇要来分享刚学习到的新套件，xcodes。 主要原因是因为手机突然更新了最新版本，XCode版本不能使用真机，于是更新XCode版本，但是更新完成打包出现各种问题，于是就要找到新版本的安装，但是在AppStore的Xcode都是最新版本，若是后续要找回旧版本相当困难，刚好之前在“weak self”的podcast有听到这个管理Xcode版本的套件，所以就先下载来尝试看看。顺便分享遭遇到的一些小</p></blockquote><hr><p>这篇要来分享刚学习到的新套件，xcodes。</p><p>主要原因是因为手机突然更新了最新版本，XCode版本不能使用真机，于是更新XCode版本，但是更新完成打包出现各种问题，于是就要找到新版本的安装，但是在AppStore的Xcode都是最新版本，若是后续要找回旧版本相当困难，刚好之前在“weak self”的podcast有听到这个管理Xcode版本的套件，所以就先下载来尝试看看。顺便分享遭遇到的一些小问题。</p><p>首先先找到xcodes的GitHub网址，如下。</p><div class="tag link"><a class="link-card" title="XcodesApp" href="https://github.com/RobotsAndPencils/XcodesApp"><div class="left"><img src="https://raw.githubusercontent.com/XcodesOrg/XcodesApp/9cf10125ca481159106f4434e033797a55b47bc2/icon.png"/></div><div class="right"><p class="text">XcodesApp</p><p class="url">https://github.com/RobotsAndPencils/XcodesApp</p></div></a></div><p>点选进去可以看到安装的方法</p><p><a href="http://zwp233.top/post/43d69001/1*T5IG6Rx9okjiHQpNyl0YXQ.png"><img src="http://zwp233.top/post/43d69001/1*T5IG6Rx9okjiHQpNyl0YXQ.png" alt=""></a></p><p>需要透过所谓的Homebrew来进行安装，而安装的指令是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask xcodes</span><br></pre></td></tr></table></figure><p>而这个所谓brew也是一种套件安装的方式</p><p>所以要先安装brew后才能透过brew安装xcodes，点选上面的网址可以看到Homebrew的安装指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>打开Terminal后贴上上面指令后执行</p><p><a href="http://zwp233.top/post/43d69001/1*T5IG6Rx9okjiHQpNyl0YXQ.png"><img src="http://zwp233.top/post/43d69001/1*T5IG6Rx9okjiHQpNyl0YXQ.png" alt=""></a></p><p>接着就会请你输入帐号密码后安装，正常的状况下会安装完成。但是刚好我遭遇到一个小状况。安装后发现到没有安装完成，但是不要紧张，在终端机下方会告诉你失败的原因，我发现到Terminal会告诉你是因为有2个path没有安装到，下方也会很贴心的附上那两个path的指令，刚好我已经安装完所以错误已经看不到了。</p><p>把那两个指令安装下去Homebrew就算是安装完成，接着就可以装xcodes，透过github所提供的安装指令就会自己开始跑。</p><p>跑完之后就会出现在你的Mac里面了。</p><p><a href="http://zwp233.top/post/43d69001/1*1YD-Kl_bfJarLCv9bd_w_g.png"><img src="http://zwp233.top/post/43d69001/1*1YD-Kl_bfJarLCv9bd_w_g.png" alt=""></a></p><p>点开可以尝试选择要的版本安装，但是在安装时我跳出这个错误讯息。</p><p><a href="http://zwp233.top/post/43d69001/1*DOJgiE482-ZgSCln-A2AYw.png"><img src="http://zwp233.top/post/43d69001/1*DOJgiE482-ZgSCln-A2AYw.png" alt=""></a></p><p>这个时候点选上方的齿轮</p><p><a href="http://zwp233.top/post/43d69001/1*ooqeWY4JGvpgBK1M3jevZQ.png"><img src="http://zwp233.top/post/43d69001/1*ooqeWY4JGvpgBK1M3jevZQ.png" alt=""></a></p><p>点下Sign IN</p><p><a href="http://zwp233.top/post/43d69001/1*kC4Q2SIHHy4UIZpk4QJLQQ.png"><img src="http://zwp233.top/post/43d69001/1*kC4Q2SIHHy4UIZpk4QJLQQ.png" alt=""></a></p><p>输入开发Apple ID后就可以了。</p><p>这个时候就可以顺利透过xcodes安装所要的版本，终于知道为什么别人说开发Swift的Mac容量越大越好，毕竟一个版本通常都是1xGB起跳。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS面试题</title>
      <link href="/post/6db1ba4f.html"/>
      <url>/post/6db1ba4f.html</url>
      
        <content type="html"><![CDATA[<h2 id="iOS2023年最新面试题（持续更新中）">iOS2023年最新面试题（持续更新中）</h2><h3 id="OC和Swift语言基础">OC和Swift语言基础</h3><h4 id="1、-synthesize和-dynamic分别有什么作用？">1、@synthesize和@dynamic分别有什么作用？</h4><ul><li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var;</li><li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li><li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 instance.var = someVar，由于缺 setter 方法会导致程序崩溃；或者当运行到 someVar = var 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li></ul><h4 id="2、Swift和OC的区别？">2、Swift和OC的区别？</h4><ul><li>快速、现代、安全、互动，而且明显优于 Objective-C 语言</li><li>可以使用现有的 Cocoa 和 Cocoa Touch 框架</li><li>Swift 取消了 Objective C 的指针/地址等不安全访问的使用</li><li>提供了类似 Java 的名字空间(namespace)、泛型 - (generic)var、运算对象重载（operator overloading</li><li>Swift 被简单的形容为 “没有 C 的 Objective-C”（Objective-C without the C）</li><li>为苹果开发工具带来了Xcode Playgrounds功能，该功能提供强大的互动效果，能让Swift 源代码在撰写过程中实时显示出其运行结果；</li><li>基于C和Objective-C，而却没有C的一些兼容约束；</li><li>采用了安全的编程模式；</li><li>舍弃 Objective C 早期应用 Smalltalk 的语法，保留了Smalltalk的动态特性，全面改为句点表示法</li><li>类型严谨 对比oc的动态绑定</li></ul><h4 id="3、Swift中struct和class的区别？">3、Swift中struct和class的区别？</h4><ul><li><strong>struct</strong><br>值类型，深拷贝，分配在栈上<br>没有析构函数<br>不能继承<br>不会发生内存泄漏，线程安全<br>实例方法修改属性时用mutating标记</li><li><strong>class</strong><br>引用类型，浅拷贝，分配在堆上<br>有析构函数<br>可以单继承<br>可以有单例<br>无需mutating标记<br>每一个成员变量都必须初始化</li></ul><ol><li>class 直接对属性赋值，也就是没有通过构造器赋值的，在创建对象对属性赋值只能是如下方式:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class ClassPerson  &#123;</span><br><span class="line">    var name: String?</span><br><span class="line">    var age: Int?</span><br><span class="line">&#125;</span><br><span class="line">struct StructPerson &#123;</span><br><span class="line">    var name: String?</span><br><span class="line">    var age: Int?</span><br><span class="line">&#125;</span><br><span class="line">let p1 = ClassPerson()</span><br><span class="line">p1.name = &quot;123&quot;</span><br><span class="line">print(p1.name)</span><br><span class="line"></span><br><span class="line">var p2 = StructPerson(name: &quot;abc&quot;, age: 20)</span><br><span class="line">p2.name = &quot;123&quot;</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure><p>原因： class 在初始化时不能直接把 property 放在默认的 constructor 的参数里，而是<strong>需要自己创建一个带参数的constructor</strong></p><ol start="2"><li>struct是值类型, class是引用类型</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class ClassPerson  &#123;</span><br><span class="line">    var name: String</span><br><span class="line">    var age: Int</span><br><span class="line">    init(name:String,age:Int) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">struct StructPerson &#123;</span><br><span class="line">    var name: String</span><br><span class="line">    var age: Int</span><br><span class="line">&#125;</span><br><span class="line">let p1 = ClassPerson(name: &quot;abc&quot;, age: 10)</span><br><span class="line">let secondP1 = p1</span><br><span class="line">secondP1.name = &quot;123&quot;</span><br><span class="line">print(p1.name)</span><br><span class="line"></span><br><span class="line">let p2 = StructPerson(name: &quot;abc&quot;, age: 20)</span><br><span class="line">var secondP2 = p2</span><br><span class="line">secondP2.name = &quot;123&quot;</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2752635-2743acc26e5d8a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/438/format/webp" alt=""></p><p>截屏2023-02-14 下午8.52.05.png</p><ol start="3"><li>在struct的成员函数中修改自己本身的值，应该在函数签名上加上mutating关键字,而class则没有此限制</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class ClassPerson  &#123;</span><br><span class="line">    var name: String</span><br><span class="line">    var age: Int</span><br><span class="line">    init(name:String,age:Int) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">   &#125;</span><br><span class="line">   func changeName()&#123;</span><br><span class="line">        self.name = self.name + &quot;name&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">struct StructPerson &#123;</span><br><span class="line">    var name: String</span><br><span class="line">    var age: Int</span><br><span class="line">    mutating func changeName()&#123;</span><br><span class="line">        self.name = self.name + &quot;name&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1 = ClassPerson(name: &quot;abc&quot;, age: 10)</span><br><span class="line">print(p1.name)</span><br><span class="line">p1.changeName()</span><br><span class="line">print(p1.name)</span><br><span class="line">var p2 = StructPerson(name: &quot;abc&quot;, age: 20)</span><br><span class="line">print(p2.name)</span><br><span class="line">p2.changeName()</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2752635-6f0b530099847e8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/380/format/webp" alt=""></p><p>截屏2023-02-14 下午8.46.42.png</p><ol start="4"><li>struct初始化为let的对象无法修改，修改会编译报错，而class没有此限制</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class ClassPerson  &#123;</span><br><span class="line">   var name: String?</span><br><span class="line">   var age: Int?</span><br><span class="line">   init(name:String,age:Int) &#123;</span><br><span class="line">     self.name = name</span><br><span class="line">     self.age = age</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">struct StructPerson &#123;</span><br><span class="line">   var name: String?</span><br><span class="line">   var age: Int?</span><br><span class="line">&#125;</span><br><span class="line">let p1 = ClassPerson(name: &quot;abc&quot;, age: 10)</span><br><span class="line">p1.name = &quot;123&quot;</span><br><span class="line">print(p1.name)</span><br><span class="line"></span><br><span class="line">let p2 = StructPerson(name: &quot;abc&quot;, age: 20)</span><br><span class="line">p2.name = &quot;123&quot;</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2752635-afe879196a617de4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt=""></p><p>截屏2023-02-14 下午8.40.40.png</p><ol start="5"><li>OC里面无法调用Swift里的struct，因为要在OC里调用Swift代码的话，对象需要继承自NSObject。</li><li>struct不能被序列化成NSData，不能归解档，class可以，因为归解档的类必须遵守NSCoding协议，而NSCoding只适用于继承自NSObject的类，struct不能遵守NSCoding协议。<br><strong>解决方案：<br>定义一个protocol，包含两个方法：<br>1.从结构体中得到一个NSDictionary对象<br>2.使用一个NSDictionary对象实例化结构体<br>NSDictionary可以使用NSKeyedArchiver进行序列化<br>好处：所有遵守该协议的结构体都可以被序列化</strong></li></ol><h4 id="4、KVC实现原理？">4、KVC实现原理？</h4><p>KVC，键-值编码，使用字符串直接访问对象的属性。<br>底层实现，当一个对象调用setValue方法时，方法内部会做以下操作：</p><ol><li>检查是否存在相应key的set方法，如果存在，就调用set方法</li><li>如果set方法不存在，就会查找与key相同名称并且带下划线的成员属性，如果有，则直接给成员属性赋值</li><li>如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值</li><li>如果还没找到，则调用<code>valueForUndefinedKey：</code>和<code>setValue：forUndefinedKey：</code>方法</li></ol><h4 id="5、KVO的实现原理？">5、KVO的实现原理？</h4><p><img src="https://upload-images.jianshu.io/upload_images/2752635-f60db70b7825c0a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt=""></p><p>kvo原理.jpg</p><ol><li>当给A类添加KVO的时候，runtime动态的生成了一个子类NSKVONotifying_A，让A类的isa指针指向NSKVONotifying_A类，重写class方法，隐藏对象真实类信息</li><li>重写监听属性的setter方法，在setter方法内部调用了Foundation 的 <code>_NSSetObjectValueAndNotify</code>函数</li><li>_NSSetObjectValueAndNotify函数内部<br>a) 首先会调用 <code>willChangeValueForKey</code><br>b) 然后给属性赋值<br>c) 最后调用<code>didChangeValueForKey</code><br>d) 最后调用 observer 的<code>observeValueForKeyPath</code>去告诉监听器属性值发生了改变 .</li><li>重写了dealloc做一些 KVO 内存释放</li></ol><h4 id="6、如何手动触发KVO方法？">6、如何手动触发KVO方法？</h4><ul><li>手动调用<code>willChangeValueForKey</code>和<code>didChangeValueForKey</code>方法</li><li>键值观察通知依赖于 NSObject 的两个方法: <code>willChangeValueForKey:</code>和 <code>didChangeValueForKey:</code>。在一个被观察属性发生改变之前， <code>willChangeValueForKey:</code>一定会被调用，这就会记录旧的值。而当改变发生后， <code>didChangeValueForKey :</code>会被调用，继而 <code>observeValueForKey:ofObject:change:context:</code>也会被调用。</li></ul><h4 id="7、为什么Block用copy关键字？">7、为什么Block用copy关键字？</h4><ul><li>Block在没有使用外部变量时，内存存在全局区，然而，当Block在使用外部变量的时候，内存是存在于栈区，当Block copy之后，是存在堆区的。存在于栈区的特点是对象随时有可能被销毁，一旦销毁在调用的时候，就会造成系统的崩溃。所以Block要用copy关键字。</li></ul><h4 id="8、-weak和assign的区别，什么场景下使用，代理为什么使用weak？">8、 weak和assign的区别，什么场景下使用，代理为什么使用weak？</h4><ul><li>weak是弱指针， 在对象被销毁的时候会把weak修饰的属性置为空，避免造成野指针，只能修饰对象类型。</li><li>assign对象被释放的时候不会指向nil，对象被释放了还是指向原来的地址。调用的话容易产生野指针。assign可以修对象和基本数据类型。</li><li>代理要使用weak，weak可以说是非持有关系，对象释放了就指向nil，什么时候释放是由外部来控制，可以用assign但是用assign的时需要对象被释放的时候，把delegate指向nil。</li></ul><h4 id="9、load和initialize的区别">9、load和initialize的区别</h4><ul><li>load方法的本质：直接执行函数指针，其实就是直接执行函数指针，不会执行消息发送objc_msgSend那一套流程。子类、分类的load方法不会覆盖父类的load方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static void schedule_class_load(class_t *cls)</span><br><span class="line">&#123;</span><br><span class="line">    assert(isRealized(cls));  // _read_images should realize</span><br><span class="line">    if (cls-&gt;data-&gt;flags &amp; RW_LOADED) return;</span><br><span class="line">    //确保先将父类添加到全局列表里 （loadable_class）</span><br><span class="line">    class_t *supercls = getSuperclass(cls);</span><br><span class="line">    if (supercls) schedule_class_load(supercls);</span><br><span class="line">    //再将当前类添加到全局列表里 （loadable_class）</span><br><span class="line">    add_class_to_loadable_list((Class)cls);</span><br><span class="line">    changeInfo(cls, RW_LOADED, 0); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Call all +loads for the detached list.</span><br><span class="line">    for (i = 0; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        IMP load_method = classes[i].method;</span><br><span class="line">        if (!cls) continue; </span><br><span class="line">        if (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(&quot;LOAD: +[%s load]\n&quot;, _class_getName(cls));</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method) ((id) cls, SEL_load);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>场景1 ：子类、父类、分类都实现load方法，调用情况<br>答：SuperClass-&gt;SubClass-&gt;CategoryClass</p></li><li><p>场景2 ：子类、父类、分类中子类不实现load方法，调用情况<br>答：SuperClass-&gt;CategoryClass</p></li><li><p>场景3 ：子类、父类、分类1、分类2都实现load方法，调用情况<br>答：SuperClass-&gt;SubClass-&gt;Category1Class-&gt;Category2Class</p></li><li><p>initialize方法的本质<br>在类、或者子类，接收到第一条消息之前被执行（如初始化）<br>initialize方法最终通过objc_msgSend来执行<br>initialize方法在main函数之后调用<br>如果一直没有使用类，则initialize方法不会被调用<br>如果子类没有实现initialize方法，则会调用父类的initialize方法。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__private_extern__ void _class_initialize(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    Class supercls;</span><br><span class="line">    BOOL reallyInitialize = NO;</span><br><span class="line"></span><br><span class="line">    // Get the real class from the metaclass. The superclass chain </span><br><span class="line">    // hangs off the real class only.</span><br><span class="line">    cls = _class_getNonMetaClass(cls);</span><br><span class="line"></span><br><span class="line">    // Make sure super is done initializing BEFORE beginning to initialize cls.</span><br><span class="line">    // See note about deadlock above.</span><br><span class="line">    supercls = _class_getSuperclass(cls);</span><br><span class="line">    if (supercls  &amp;&amp;  !_class_isInitialized(supercls)) &#123;</span><br><span class="line">        _class_initialize(supercls);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Try to atomically set CLS_INITIALIZING.</span><br><span class="line">    monitor_enter(&amp;classInitLock);</span><br><span class="line">    if (!_class_isInitialized(cls) &amp;&amp; !_class_isInitializing(cls)) &#123;</span><br><span class="line">        _class_setInitializing(cls);</span><br><span class="line">        reallyInitialize = YES;</span><br><span class="line">    &#125;</span><br><span class="line">    monitor_exit(&amp;classInitLock);</span><br><span class="line">    </span><br><span class="line">    if (reallyInitialize) &#123;</span><br><span class="line">        // We successfully set the CLS_INITIALIZING bit. Initialize the class.</span><br><span class="line">        </span><br><span class="line">        // Record that we&#x27;re initializing this class so we can message it.</span><br><span class="line">        _setThisThreadIsInitializingClass(cls);</span><br><span class="line">        </span><br><span class="line">        // Send the +initialize message.</span><br><span class="line">        // Note that +initialize is sent to the superclass (again) if </span><br><span class="line">        // this class doesn&#x27;t implement +initialize. 2157218</span><br><span class="line">        if (PrintInitializing) &#123;</span><br><span class="line">            _objc_inform(&quot;INITIALIZE: calling +[%s initialize]&quot;,</span><br><span class="line">                         _class_getName(cls));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ((void(*)(Class, SEL))objc_msgSend)(cls, SEL_initialize);</span><br><span class="line"></span><br><span class="line">        if (PrintInitializing) &#123;</span><br><span class="line">            _objc_inform(&quot;INITIALIZE: finished +[%s initialize]&quot;,</span><br><span class="line">                         _class_getName(cls));</span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">        // Done initializing. </span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先执行父类的initialize方法；通过_class_getSupercass取出父类，递归调用父类的initialize方法；initialize方法最终通过objc_msgSend来执行的。</p><ul><li>场景1 ：子类、父类都实现initialize方法，调用情况<br>答：SuperClass-&gt;SubClass</li><li>场景2 ：子类、父类中子类不实现initialize方法，调用情况<br>答：SuperClass-&gt;SuperClass（子类未实现，则会调用父类的initialize，导致父类调用多次）</li><li>场景3：子类、父类、子类分类都实现initialize方法，调用情况<br>答：SuperClass-&gt;CategoryClass（category中initialize方法覆盖其本类）</li><li>场景4：子类、父类、父类分类1、父类分类2都实现initialize方法，调用情况<br>答：CategoryClass-&gt;SubClass（category中initialize方法根据Compile Sources排序执行最后一个）</li></ul><p><strong>执行顺序</strong><br><strong>load</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/2752635-5bb81894c906ac50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/996/format/webp" alt=""></p><p>load.png</p><p>app启动自动加载所有load方法，load方法会在程序运行前加载一次。<br>1.先调用类的load，再调用分类的load<br>2.先编译的类，优先调用load，调用子类的load之前，会先调用父类的load<br>3.先编译的分类，优先调用load，顺序和Compile Sources中顺序一致</p><p><strong>initialize</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/2752635-dceb1a8122903d4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/943/format/webp" alt=""></p><p>initialize.png</p><p>initialize方法会在类或者子类在 第一次使用的时候调用，当有分类的时候会调用多次，如Son *s = [[Son alloc]init];<br>1.父类先于子类执行；（同load方法）<br>2.子类未实现，则会调用父类的initialize方法；<br>3.分类实现了initialize方法，则会覆盖类中的initialize方法（同category）；<br>4.存在多个分类，依赖Compile Sources中的顺序，执行最后一个分类的initialize方法（同category）；</p><p><strong>使用场景</strong><br>1.load通常用于Method Swizzle；<br>2.initialize可以用于初始化全局变量或静态变量；initialize方法可能被其分类中的initialize方法覆盖，导致无法调用。<br>**注意：**load和initialize方法内部使用了锁，因此他们是线程安全的。使用时避免阻塞线程，不要使用线程锁。</p><h4 id="10、如何理解copy-on-write？">10、如何理解copy-on-write？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">苹果建议当复制大的值类型数据的时候，使用写时复制技术，那什么是写时复制呢？我们现在看一段代码：</span><br><span class="line"></span><br><span class="line">值类型(比如:struct),在复制时,复制对象与原对象实际上在内存中指向同一个对象,当且仅当修改复制的对象时,才会在内存中创建一个新的对象</span><br><span class="line">为了提升性能，Struct, String、Array、Dictionary、Set采取了Copy On Write的技术</span><br><span class="line"></span><br><span class="line">比如仅当有“写”操作时，才会真正执行拷贝操作</span><br><span class="line"></span><br><span class="line">对于标准库值类型的赋值操作，Swift 能确保最佳性能，所有没必要为了保证最佳性能来避免赋值</span><br><span class="line">var array1: [Int] = [0, 1, 2, 3]</span><br><span class="line">var array2 = array1</span><br><span class="line"></span><br><span class="line">print(address: array1) //0x600000078de0</span><br><span class="line">print(address: array2) //0x600000078de0</span><br><span class="line"></span><br><span class="line">array2.append(4)</span><br><span class="line"></span><br><span class="line">print(address: array2) //0x6000000aa100</span><br><span class="line"></span><br><span class="line">我们看到当array2的值没有发生变化的时候，array1和array2指向同一个地址，但是当array2的发生变化时，array2指向地址也变了，很奇怪是吧。</span><br></pre></td></tr></table></figure><h3 id="UI">UI</h3><h4 id="1、UIView和CALayer的区别和联系？">1、UIView和CALayer的区别和联系？</h4><ul><li>UIView 继承 UIResponder，而 UIResponder 是响应者对象，可以对iOS 中的事件响应及传递，CALayer 没有继承自 UIResponder，所以 CALayer 不具备响应处理事件的能力。CALayer 是 QuartzCore 中的类，是一个比较底层的用来绘制内容的类，用来绘制UI</li><li>UIView 对 CALayer 封装属性，对 UIView 设置 frame、center、bounds 等位置信息时，其实都是UIView 对 CALayer 进一层封装，使得我们可以很方便地设置控件的位置；例如圆角、阴影等属性， UIView 就没有进一步封装，所以我们还是需要去设置 Layer 的属性来实现功能。</li><li>UIView 是 CALayer 的代理，UIView 持有一个 CALayer 的属性，并且是该属性的代理，用来提供一些 CALayer 行的数据，例如动画和绘制。</li></ul><h4 id="2、谈谈对UIResponder的理解？">2、谈谈对UIResponder的理解？</h4><p>UIResponder类是专门用来响应用户的操作处理各种事件的，包括触摸事件(Touch Events)、运动事件(Motion Events)、远程控制事件(Remote Control Events)。我们知道UIApplication、UIView、UIViewController这几个类是直接继承自UIResponder，所以这些类都可以响应事件。当然我们自定义的继承自UIView的View以及自定义的继承自UIViewController的控制器都可以响应事件。</p><ul><li>响应过程<br>iOS系统检测到手指触摸(Touch)操作时会将其打包成一个UIEvent对象，并放入当前活动Application的事件队列，单例的UIApplication会从事件队列中取出触摸事件并传递给单例的UIWindow来处理，UIWindow对象首先会使用<code>hitTest:withEvent:</code>方法寻找此次Touch操作初始点所在的视图(View)，即需要将触摸事件传递给其处理的视图(最合适来处理的控件)，这个过程称之为hit-test view。<br><strong>那么什么是最适合来处理事件的控件?</strong><br>1.自己能响应触摸事件<br>2.触摸点在自己身上<br>3.从后往前递归遍历子控件, 重复上两步<br>4.如果没有符合条件的子控件, 那么就自己最合适处理</li></ul><ol><li><code>hitTest:withEvent:</code>事件传递给控件的时候， 就会调用该方法，去寻找最合适的view并返回看可以响应的view</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</span><br><span class="line">    // 1.如果控件不允许与用用户交互,那么返回nil</span><br><span class="line">    if (self.userInteractionEnabled == NO || self.alpha &lt;= 0.01 || self.hidden == YES)&#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    // 2\. 如果点击的点在不在当前控件中,返回nil</span><br><span class="line">    if (![self pointInside:point withEvent:event])&#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    // 3.从后往前遍历每一个子控件</span><br><span class="line">    for(int i = (int)self.subviews.count - 1 ; i &gt;= 0 ;i--)&#123;</span><br><span class="line">        // 3.1获取一个子控件</span><br><span class="line">        UIView *childView = self.subviews[i];</span><br><span class="line">        // 3.2当前触摸点的坐标转换为相对于子控件触摸点的坐标</span><br><span class="line">        CGPoint childP = [self convertPoint:point toView:childView];</span><br><span class="line">        // 3.3判断是否在在子控件中找到了更合适的子控件(递归循环)</span><br><span class="line">        UIView *fitView = [childView hitTest:childP withEvent:event];</span><br><span class="line">        // 3.4如果找到了就返回</span><br><span class="line">        if (fitView) &#123;</span><br><span class="line">            return fitView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 4.没找到,表示没有比自己更合适的view,返回自己</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>pointInside:withEvent:</code>该方法判断触摸点是否在控件身上，是则返回YES，否则返回NO，point参数必须是方法调用者的坐标系.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event &#123;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、loadView的作用？">3、loadView的作用？</h4><p>loadView方法会在每次访问UIViewController的view(比如controller.view、self.view)而且view为nil时会被调用，此方法主要用来负责创建UIViewController的view(重写loadView方法，并且不需要调用[super loadView])<br>[super loadView]执行流程：</p><ul><li>它会先去查找与UIViewController相关联的xib文件，通过加载xib文件来创建UIViewController的view，如果在初始化UIViewController指定了xib文件名，就会根据传入的xib文件名加载对应的xib文件，如果没有明显地传xib文件名，就会加载跟UIViewController同名的xib文件</li><li>如果没有找到相关联的xib文件，就会创建一个空白的UIView，然后赋值给UIViewController的view属性</li><li>综上，在需要自定义UIViewController的view时，可以通过重写loadView方法且不需要调用[super loadView]方法。</li></ul><h3 id="内存管理">内存管理</h3><h3 id="RunLoop">RunLoop</h3><h4 id="1、RunLoop-的本质是什么？">1、RunLoop 的本质是什么？</h4><p>“Run loops are part of thefundamental infrastructure associated withthreads. A run loop is an event processing loopthat you use to schedule work and coordinatethe receipt of incoming events. The purpose ofa runloop is to keep your thread busy whenthere is work to do and put your thread tosleep when there is none.”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typedef struct CF_BRIDGED_MUTABLE_TYPE(id) __CFRunLoop * CFRunLoopRef;</span><br><span class="line"></span><br><span class="line">struct __CFRunLoop &#123;</span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    pthread_mutex_t _lock;          /* locked for accessing mode list */</span><br><span class="line">    //mach_port</span><br><span class="line">    __CFPort _wakeUpPort;           // used for CFRunLoopWakeUp </span><br><span class="line">    Boolean _unused;</span><br><span class="line">    volatile _per_run_data *_perRunData;              // reset for runs of the run loop</span><br><span class="line">    pthread_t _pthread;</span><br><span class="line">    uint32_t _winthread;</span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">    struct _block_item *_blocks_head;</span><br><span class="line">    struct _block_item *_blocks_tail;</span><br><span class="line">    CFAbsoluteTime _runTime;</span><br><span class="line">    CFAbsoluteTime _sleepTime;</span><br><span class="line">    CFTypeRef _counterpart;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1.NSRunLoop只是比CFRunLoop多了一层简单的OC封装，底层还是CFRunLoop，CFRunLoop本质是一个结构体，而NSRunLoop是一个NSObject对象。NSRunLoop存在于Foundation框架中，CFRunLoop是存在于CoreFoundation框架中的。NSRunLoop不是线程安全的，CFRunLoop时候线程安全的。</p><p>2.RunLoop是一个与线程相关的底层机制，用来接收事件和调度任务。runloop目的是让线程在有工作的时候保持忙碌，在没有工作的时候睡眠。</p><p>3.RunLoop是与线程相关的，它们的关系一一对应：一个线程只能对应一个RunLoop，即在某一时刻，一个线程只能运行在某一个RunLoop上。当运行一个应用程序的时候，系统会为应用程序的主线程创建一个RunLoop用来处理主线程上的事件，例如UI刷新和触屏事件。因此，开发者不需要为主线程显式地创建和运行一个RunLoop，而子线程需要显式地运行一个RunLoop，再将辅助线程放到RunLoop中运行，否则线程不会自动开启RunLoop。</p><h4 id="2、Runloop和线程是什么关系？">2、Runloop和线程是什么关系？</h4><p>线程和 RunLoop 之间是Key-value的对应关系，是保存在一个全局的 Dictionary 里，线程是key，RunLoop是value，而且是懒加载的。</p><h4 id="3、Runloop的底层数据结构是什么样的？有几种运行模式（mode）？每个运行模式下面的CFRunloopMode是哪些？他们分别是什么职责？">3、Runloop的底层数据结构是什么样的？有几种运行模式（mode）？每个运行模式下面的CFRunloopMode是哪些？他们分别是什么职责？</h4><ul><li><strong>Mode</strong>，运行模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">struct __CFRunLoopMode &#123;</span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    pthread_mutex_t _lock;  /* must have the run loop locked before locking this */</span><br><span class="line">    CFStringRef _name;     // mode名称</span><br><span class="line">    Boolean _stopped;      // mode是否被终止</span><br><span class="line">    char _padding[3];</span><br><span class="line">    // 几种事件，下面这四个字段，在苹果官方文档里面称为Item</span><br><span class="line">    // RunLoop中有个commomitems字段，里面就是保存的下面这些内容</span><br><span class="line">    CFMutableSetRef _sources0;</span><br><span class="line">    CFMutableSetRef _sources1;</span><br><span class="line">    CFMutableArrayRef _observers;</span><br><span class="line">    CFMutableArrayRef _timers;</span><br><span class="line">    CFMutableDictionaryRef _portToV1SourceMap;   //字典  key是mach_port_t，value是CFRunLoopSourceRef</span><br><span class="line">    __CFPortSet _portSet;    //保存所有需要监听的port，比如_wakeUpPort，_timerPort都保存在这个数组中</span><br><span class="line">    CFIndex _observerMask;</span><br><span class="line">#if USE_DISPATCH_SOURCE_FOR_TIMERS</span><br><span class="line">    dispatch_source_t _timerSource;</span><br><span class="line">    dispatch_queue_t _queue;</span><br><span class="line">    Boolean _timerFired; // set to true by the source when a timer has fired</span><br><span class="line">    Boolean _dispatchTimerArmed;</span><br><span class="line">#endif</span><br><span class="line">#if USE_MK_TIMER_TOO</span><br><span class="line">    mach_port_t _timerPort;</span><br><span class="line">    Boolean _mkTimerArmed;</span><br><span class="line">#endif</span><br><span class="line">#if DEPLOYMENT_TARGET_WINDOWS</span><br><span class="line">    DWORD _msgQMask;</span><br><span class="line">    void (*_msgPump)(void);</span><br><span class="line">#endif</span><br><span class="line">    uint64_t _timerSoftDeadline; /* TSR */</span><br><span class="line">    uint64_t _timerHardDeadline; /* TSR */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>模式（Mode）指的是一个包括输入源（Inputsource）、定时器（Timer）、观察者（Observer）的模型对象。简单点来说，模式就是用来存储runloop需要响应的事件，这些事件包括许多输入源、定时器和观察者。</p></li><li><p>系统默认注册5个Mode:<br>1.<strong>NSDefaultRunLoopMode：</strong> App的默认Mode,通常主线程是在这个Mode下运行<br>2.**UITrackingRunLoopMode：**界面跟踪Mode,用于ScrollView`追踪触摸滑动，保证界面滑动时不受其他Mode影响。<br>3.**NSRunLoopCommonModes：**并不是一个真的模式，它只是一个标记，如：被标记的 Timer可以在Default模式和UITracking下运行。<br>4.**UIInitializationRunLoopMode：**私有的mode，App启动的时候的状态，加载出第一个页面后，就转成了Default，通常用不到<br>5.**GSEventReceiveRunLoopMode：**系统的内部 Mode，通常用不到</p></li></ol><ul><li><strong>Source</strong>，输入源/事件源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//CFRunLoop.h</span><br><span class="line">typedef struct __CFRunLoopSource *CFRunLoopSourceRef;</span><br><span class="line">//CFRunLoop.c</span><br><span class="line">struct __CFRunLoopSource&#123;</span><br><span class="line">    CFRuntimeBase _base;//</span><br><span class="line">    uint32_t _bits;</span><br><span class="line">    pthread_mutex_t lock;</span><br><span class="line">    CFIndex _order;  /*immutable*/</span><br><span class="line">    CFMutableBagRef _runLoops;</span><br><span class="line">    union&#123;</span><br><span class="line">        CFRunLoopSourceContext version0; /*immutable,except invalidation*/</span><br><span class="line">        CFRunLoopSourceContext1 version1; /*immutable,except invalidattion*/</span><br><span class="line">    &#125;_context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1.联合体的作用是共享存储空间，也就是说，version0和version1两个变量共享一段存储空间，一个__CFRunLoopSource结构体变量要么对应version0类型的事件源，要么对应version1类型的事件源。其中，version0和version1分别在源码中对应事件源Source0和Source1。</p><p>2.Source0对应需要手动触发的事件，对应官方文档Input Source中的Custom和performSelector:onThread事件源。</p><p>3.Source1表示基于端口触发的事件，对应官方文档Input Source中Port的事件源。</p><ul><li><strong>Timer</strong>，定时源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct __CFRunLoopTimer &#123;</span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    uint16_t _bits;  //标记fire状态</span><br><span class="line">    pthread_mutex_t _lock;</span><br><span class="line">    CFRunLoopRef _runLoop;        //添加该timer的runloop</span><br><span class="line">    CFMutableSetRef _rlModes;     //存放所有 包含该timer的 mode的 modeName，意味着一个timer可能会在多个mode中存在</span><br><span class="line">    CFAbsoluteTime _nextFireDate;</span><br><span class="line">    CFTimeInterval _interval;     //理想时间间隔  /* immutable */</span><br><span class="line">    CFTimeInterval _tolerance;    //时间偏差      /* mutable */</span><br><span class="line">    uint64_t _fireTSR;          /* TSR units */</span><br><span class="line">    CFIndex _order;         /* immutable */</span><br><span class="line">    CFRunLoopTimerCallBack _callout;    /* immutable */</span><br><span class="line">    CFRunLoopTimerContext _context; /* immutable, except invalidation */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>__CFRunLoopTimer是一个基于mk_timer实现的定时器，通过_callout回调实现定时执行任务。NSTimer其实是对CFRunLoopTimerRef的一个上层封装。</p><ul><li><strong>Observer</strong>，观察者</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct __CFRunLoopObserver &#123;</span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    pthread_mutex_t _lock;</span><br><span class="line">    CFRunLoopRef _runLoop;   //添加该Observer的RunLoop</span><br><span class="line">    CFIndex _rlCount;</span><br><span class="line">    CFOptionFlags _activities;      /* immutable */</span><br><span class="line">    CFIndex _order;         /* immutable */</span><br><span class="line">    CFRunLoopObserverCallBack _callout;     //设置回调函数，回调指针  /* immutable */</span><br><span class="line">    CFRunLoopObserverContext _context;  /* immutable, except invalidation */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>CFRunLoopObserver是观察者，可以观察RunLoop的各种状态，每个 Observer 都包含了一个回调（也就是上面的CFRunLoopObserverCallBack函数指针），当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。</p><h4 id="4、Runloop-的监听状态有哪几种？">4、Runloop 的监听状态有哪几种？</h4><p>Entry-&gt;BeforeTimers-&gt;BeforeSources-&gt;BeforeWaiting(休眠)-&gt;AfterWaiting(唤醒)-&gt;Exit-&gt;AllActivities</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* Run Loop Observer Activities */</span><br><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    kCFRunLoopEntry = (1UL &lt;&lt; 0),                 // 即将进入Loop</span><br><span class="line">    kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),          // 即将处理Timer</span><br><span class="line">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),         // 即将处理Source</span><br><span class="line">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),         // 即将进入休眠</span><br><span class="line">    kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),          // 刚从休眠中唤醒</span><br><span class="line">    kCFRunLoopExit = (1UL &lt;&lt; 7),                  // 即将退出Loop</span><br><span class="line">    kCFRunLoopAllActivities = 0x0FFFFFFFU         // 所有状态</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1）kCFRunLoopEntry表示刚进入runloop的时候。<br>2）kCFRunLoopBeforeTimers表示将要处理timer。<br>3）kCFRunLoopBeforeSources表示将要处理Source。<br>4）kCFRunLoopBeforeWaiting表示将要进入休眠状态。<br>5）kCFRunLoopAfterWaiting表示将要从休眠状态进入唤醒状态。<br>6）kCFRunLoopExit表示退出状态。<br>7）kCFRunLoopAllActivities表示所有1）～6）中的状态。</p><h4 id="5、Runloop-的工作流程？">5、Runloop 的工作流程？</h4><p><img src="https://upload-images.jianshu.io/upload_images/2752635-727254256ae06203.png" alt=""></p><p>Runloop 的工作流程.png</p><p>内部逻辑：</p><ol><li>通知 Observer 已经进入了 RunLoop</li><li>通知 Observer 即将处理 Timer</li><li>通知 Observer 即将处理非基于端口的输入源（即将处理 Source0）</li><li>处理那些准备好的非基于端口的输入源（处理 Source0）</li><li>如果基于端口的输入源准备就绪并等待处理，请立刻处理该事件。转到第 9 步（处理 Source1）</li><li>通知 Observer 线程即将休眠</li><li>将线程置于休眠状态，直到发生以下事件之一</li></ol><ul><li>事件到达基于端口的输入源（port-based input sources）(也就是 Source0)</li><li>Timer 到时间执行</li><li>外部手动唤醒</li><li>为 RunLoop 设定的时间超时</li></ul><ol start="8"><li>通知 Observer 线程刚被唤醒（还没处理事件）</li><li>处理待处理事件</li></ol><ul><li>如果是 Timer 事件，处理 Timer 并重新启动循环，跳到第 2 步</li><li>如果输入源被触发，处理该事件（文档上是 deliver the event）</li><li>如果 RunLoop 被手动唤醒但尚未超时，重新启动循环，跳到第 2 步</li></ul><h4 id="6、Runloop-有哪些应用？">6、Runloop 有哪些应用？</h4><p>滑动scrollview时候的mode切换，cell的图片下载 将多个耗时操作分开执行，在每次 RunLoop唤醒时去做一个耗时任务。</p><h4 id="7、Runloop的内核态和用户态？">7、Runloop的内核态和用户态？</h4><ul><li>用户态-&gt;内核态 没有消息需要处理时，休眠以避免资源占用；</li><li>内核态-&gt;用户态 有消息需要处理时，立刻被唤醒。</li></ul><h4 id="8、点击APP图标，从程序启动、运行、退出这个过程当中，系统都发生了什么？">8、点击APP图标，从程序启动、运行、退出这个过程当中，系统都发生了什么？</h4><ul><li>程序启动后，调用<code>main</code>函数后，会调用<code>UIApplicationmain</code>函数，此函数内部会启动主线程的RunLoop，经过一系列处理，最终主线程RunLoop处于休眠状态；</li><li>如果此时点击了屏幕，会产生一个mach_port，基于mach_port最终转成Source1，唤醒主线程，运行处理；</li><li>当把程序杀死后，RunLoop退出，并且发送通知给观察者。RunLoop退出后线程即刻销毁。</li></ul><h3 id="Runtime">Runtime</h3><h4 id="1、概念">1、概念</h4><ul><li>oc是一门动态语言，所谓动态语言就是在编译阶段无法确定调用的函数以及属性的类型，只有在运行阶段首次确定类型和调用的函数。</li><li>Runtime就是动态语言下核心的一个库，底层都会通过<code>objc_msgSend</code>来处理消息转发机制。也是因为拥有Runtime使得oc语言灵活性比较强，能够具有动态、动态绑定、动态解析的特性。</li></ul><ol><li><strong>objc_msgSend</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* Basic Messaging Primitives</span><br><span class="line">*</span><br><span class="line">* On some architectures, use objc_msgSend_stret for some struct return types.</span><br><span class="line">* On some architectures, use objc_msgSend_fpret for some float return types.</span><br><span class="line">* On some architectures, use objc_msgSend_fp2ret for some float return types.</span><br><span class="line">*</span><br><span class="line">* These functions must be cast to an appropriate function pointer type </span><br><span class="line">* before being called. </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>这是官方的声明，这是个最基本的用于发送消息的函数。另外，这个函数并不能发送所有类型的消息，只能发送基本的消息。比如，在一些处理器上，我们必须使用<code>objc_msgSend_stret</code>来发送返回值类型为结构体的消息，使用<code>objc_msgSend_fpret</code>来发送返回值类型为浮点类型的消息，而又在一些处理器上，还得使用<code>objc_msgSend_fp2ret</code>来发送返回值类型为浮点类型的消息。要调用<code>objc_msgSend</code>函数，必须要将函数强制转换成合适的函数指针类型才能调用。<br>从<code>objc_msgSend</code>函数的声明来看，它应该是不带返回值的，但是我们在使用中却可以强制转换类型，以便接收返回值。另外，它的参数列表是可以任意多个的，前提也是要强制函数指针类型。<br>编译器会根据情况在<code>objc_msgSend</code>, <code>objc_msgSend_stret</code>, <code>objc_msgSendSuper</code>, 或 <code>objc_msgSendSuper_stret</code>四个方法中选择一个来调用。如果消息是传递给超类，那么会调用名字带有<code>”Super”</code>的函数；如果消息返回值是数据结构而不是简单值时，那么会调用名字带有<code>”stret”</code>的函数。</p><ol start="2"><li><strong>id</strong></li></ol><p><code>objc_msgSend</code>第一个参数类型为id，它是一个指向objc_object结构体的指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_object *id;</span><br><span class="line"></span><br><span class="line">struct objc_object &#123;</span><br><span class="line">private:</span><br><span class="line">    isa_t isa;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    // ISA() assumes this is NOT a tagged pointer object</span><br><span class="line">    Class ISA();</span><br><span class="line"></span><br><span class="line">    // rawISA() assumes this is NOT a tagged pointer object or a non pointer ISA</span><br><span class="line">    Class rawISA();</span><br><span class="line"></span><br><span class="line">    // getIsa() allows this to be a tagged pointer object</span><br><span class="line">    Class getIsa();</span><br><span class="line">    </span><br><span class="line">    uintptr_t isaBits() const;</span><br><span class="line"></span><br><span class="line">    // initIsa() should be used to init the isa of new objects only.</span><br><span class="line">    // If this object already has an isa, use changeIsa() for correctness.</span><br><span class="line">    // initInstanceIsa(): objects with no custom RR/AWZ</span><br><span class="line">    // initClassIsa(): class objects</span><br><span class="line">    // initProtocolIsa(): protocol objects</span><br><span class="line">    // initIsa(): other objects</span><br><span class="line">    void initIsa(Class cls /*nonpointer=false*/);</span><br><span class="line">    void initClassIsa(Class cls /*nonpointer=maybe*/);</span><br><span class="line">    void initProtocolIsa(Class cls /*nonpointer=maybe*/);</span><br><span class="line">    void initInstanceIsa(Class cls, bool hasCxxDtor);</span><br><span class="line"></span><br><span class="line">    // changeIsa() should be used to change the isa of existing objects.</span><br><span class="line">    // If this is a new object, use initIsa() for performance.</span><br><span class="line">    Class changeIsa(Class newCls);</span><br><span class="line"></span><br><span class="line">    bool hasNonpointerIsa();</span><br><span class="line">    bool isTaggedPointer();</span><br><span class="line">    bool isBasicTaggedPointer();</span><br><span class="line">    bool isExtTaggedPointer();</span><br><span class="line">    bool isClass();</span><br><span class="line"></span><br><span class="line">    // object may have associated objects?</span><br><span class="line">    bool hasAssociatedObjects();</span><br><span class="line">    void setHasAssociatedObjects();</span><br><span class="line"></span><br><span class="line">    // object may be weakly referenced?</span><br><span class="line">    bool isWeaklyReferenced();</span><br><span class="line">    void setWeaklyReferenced_nolock();</span><br><span class="line"></span><br><span class="line">    // object may have -.cxx_destruct implementation?</span><br><span class="line">    bool hasCxxDtor();</span><br><span class="line"></span><br><span class="line">    // Optimized calls to retain/release methods</span><br><span class="line">    id retain();</span><br><span class="line">    void release();</span><br><span class="line">    id autorelease();</span><br><span class="line"></span><br><span class="line">    // Implementations of retain/release methods</span><br><span class="line">    id rootRetain();</span><br><span class="line">    bool rootRelease();</span><br><span class="line">    id rootAutorelease();</span><br><span class="line">    bool rootTryRetain();</span><br><span class="line">    bool rootReleaseShouldDealloc();</span><br><span class="line">    uintptr_t rootRetainCount();</span><br><span class="line"></span><br><span class="line">    // Implementation of dealloc methods</span><br><span class="line">    bool rootIsDeallocating();</span><br><span class="line">    void clearDeallocating();</span><br><span class="line">    void rootDealloc();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    void initIsa(Class newCls, bool nonpointer, bool hasCxxDtor);</span><br><span class="line"></span><br><span class="line">    // Slow paths for inline control</span><br><span class="line">    id rootAutorelease2();</span><br><span class="line">    uintptr_t overrelease_error();</span><br><span class="line"></span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    // Unified retain count manipulation for nonpointer isa</span><br><span class="line">    id rootRetain(bool tryRetain, bool handleOverflow);</span><br><span class="line">    bool rootRelease(bool performDealloc, bool handleUnderflow);</span><br><span class="line">    id rootRetain_overflow(bool tryRetain);</span><br><span class="line">    uintptr_t rootRelease_underflow(bool performDealloc);</span><br><span class="line"></span><br><span class="line">    void clearDeallocating_slow();</span><br><span class="line"></span><br><span class="line">    // Side table retain count overflow for nonpointer isa</span><br><span class="line">    void sidetable_lock();</span><br><span class="line">    void sidetable_unlock();</span><br><span class="line"></span><br><span class="line">    void sidetable_moveExtraRC_nolock(size_t extra_rc, bool isDeallocating, bool weaklyReferenced);</span><br><span class="line">    bool sidetable_addExtraRC_nolock(size_t delta_rc);</span><br><span class="line">    size_t sidetable_subExtraRC_nolock(size_t delta_rc);</span><br><span class="line">    size_t sidetable_getExtraRC_nolock();</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    // Side-table-only retain count</span><br><span class="line">    bool sidetable_isDeallocating();</span><br><span class="line">    void sidetable_clearDeallocating();</span><br><span class="line"></span><br><span class="line">    bool sidetable_isWeaklyReferenced();</span><br><span class="line">    void sidetable_setWeaklyReferenced_nolock();</span><br><span class="line"></span><br><span class="line">    id sidetable_retain();</span><br><span class="line">    id sidetable_retain_slow(SideTable&amp; table);</span><br><span class="line"></span><br><span class="line">    uintptr_t sidetable_release(bool performDealloc = true);</span><br><span class="line">    uintptr_t sidetable_release_slow(SideTable&amp; table, bool performDealloc = true);</span><br><span class="line"></span><br><span class="line">    bool sidetable_tryRetain();</span><br><span class="line"></span><br><span class="line">    uintptr_t sidetable_retainCount();</span><br><span class="line">#if DEBUG</span><br><span class="line">    bool sidetable_present();</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>objc_object</code>结构体包含一个isa指针，根据isa指针就可以找到对象所属的类。<br>注意:isa指针不总是指向实例对象所属的类，不能依靠它来确定类型，而是应该用class方法来确定实例对象的类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">union isa_t &#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls;</span><br><span class="line">    uintptr_t bits;</span><br><span class="line">#if defined(ISA_BITFIELD)</span><br><span class="line">    struct &#123;</span><br><span class="line">        ISA_BITFIELD;  // defined in isa.h</span><br><span class="line">    &#125;;</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># if __arm64__</span><br><span class="line">// ARM64 simulators have a larger address space, so use the ARM64e</span><br><span class="line">// scheme even when simulators build for ARM64-not-e.</span><br><span class="line">#   if __has_feature(ptrauth_calls) || TARGET_OS_SIMULATOR</span><br><span class="line">#     define ISA_MASK        0x007ffffffffffff8ULL</span><br><span class="line">#     define ISA_MAGIC_MASK  0x0000000000000001ULL</span><br><span class="line">#     define ISA_MAGIC_VALUE 0x0000000000000001ULL</span><br><span class="line">#     define ISA_HAS_CXX_DTOR_BIT 0</span><br><span class="line">#     define ISA_BITFIELD                                                      \</span><br><span class="line">        uintptr_t nonpointer        : 1;                                       \</span><br><span class="line">        uintptr_t has_assoc         : 1;                                       \</span><br><span class="line">        uintptr_t weakly_referenced : 1;                                       \</span><br><span class="line">        uintptr_t shiftcls_and_sig  : 52;                                      \</span><br><span class="line">        uintptr_t has_sidetable_rc  : 1;                                       \</span><br><span class="line">        uintptr_t extra_rc          : 8</span><br><span class="line">#     define ISA_HAS_INLINE_RC    1</span><br><span class="line">#     define RC_HAS_SIDETABLE_BIT 55</span><br><span class="line">#     define RC_ONE_BIT           (RC_HAS_SIDETABLE_BIT+1)</span><br><span class="line">#     define RC_ONE               (1ULL&lt;&lt;RC_ONE_BIT)</span><br><span class="line">#     define RC_HALF              (1ULL&lt;&lt;7)</span><br><span class="line">#   else</span><br><span class="line">#     define ISA_MASK        0x0000000ffffffff8ULL</span><br><span class="line">#     define ISA_MAGIC_MASK  0x000003f000000001ULL</span><br><span class="line">#     define ISA_MAGIC_VALUE 0x000001a000000001ULL</span><br><span class="line">#     define ISA_HAS_CXX_DTOR_BIT 1</span><br><span class="line">#     define ISA_BITFIELD                                                      \</span><br><span class="line">        uintptr_t nonpointer        : 1;                                       \</span><br><span class="line">        uintptr_t has_assoc         : 1;                                       \</span><br><span class="line">        uintptr_t has_cxx_dtor      : 1;                                       \</span><br><span class="line">        uintptr_t shiftcls          : 33; /*MACH_VM_MAX_ADDRESS 0x1000000000*/ \</span><br><span class="line">        uintptr_t magic             : 6;                                       \</span><br><span class="line">        uintptr_t weakly_referenced : 1;                                       \</span><br><span class="line">        uintptr_t unused            : 1;                                       \</span><br><span class="line">        uintptr_t has_sidetable_rc  : 1;                                       \</span><br><span class="line">        uintptr_t extra_rc          : 19</span><br><span class="line">#     define ISA_HAS_INLINE_RC    1</span><br><span class="line">#     define RC_HAS_SIDETABLE_BIT 44</span><br><span class="line">#     define RC_ONE_BIT           (RC_HAS_SIDETABLE_BIT+1)</span><br><span class="line">#     define RC_ONE               (1ULL&lt;&lt;RC_ONE_BIT)</span><br><span class="line">#     define RC_HALF              (1ULL&lt;&lt;18)</span><br><span class="line">#   endif</span><br></pre></td></tr></table></figure><p>所以在isa_t联合体中Class cls和uintptr_t bits是互斥的。<br>由 typedef unsigned long uintptr_t; 所知，bits占据8字节，共64位，64位中存储的即ISA_BITFIELD宏定义中的内容。</p><p>uintptr_t nonpointer : 1; 是否对isa指针开启优化。0:纯isa指针 1:不只类对象地址，还包括了类信息，对象对引用计数等。<br>uintptr_t has_assoc : 1; 关联对象标识位 0:没有 1:存在。<br>uintptr_t has_cxx_dtor : 1; 是否有c++或objc的析构函数 如果有则需要调用析构逻辑，如果没有则可以更快释放对象。<br>uintptr_t shiftcls : 33; 存储类指针的值，开启指针优化时，有33位用来存放类指针。<br>uintptr_t magic : 6; 用于调试器判断当前对象是真的对象还是未初始化的空间。<br>uintptr_t weakly_referenced : 1; 标志对象是否被指向或曾经指向一个ARC的弱变量，没有弱引用的对象可以更快的释放。<br>uintptr_t deallocating : 1; 标志对象是否正在释放内存。<br>uintptr_t has_sidetable_rc : 1; 当引用计数大于10时，则需要借助该变量存储进位。<br>uintptr_t extra_rc : 19 表示该对象的引用计数减1，如果引用计数为10，则extra_rc为9，如果引用计数大于10，则需要借助has_sidetable_rc。</p><ol start="3"><li><p><strong>SEL</strong><br>SEL其实是一个指向objc_selector结构体的指针：<code>typedef struct objc_selector *SEL</code>;<br><code>objc_msgSend</code>函数第二个参数类型为SEL，它是<code>selector</code>在Objc中的表示类型（Swift中是Selector类）。<br>其实它就是个映射到方法的C字符串，你可以用 Objc 编译器命令<code>@selector()</code>或者 Runtime 系统的<code>sel_registerName</code>函数来获得一个SEL类型的方法选择器。</p></li><li><p><strong>Class</strong></p></li></ol><p>Class其实是一个指向objc_class结构体的指针：<br><code>typedef struct objc_class *Class</code>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct objc_class : objc_object &#123;</span><br><span class="line">    // Class ISA;</span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             // formerly cache pointer and vtable</span><br><span class="line">    class_data_bits_t bits;    // class_rw_t * plus custom rr/alloc flags</span><br><span class="line">    </span><br><span class="line">    class_rw_t *data() const &#123;</span><br><span class="line">        return bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData) &#123;</span><br><span class="line">        bits.setData(newData);</span><br><span class="line">    &#125;</span><br><span class="line">    const class_ro_t *safe_ro() const &#123;</span><br><span class="line">        return bits.safe_ro();</span><br><span class="line">    &#125;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct class_data_bits_t &#123;</span><br><span class="line">    friend objc_class;</span><br><span class="line">    class_rw_t* data() const &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData)</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const class_ro_t *safe_ro() const &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">struct cache_t &#123;</span><br><span class="line">    explicit_atomic&lt;uintptr_t&gt; _bucketsAndMaybeMask;</span><br><span class="line">    // _bucketsAndMaybeMask is a buckets_t pointer in the top 28 bits</span><br><span class="line">    union &#123;</span><br><span class="line">        // Note: _flags on ARM64 needs to line up with the unused bits of</span><br><span class="line">        // _originalPreoptCache because we access some flags (specifically</span><br><span class="line">        // FAST_CACHE_HAS_DEFAULT_CORE and FAST_CACHE_HAS_DEFAULT_AWZ) on</span><br><span class="line">        // unrealized classes with the assumption that they will start out</span><br><span class="line">        // as 0.</span><br><span class="line">        struct &#123;</span><br><span class="line">#if CACHE_MASK_STORAGE == CACHE_MASK_STORAGE_OUTLINED &amp;&amp; !__LP64__</span><br><span class="line">            // Outlined cache mask storage, 32-bit, we have mask and occupied.</span><br><span class="line">            explicit_atomic&lt;mask_t&gt;    _mask;</span><br><span class="line">            uint16_t                   _occupied;</span><br><span class="line">#elif CACHE_MASK_STORAGE == CACHE_MASK_STORAGE_OUTLINED &amp;&amp; __LP64__</span><br><span class="line">            // Outlined cache mask storage, 64-bit, we have mask, occupied, flags.</span><br><span class="line">            explicit_atomic&lt;mask_t&gt;    _mask;</span><br><span class="line">            uint16_t                   _occupied;</span><br><span class="line">            uint16_t                   _flags;</span><br><span class="line">#   define CACHE_T_HAS_FLAGS 1</span><br><span class="line">#elif __LP64__</span><br><span class="line">            // Inline cache mask storage, 64-bit, we have occupied, flags, and</span><br><span class="line">            // empty space to line up flags with originalPreoptCache.</span><br><span class="line">            //</span><br><span class="line">            // Note: the assembly code for objc_release_xN knows about the</span><br><span class="line">            // location of _flags and the</span><br><span class="line">            // FAST_CACHE_HAS_CUSTOM_DEALLOC_INITIATION flag within. Any changes</span><br><span class="line">            // must be applied there as well.</span><br><span class="line">            uint32_t                   _unused;</span><br><span class="line">            uint16_t                   _occupied;</span><br><span class="line">            uint16_t                   _flags;</span><br><span class="line">#   define CACHE_T_HAS_FLAGS 1</span><br><span class="line">#else</span><br><span class="line">            // Inline cache mask storage, 32-bit, we have occupied, flags.</span><br><span class="line">            uint16_t                   _occupied;</span><br><span class="line">            uint16_t                   _flags;</span><br><span class="line">#   define CACHE_T_HAS_FLAGS 1</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        explicit_atomic&lt;preopt_cache_t *&gt; _originalPreoptCache;</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">public:</span><br><span class="line">    // The following four fields are public for objcdt&#x27;s use only.</span><br><span class="line">    // objcdt reaches into fields while the process is suspended</span><br><span class="line">    // hence doesn&#x27;t care for locks and pesky little details like this</span><br><span class="line">    // and can safely use these.</span><br><span class="line">    unsigned capacity() const;</span><br><span class="line">    struct bucket_t *buckets() const;</span><br><span class="line">    Class cls() const;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct bucket_t &#123;</span><br><span class="line">private:</span><br><span class="line">    // IMP-first is better for arm64e ptrauth and no worse for arm64.</span><br><span class="line">    // SEL-first is better for armv7* and i386 and x86_64.</span><br><span class="line">#if __arm64__</span><br><span class="line">    explicit_atomic&lt;uintptr_t&gt; _imp;</span><br><span class="line">    explicit_atomic&lt;SEL&gt; _sel;</span><br><span class="line">#else</span><br><span class="line">    explicit_atomic&lt;SEL&gt; _sel;</span><br><span class="line">    explicit_atomic&lt;uintptr_t&gt; _imp;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">struct class_rw_t &#123;</span><br><span class="line">    ...</span><br><span class="line">    explicit_atomic&lt;uintptr_t&gt; ro_or_rw_ext;</span><br><span class="line">    ...</span><br><span class="line">private:</span><br><span class="line">    using ro_or_rw_ext_t = objc::PointerUnion&lt;const class_ro_t, class_rw_ext_t, PTRAUTH_STR(&quot;class_ro_t&quot;), PTRAUTH_STR(&quot;class_rw_ext_t&quot;)&gt;;</span><br><span class="line">    const ro_or_rw_ext_t get_ro_or_rwe() const &#123;</span><br><span class="line">        return ro_or_rw_ext_t&#123;ro_or_rw_ext&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置ro</span><br><span class="line">    const class_ro_t *ro() const &#123;</span><br><span class="line">        auto v = get_ro_or_rwe();</span><br><span class="line">        if (slowpath(v.is&lt;class_rw_ext_t *&gt;())) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;()-&gt;ro;</span><br><span class="line">        &#125;</span><br><span class="line">        return v.get&lt;const class_ro_t *&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    void set_ro(const class_ro_t *ro) &#123;</span><br><span class="line">        auto v = get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;ro = ro;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            set_ro_or_rwe(ro);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取相关信息</span><br><span class="line">    const method_array_t methods() const &#123;</span><br><span class="line">        auto v = get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;()-&gt;methods;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return method_array_t&#123;v.get&lt;const class_ro_t *&gt;()-&gt;baseMethods()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const property_array_t properties() const &#123;</span><br><span class="line">        auto v = get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;()-&gt;properties;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return property_array_t&#123;v.get&lt;const class_ro_t *&gt;()-&gt;baseProperties&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const protocol_array_t protocols() const &#123;</span><br><span class="line">        auto v = get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;()-&gt;protocols;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return protocol_array_t&#123;v.get&lt;const class_ro_t *&gt;()-&gt;baseProtocols&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct class_rw_ext_t &#123;</span><br><span class="line">    const class_ro_t *ro;</span><br><span class="line">    method_array_t methods;</span><br><span class="line">    property_array_t properties;</span><br><span class="line">    protocol_array_t protocols;</span><br><span class="line">    char *demangledName;</span><br><span class="line">    uint32_t version;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">struct class_ro_t &#123;</span><br><span class="line">    uint32_t flags;</span><br><span class="line">    uint32_t instanceStart;</span><br><span class="line">    uint32_t instanceSize;</span><br><span class="line">#ifdef __LP64__</span><br><span class="line">    uint32_t reserved;</span><br><span class="line">#endif</span><br><span class="line">    const uint8_t * ivarLayout;</span><br><span class="line">    const char * name;</span><br><span class="line">    method_list_t * baseMethodList;</span><br><span class="line">    protocol_list_t * baseProtocols;</span><br><span class="line">    const ivar_list_t * ivars;</span><br><span class="line">    const uint8_t * weakIvarLayout;</span><br><span class="line">    property_list_t *baseProperties;</span><br><span class="line">    // This field exists only when RO_HAS_SWIFT_INITIALIZER is set.</span><br><span class="line">    _objc_swiftMetadataInitializer __ptrauth_objc_method_list_imp _swiftMetadataInitializer_NEVER_USE[0];</span><br><span class="line">    _objc_swiftMetadataInitializer swiftMetadataInitializer() const &#123;</span><br><span class="line">        if (flags &amp; RO_HAS_SWIFT_INITIALIZER) &#123;</span><br><span class="line">            return _swiftMetadataInitializer_NEVER_USE[0];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    method_list_t *baseMethods() const &#123;</span><br><span class="line">        return baseMethodList;</span><br><span class="line">    &#125;</span><br><span class="line">    class_ro_t *duplicate() const &#123;</span><br><span class="line">        if (flags &amp; RO_HAS_SWIFT_INITIALIZER) &#123;</span><br><span class="line">            size_t size = sizeof(*this) + sizeof(_swiftMetadataInitializer_NEVER_USE[0]);</span><br><span class="line">            class_ro_t *ro = (class_ro_t *)memdup(this, size);</span><br><span class="line">            ro-&gt;_swiftMetadataInitializer_NEVER_USE[0] = this-&gt;_swiftMetadataInitializer_NEVER_USE[0];</span><br><span class="line">            return ro;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            size_t size = sizeof(*this);</span><br><span class="line">            class_ro_t *ro = (class_ro_t *)memdup(this, size);</span><br><span class="line">            return ro;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Class本身是运行时加载的，在运行时会被改变，所以本身Class就是属于脏内存。那么如果想要获取Class的干净内存，也就是编译时确定的数据结构包括方法列表、成员变量等的，该怎么办？这其实就是class_ro_t的作用。因为class_ro_t是只读，意味着class_ro_t是从mach-o读取类的数据之后，就不会被改变。那如果我们想在运行时修改类的信息，比如添加方法，比如加载category怎么办呢？那这时候就有一个与之对应的class_rw_t结构，class_rw_t是运行时存储类的信息，可读可写的，可以在运行时修改。说到这里，好像还漏掉一个结构class_rw_ext_t，这个东西又是干什么用的呢？存在的意义是什么？其实还是跟运行时有关。实际上在我们的app运行中，需要运行时修改的类是非少的，据统计平均大概就10%左右。那也就是说大部分只需要读取class_ro_t中的数据就够了，少部分才需要修改。因此才会有class_rw_ext_t这个扩展的结构体。class_rw_ext_t的作用是这样的：当我们需要修改类结构时，比如添加方法、加载category等时，class_rw_t回去开辟一个额外的空间rwe（class_rw_ext_t），用于存储新的方法和class_ro_t中的方法等信息。这样做的目的有一个好处就是，对于绝大部分类是不需要这个开辟class_rw_ext_t这个结构体，节省内存。</p><h4 id="2、Runtime-如何实现-weak-属性？">2、Runtime 如何实现 weak 属性？</h4><p>weak 此特质表明该属性定义了一种「非拥有关系」(nonowning relationship)。为这种属性设置新值时，设置方法既不持有新值（新指向的对象），也不释放旧值（原来指向的对象）。</p><p>Runtime 对注册的类，会进行内存布局，维护一个 hash 表，这是一个全局表，表中是用 weak 指向的对象内存地址作为 key，用所有指向该对象的weak指针表作为 value。当此对象的引用计数为 0 的时候会调用<code>dealloc</code>，假如该对象内存地址是 a，那么就会以 a 为 key，在这个 weak 表中搜索，找到所有以 a 为键的 weak 对象，从而设置为 nil。</p><p>Runtime 如何实现 weak 属性具体流程大致分为 3 步：</p><ol><li>初始化时：runtime 会调用<code>objc_initWeak()</code>函数，初始化一个新的 weak 指针指向对象的地址。</li><li>添加引用时：<code>objc_initWeak()</code>函数会调用<code>objc_storeWeak()</code>函数，<code>objc_storeWeak()</code>的作用是更新指针指向**（指针可能原来指向着其他对象，这时候需要将该 weak 指针与旧对象解除绑定，会调用到<code>weak_unregister_no_lock</code>）**，如果指针指向的新对象非空，则创建对应的弱引用表，将 weak 指针与新对象进行绑定，会调用到<code>weak_register_no_lock</code>。在这个过程中，为了防止多线程中竞争冲突，会有一些锁的操作。</li><li>释放时：调用<code>clearDeallocating()</code>函数，该函数首先根据对象地址获取所有 weak 指针地址的数组，然后遍历这个数组把其中的数据设为 nil，最后把这个 entry 从 weak 表中删除，最后清理对象的记录。</li></ol><h4 id="3、Runtime具体应用">3、Runtime具体应用</h4><ol><li>利用关联对象（AssociatedObject）给分类添加属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objc_setAssociatedObject(&lt;#id object#&gt;, &lt;#const void *key#&gt;, &lt;#id value#&gt;, &lt;#objc_AssociationPolicy policy#&gt;)</span><br></pre></td></tr></table></figure><ul><li>第一个参数: id object : 需要传入的是 : 对象的主分支</li><li>第二个参数: const void *key : 是一个 static 类型的关键字,这里根据开发者自身来定义就行</li><li>第三个参数: id value : 传入的是: 对象的子分支</li><li>第四个参数: objc_AssociationPolicy policy :是当前关联对象的类型 strong,weak,copy (枚举类型:开发者可以点进去看)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objc_getAssociatedObject(&lt;#id object#&gt;, &lt;#const void *key#&gt;)就相对来说容易理解一点了</span><br></pre></td></tr></table></figure><ul><li>第一个参数 : id object : 需要传入的是 : 对象的主分支</li><li>第二个参数 : const void *key : 是一个 static 类型的关键字,这里根据开发者自身来定义就行</li></ul><ol start="2"><li>遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）</li><li>交换方法实现，在方法上增加额外功能（交换系统的方法）</li></ol><ul><li>有这样一个场景，出于某些需求，我们需要跟踪记录APP中按钮的点击次数和频率等数据，怎么解决？当然通过继承按钮类或者通过类别实现是一个办法，但是带来其他问题比如别人不一定会去实例化你写的子类，或者其他类别也实现了点击方法导致不确定会调用哪一个，runtime可以这样解决：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIButton (Hook)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line"></span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line"></span><br><span class="line">        Class selfClass = [self class];</span><br><span class="line"></span><br><span class="line">        SEL oriSEL = @selector(sendAction:to:forEvent:);</span><br><span class="line">        Method oriMethod = class_getInstanceMethod(selfClass, oriSEL);</span><br><span class="line"></span><br><span class="line">        SEL cusSEL = @selector(mySendAction:to:forEvent:);</span><br><span class="line">        Method cusMethod = class_getInstanceMethod(selfClass, cusSEL);</span><br><span class="line"></span><br><span class="line">        BOOL addSucc = class_addMethod(selfClass, oriSEL, method_getImplementation(cusMethod), method_getTypeEncoding(cusMethod));</span><br><span class="line">        if (addSucc) &#123;</span><br><span class="line">            class_replaceMethod(selfClass, cusSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            method_exchangeImplementations(oriMethod, cusMethod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)mySendAction:(SEL)action to:(id)target forEvent:(UIEvent *)event &#123;</span><br><span class="line">    [CountTool addClickCount];</span><br><span class="line">    [self mySendAction:action to:target forEvent:event];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ol start="4"><li>利用消息转发机制解决方法找不到的异常问题</li><li>动态变量控制<br>在程序中，xiaowen的age是20，后来被runtime变成10</li></ol><ul><li><p>动态获取xiaowen类中的所有属性[包括私有]<br>Ivar *ivar = class_copyIvarList([self.xiaowen class], &amp;count);</p></li><li><p>遍历属性找到对应name字段<br>const char *varName = ivar_getName(var);</p></li><li><p>修改对应的字段值成20<br>object_setIvar(self.xiaowen, var, @“20”);</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)changeAge &#123;</span><br><span class="line">     unsigned int count = 0;</span><br><span class="line">     Ivar *ivar = class_copyIvarList([self.xiaowen class], &amp;count);</span><br><span class="line">     for (int i = 0; i&lt;count; i++) &#123;</span><br><span class="line">         Ivar var = ivar[i];</span><br><span class="line">         const char *varName = ivar_getName(var);</span><br><span class="line">         NSString *name = [NSString stringWithUTF8String:varName];</span><br><span class="line">         if ([name isEqualToString:@&quot;_age&quot;]) &#123;</span><br><span class="line">             object_setIvar(self.xiaowen, var, @&quot;20&quot;);</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     NSLog(@&quot;age is %@&quot;,self.xiaowen.age);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>动态添加方法</li></ol><ul><li>动态给Person类中添加study方法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)addMethod &#123;</span><br><span class="line">    class_addMethod([self.xiaowen class], @selector(study), (IMP)studyImp, &quot;v@:&quot;);</span><br><span class="line">    if ([self.xiaowen respondsToSelector:@selector(study)]) &#123;</span><br><span class="line">        [self.xiaowen performSelector:@selector(study)];</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        NSLog(@&quot;Sorry,I don&#x27;t know&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void studyImp(id self,SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;i am from beijing&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(IMP)studyImp 意思是studyImp的地址指针;<br>“v@:” 意思是，v代表无返回值void，如果是i则代表int；@代表 id self; : 代表 SEL _cmd;<br>“v@:@@” 意思是，两个参数的没有返回值。</p><ol start="7"><li>KVC 字典转模型</li></ol><ul><li>先实现最外层的属性转换</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 创建对应模型对象</span><br><span class="line"> id objc = [[self alloc] init];</span><br><span class="line"></span><br><span class="line"> unsigned int count = 0;</span><br><span class="line"></span><br><span class="line"> // 1.获取成员属性数组</span><br><span class="line"> Ivar *ivarList = class_copyIvarList(self, &amp;count);</span><br><span class="line"></span><br><span class="line"> // 2.遍历所有的成员属性名,一个一个去字典中取出对应的value给模型属性赋值</span><br><span class="line"> for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line"></span><br><span class="line">     // 2.1 获取成员属性</span><br><span class="line">     Ivar ivar = ivarList[i];</span><br><span class="line"></span><br><span class="line">     // 2.2 获取成员属性名 C -&gt; OC 字符串</span><br><span class="line">     NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line"></span><br><span class="line">     // 2.3 _成员属性名 =&gt; 字典key</span><br><span class="line">     NSString *key = [ivarName substringFromIndex:1];</span><br><span class="line"></span><br><span class="line">     // 2.4 去字典中取出对应value给模型属性赋值</span><br><span class="line">     id value = dict[key];</span><br><span class="line"></span><br><span class="line">     // 获取成员属性类型</span><br><span class="line">     NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>内层数组，字典的转换</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">if ([value isKindOfClass:[NSDictionary class]] &amp;&amp; ![ivarType containsString:@&quot;NS&quot;]) &#123; </span><br><span class="line">       //  是字典对象,并且属性名对应类型是自定义类型</span><br><span class="line">      // 处理类型字符串 @\&quot;User\&quot; -&gt; User</span><br><span class="line">      ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;@&quot; withString:@&quot;&quot;];</span><br><span class="line">      ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;\&quot;&quot; withString:@&quot;&quot;];</span><br><span class="line">      // 自定义对象,并且值是字典</span><br><span class="line">      // value:user字典 -&gt; User模型</span><br><span class="line">      // 获取模型(user)类对象</span><br><span class="line">      Class modalClass = NSClassFromString(ivarType);</span><br><span class="line"></span><br><span class="line">      // 字典转模型</span><br><span class="line">      if (modalClass) &#123;</span><br><span class="line">          // 字典转模型 user</span><br><span class="line">          value = [modalClass objectWithDict:value];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if ([value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">      // 判断对应类有没有实现字典数组转模型数组的协议</span><br><span class="line">      if ([self respondsToSelector:@selector(arrayContainModelClass)]) &#123;</span><br><span class="line"></span><br><span class="line">          // 转换成id类型，就能调用任何对象的方法</span><br><span class="line">          id idSelf = self;</span><br><span class="line"></span><br><span class="line">          // 获取数组中字典对应的模型</span><br><span class="line">          NSString *type =  [idSelf arrayContainModelClass][key];</span><br><span class="line"></span><br><span class="line">          // 生成模型</span><br><span class="line">          Class classModel = NSClassFromString(type);</span><br><span class="line">          NSMutableArray *arrM = [NSMutableArray array];</span><br><span class="line">          // 遍历字典数组，生成模型数组</span><br><span class="line">          for (NSDictionary *dict in value) &#123;</span><br><span class="line">              // 字典转模型</span><br><span class="line">              id model =  [classModel objectWithDict:dict];</span><br><span class="line">              [arrM addObject:model];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          // 把模型数组赋值给value</span><br><span class="line">          value = arrM;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>动态的添加对象的成员变量和方法</li><li>实现NSCoding的自动归档和解档，我们把encodeWithCoder 和 initWithCoder这两个方法抽成宏</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">#define encodeRuntime(A) \</span><br><span class="line">\</span><br><span class="line">unsigned int count = 0;\</span><br><span class="line">Ivar *ivars = class_copyIvarList([A class], &amp;count);\</span><br><span class="line">for (int i = 0; i&lt;count; i++) &#123;\</span><br><span class="line">Ivar ivar = ivars[i];\</span><br><span class="line">const char *name = ivar_getName(ivar);\</span><br><span class="line">NSString *key = [NSString stringWithUTF8String:name];\</span><br><span class="line">id value = [self valueForKey:key];\</span><br><span class="line">[encoder encodeObject:value forKey:key];\</span><br><span class="line">&#125;\</span><br><span class="line">free(ivars);\</span><br><span class="line">\</span><br><span class="line"></span><br><span class="line">#define initCoderRuntime(A) \</span><br><span class="line">\</span><br><span class="line">if (self = [super init]) &#123;\</span><br><span class="line">unsigned int count = 0;\</span><br><span class="line">Ivar *ivars = class_copyIvarList([A class], &amp;count);\</span><br><span class="line">for (int i = 0; i&lt;count; i++) &#123;\</span><br><span class="line">Ivar ivar = ivars[i];\</span><br><span class="line">const char *name = ivar_getName(ivar);\</span><br><span class="line">NSString *key = [NSString stringWithUTF8String:name];\</span><br><span class="line">id value = [decoder decodeObjectForKey:key];\</span><br><span class="line">[self setValue:value forKey:key];\</span><br><span class="line">&#125;\</span><br><span class="line">free(ivars);\</span><br><span class="line">&#125;\</span><br><span class="line">return self;\</span><br><span class="line">\</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">- (void)encodeWithCoder:(NSCoder *)encoder &#123;</span><br><span class="line">    encodeRuntime(Person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)initWithCoder:(NSCoder *)decoder &#123;</span><br><span class="line">    initCoderRuntime(Person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="4、Runtime方法调用流程？">4、Runtime方法调用流程？</h4><p>1、当调用对象方法的时候，会通过obj_object的isa指针找对对应的归属类。<br>2、从归属类（obj_class）类中的cache中寻找对应的相等的sel方法编号。<br>3、如果没有找到，继续obj_class中的method_list中查找，如果找到写入cache中。<br>4、如果没有到找到，会一直找到它的元类上。<br>5、如果元类也没有的话，会调用消息动态解析方法<code>+resovleInstanceMethod:</code>和<code>+resloveClassMethod:</code>的方法，查看是否存在绑定的方法。<br>6、如果没有绑定方法，会调用消息转发方法<code>-forwardingTargetForSelector:</code>的方法。查看是否存在转发对象。<br>7、如果没有存在消息转发对象，会调用<code>-methodSignatureForSelector:</code>的方法，查看是否有方法签名返回类型和参数类型。<br>8、不存在签名方法和类型，就会来到<code>-doseNotRecognizeSelector:</code>方法内部程序crash提示无法识别选择器unrecognized selector sent to instance。<br>9、存在签名的方法，就是继续执行<code>-forwardInvocation:</code>寻找IMP，没有找到IMP，就会来到<code>-doseNotRecognizeSelector:</code>方法内部程序crash提示无法识别选择器unrecognized selector sent to instance。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@implementation Person</span><br><span class="line">- (BOOL)respondsToSelector:(SEL)aSelector &#123;</span><br><span class="line">    bool a= [super respondsToSelector:aSelector];</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">//如果方法没有实现，默认返回false</span><br><span class="line">//如果返回false，就会走消息转发</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    bool a = [super resolveInstanceMethod:sel];</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">//默认返回空</span><br><span class="line">//又被称为快速消息转发。</span><br><span class="line">// 如果为空，走慢速消息转发，继续转发消息</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    id a = [super forwardingTargetForSelector:aSelector];</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">// 默认一般普通方法是返回空的。</span><br><span class="line">// 如果是协议方法，没有实现，不会反回空。</span><br><span class="line">//反回空，到这里就会崩溃了</span><br><span class="line">//如果这里返回了签名，会再次调用resolveInstanceMethod:(SEL)sel判断是否实现</span><br><span class="line">//如果仍然没有实现，就会走到fowardInvocation:</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSMethodSignature *a = [super methodSignatureForSelector:aSelector];</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">//默认实现是崩溃</span><br><span class="line">//并且不能用try-catch捕获</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    [super forwardInvocation:anInvocation];</span><br><span class="line">    NSLog(@&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="5、Runtime的方法交换的流程？">5、Runtime的方法交换的流程？</h4><p>1、方法交换要放在<code>+(viod)load</code>中处理。<br>2、在load中首先使用<code>class_addMethod</code>的方法添加新方法。<br>3、添加成功后，使用<code>class_replaceMethod</code>替换原来的方法。<br>4、如果添加失败的话，则说明已经有添加成功。直接使用<code>class_exchangeMethod</code>的方法替换。<br>5、在交换方法时候，使用<code>dispach_one</code>的方法。<br>6、在新方法中调用新方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用注意要点：</span><br><span class="line">1、使用load时候，切记不要做初始化和大开销大内存逻辑。因为程序顺序是，父类-&gt;当前类-&gt;分类-&gt;mian</span><br><span class="line">2、使用的时候如果方法相同是不会覆盖原来的方法，会放在置顶，所以一般不会调用到原来的方法。</span><br><span class="line">3、在新方法中调用新方法。</span><br></pre></td></tr></table></figure><h4 id="6、常见方法？">6、常见方法？</h4><ul><li>获取属性列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">objc_property_t *propertyList = class_copyPropertyList([self class], &amp;count);</span><br><span class="line">for (unsigned int i=0; i&lt;count; i++) &#123;</span><br><span class="line">    const char *propertyName = property_getName(propertyList[i]);</span><br><span class="line">    NSLog(@&quot;property----&gt;%@&quot;, [NSString stringWithUTF8String:propertyName]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取方法列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Method *methodList = class_copyMethodList([self class], &amp;count);</span><br><span class="line">for (unsigned int i; i&lt;count; i++) &#123;</span><br><span class="line">    Method method = methodList[i];</span><br><span class="line">    NSLog(@&quot;Method----&gt;%@&quot;, NSStringFromSelector(method_getName(method)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取成员变量列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ivar *ivarList = class_copyIvarList([self class], &amp;count);</span><br><span class="line">for (unsigned int i; i&lt;count; i++) &#123;</span><br><span class="line">    Ivar myIvar = ivarList[i];</span><br><span class="line">    const char *ivarName = ivar_getName(myIvar);</span><br><span class="line">    NSLog(@&quot;Ivar----&gt;%@&quot;, [NSString stringWithUTF8String:ivarName]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>获取协议列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__unsafe_unretained Protocol **protocolList = class_copyProtocolList([self class], &amp;count);</span><br><span class="line">for (unsigned int i; i&lt;count; i++) &#123;</span><br><span class="line">    Protocol *myProtocal = protocolList[i];</span><br><span class="line">    const char *protocolName = protocol_getName(myProtocal);</span><br><span class="line">    NSLog(@&quot;protocol----&gt;%@&quot;, [NSString stringWithUTF8String:protocolName]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算机网络">计算机网络</h3><h4 id="1、网络七层协议">1、网络七层协议</h4><ul><li><strong>应用层：</strong><br>1.用户接口、应用程序；<br>2.Application典型设备：网关；<br>3.典型协议、标准和应用：TELNET、FTP、HTTP</li><li><strong>表示层：</strong><br>1.数据表示、压缩和加密presentation<br>2.典型设备：网关<br>3.典型协议、标准和应用：ASCLL、PICT、TIFF、JPEG|MPEG<br>4.表示层相当于一个东西的表示，表示的一些协议，比如图片、声音和视频MPEG。</li><li><strong>会话层：</strong><br>1.会话的建立和结束；<br>2.典型设备：网关；<br>3.典型协议、标准和应用：RPC、SQL、NFS、X WINDOWS、ASP</li><li><strong>传输层：</strong><br>1.主要功能：端到端控制Transport；<br>2.典型设备：网关；<br>3.典型协议、标准和应用：TCP、UDP、SPX</li><li><strong>网络层：</strong><br>1.主要功能：路由、寻址Network；<br>2.典型设备：路由器；<br>3.典型协议、标准和应用：IP、IPX、APPLETALK、ICMP；</li><li><strong>数据链路层：</strong><br>1.主要功能：保证无差错的疏忽链路的data link；<br>2.典型设备：交换机、网桥、网卡；<br>3.典型协议、标准和应用：802.2、802.3ATM、HDLC、FRAME RELAY；</li><li><strong>物理层：</strong><br>1.主要功能：传输比特流Physical；<br>2.典型设备：集线器、中继器<br>3.典型协议、标准和应用：V.35、EIA/TIA-232.</li></ul><h4 id="2、Http-和-Https-的区别？Https为什么更加安全？">2、Http 和 Https 的区别？Https为什么更加安全？</h4><ul><li><strong>区别</strong><br>1.HTTPS 需要向机构申请 CA 证书，极少免费。<br>2.HTTP 属于明文传输，HTTPS基于 SSL 进行加密传输。<br>3.HTTP 端口号为 80，HTTPS 端口号为 443 。<br>4.HTTPS 是加密传输，有身份验证的环节，更加安全。</li><li><strong>安全</strong><br>SSL(安全套接层) TLS(传输层安全)<br>以上两者在传输层之上，对网络连接进行加密处理，保障数据的完整性，更加的安全。</li></ul><h4 id="3、HTTPS的连接建立流程？">3、HTTPS的连接建立流程？</h4><ul><li>服务器端的公钥和私钥，用来进行非对称加密</li><li>客户端生成的随机密钥，用来进行对称加密</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2752635-bbc482d077daa839.jpg" alt=""></p><p>http建立连接过程.jpg</p><p>如上图，HTTPS连接过程大致可分为八步:</p><ol><li><p>客户端访问HTTPS连接。<br>客户端会把安全协议版本号、客户端支持的加密算法列表、随机数C发给服务端。</p></li><li><p>服务端发送证书给客户端</p></li></ol><ul><li><p>服务端接收密钥算法配件后，会和自己支持的加密算法列表进行比对，如果不符合，则断开连接。否则，服务端会在该算法列表中，选择一种对称算法（如AES）、一种公钥算法（如具有特定秘钥长度的RSA）和一种MAC算法发给客户端。</p></li><li><p>服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。</p></li><li><p>在发送加密算法的同时还会把数字证书和随机数S发送给客户端</p></li></ul><ol start="3"><li><p>客户端验证server证书<br>会对server公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续。</p></li><li><p>客户端组装会话秘钥<br>如果公钥合格，那么客户端会用服务器公钥来生成一个前主秘钥(Pre-Master Secret，PMS)，并通过该前主秘钥和随机数C、S来组装成会话秘钥</p></li><li><p>客户端将前主秘钥加密发送给服务端<br>是通过服务端的公钥来对前主秘钥进行非对称加密，发送给服务端</p></li><li><p>服务端通过私钥解密得到前主秘钥<br>服务端接收到加密信息后，用私钥解密得到主秘钥。</p></li><li><p>服务端组装会话秘钥<br>服务端通过前主秘钥和随机数C、S来组装会话秘钥。<br>至此，服务端和客户端都已经知道了用于此次会话的主秘钥。</p></li><li><p>数据传输<br>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。<br>同理，服务端收到客户端发送来的密文，用服务端密钥对其进行对称解密，得到客户端发送的数据。</p></li></ol><h4 id="4、解释一下三次握手和四次挥手？">4、解释一下三次握手和四次挥手？</h4><ul><li><p><strong>三次握手</strong><br>1.由客户端向服务端发送 SYN 同步报文。<br>2.当服务端收到 SYN 同步报文之后，会返回给客户端 SYN 同步报文和 ACK 确认报文。<br>3.客户端会向服务端发送 ACK 确认报文，此时客户端和服务端的连接正式建立。</p></li><li><p><strong>建立连接</strong><br>1.这个时候客户端就可以通过 Http 请求报文，向服务端发送请求<br>2.服务端接收到客户端的请求之后，向客户端回复 Http 响应报文。</p></li><li><p><strong>四次挥手</strong><br>1.先由客户端向服务端发送 FIN 结束报文。<br>2.服务端会返回给客户端 ACK 确认报文 。此时，由客户端发起的断开连接已经完成。<br>3.服务端会发送给客户端 FIN 结束报文 和 ACK 确认报文。<br>4.客户端会返回 ACK 确认报文到服务端，至此，由服务端方向的断开连接已经完成。</p></li></ul><h4 id="5、TCP-和-UDP的区别？">5、TCP 和 UDP的区别？</h4><ul><li>**TCP：**面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源)。</li><li>**UDP：**面向非连接、传输不可靠、用于传输少量数据(数据包模式)、速度快。</li></ul><h4 id="多线程">多线程</h4><h4 id="1、进程与线程">1、进程与线程</h4><ul><li><p><strong>进程：</strong><br>1.进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元.<br>2.进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程,我们可以理解为手机上的一个app.<br>3.每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源</p></li><li><p><strong>线程：</strong><br>1.程序执行流的最小单元，线程是进程中的一个实体.<br>2.一个进程要想执行任务,必须至少有一条线程.应用程序启动的时候，系统会默认开启一条线程,也就是主线程</p></li><li><p><strong>进程和线程的关系</strong><br>1.线程是进程的执行单元，进程的所有任务都在线程中执行<br>2.线程是 CPU 分配资源和调度的最小单位<br>3.一个程序可以对应多个进程(多进程),一个进程中可有多个线程,但至少要有一条线程<br>4.同一个进程内的线程共享进程资源</p></li></ul><h4 id="2、什么是多线程？">2、什么是多线程？</h4><ul><li>多线程的实现原理：事实上，同一时间内单核的CPU只能执行一个线程，多线程是CPU快速的在多个线程之间进行切换（调度），造成了多个线程同时执行的假象。</li><li>如果是多核CPU就真的可以同时处理多个线程了。</li><li>多线程的目的是为了同步完成多项任务，通过提高系统的资源利用率来提高系统的效率。</li></ul><h4 id="3、多线程的优点和缺点？">3、多线程的优点和缺点？</h4><ul><li><p><strong>优点:</strong><br>能适当提高程序的执行效率<br>能适当提高资源利用率（CPU、内存利用率）</p></li><li><p><strong>缺点:</strong></p></li></ul><ol><li>开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能</li><li>线程越多，CPU在调度线程上的开销就越大</li><li>程序设计更加复杂：比如线程之间的通信、多线程的数据共享</li></ol><h4 id="4、多线程的并行和并发有什么区别？">4、多线程的<strong>并行</strong>和<strong>并发</strong>有什么区别？</h4><ul><li>**并行：**充分利用计算机的多核，在多个线程上同步进行</li><li>**并发：**在一条线程上通过快速切换，让人感觉在同步进行</li></ul><h4 id="5、iOS中实现多线程的几种方案，各自有什么特点？">5、iOS中实现多线程的几种方案，各自有什么特点？</h4><ul><li>NSThread 面向对象的，需要程序员手动创建线程，但不需要手动销毁。子线程间通信很难。</li><li>GCD C语言，充分利用了设备的多核，自动管理线程生命周期。比NSOperation效率更高。</li><li>NSOperation 基于GCD封装，更加面向对象，比GCD多了一些功能。</li></ul><h4 id="6、多个网络请求完成后执行下一步？">6、多个网络请求完成后执行下一步？</h4><p><strong>使用GCD的dispatch_group_t</strong></p><p>创建一个dispatch_group_t</p><p>每次网络请求前先<code>dispatch_group_enter</code>,请求回调后再<code>dispatch_group_leave</code>，enter和leave必须配合使用，有几次enter就要有几次leave，否则group会一直存在。</p><p>当所有enter的block都leave后，会执行<code>dispatch_group_notify</code>的block。</p><p>栅栏函数中传入的参数队列必须是由 <code>dispatch_queue_create</code> 方法创建的队列，否则，与 <code>dispatch_async</code> 无异，起不到“栅栏”的作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">NSString *str = @&quot;http://xxxx.com/&quot;;</span><br><span class="line">NSURL *url = [NSURL URLWithString:str];</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:url];</span><br><span class="line">NSURLSession *session = [NSURLSession sharedSession];</span><br><span class="line"></span><br><span class="line">dispatch_group_t downloadGroup = dispatch_group_create();</span><br><span class="line">for (int i=0; i&lt;10; i++) &#123;</span><br><span class="line">    dispatch_group_enter(downloadGroup);</span><br><span class="line"></span><br><span class="line">    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line">        NSLog(@&quot;%d---%d&quot;,i,i);</span><br><span class="line">        dispatch_group_leave(downloadGroup);</span><br><span class="line">    &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(downloadGroup, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;end&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>使用GCD的信号量dispatch_semaphore_t</strong></p><p>dispatch_semaphore信号量为基于计数器的一种多线程同步机制。如果semaphore计数大于等于1，计数-1，返回，程序继续运行。如果计数为0，则等待。<code>dispatch_semaphore_signal(semaphore)</code>为计数+1操作,<code>dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER)</code>为设置等待时间，这里设置的等待时间是一直等待。</p><p>创建semaphore为0，等待，等10个网络请求都完成了，dispatch_semaphore_signal(semaphore)为计数+1，然后计数-1返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">NSString *str = @&quot;http://xxxx.com/&quot;;</span><br><span class="line">NSURL *url = [NSURL URLWithString:str];</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:url];</span><br><span class="line">NSURLSession *session = [NSURLSession sharedSession];</span><br><span class="line"></span><br><span class="line">dispatch_semaphore_t sem = dispatch_semaphore_create(0);</span><br><span class="line">for (int i=0; i&lt;10; i++) &#123;</span><br><span class="line"></span><br><span class="line">    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line">        NSLog(@&quot;%d---%d&quot;,i,i);</span><br><span class="line">        count++;</span><br><span class="line">        if (count==10) &#123;</span><br><span class="line">            dispatch_semaphore_signal(sem);</span><br><span class="line">            count = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br><span class="line">dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;end&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="7、多个网络请求顺序执行后执行下一步？">7、多个网络请求顺序执行后执行下一步？</h4><p><strong>使用信号量semaphore</strong></p><p>每一次遍历，都让其<code>dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER)</code>，这个时候线程会等待，阻塞当前线程，直到<code>dispatch_semaphore_signal(sem)</code>调用之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NSString *str = @&quot;http://www.jianshu.com/p/6930f335adba&quot;;</span><br><span class="line">NSURL *url = [NSURL URLWithString:str];</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:url];</span><br><span class="line">NSURLSession *session = [NSURLSession sharedSession];</span><br><span class="line"></span><br><span class="line">dispatch_semaphore_t sem = dispatch_semaphore_create(0);</span><br><span class="line">for (int i=0; i&lt;10; i++) &#123;</span><br><span class="line"></span><br><span class="line">    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;%d---%d&quot;,i,i);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    [task resume];</span><br><span class="line">    dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;end&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="8、异步操作两组数据时-执行完第一组之后-才能执行第二组？">8、异步操作两组数据时, 执行完第一组之后, 才能执行第二组？</h4><p>这里使用dispatch_barrier_async栅栏方法即可实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;第一次任务的主线程为: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;第二次任务的主线程为: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;第一次任务, 第二次任务执行完毕, 继续执行&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;第三次任务的主线程为: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;第四次任务的主线程为: %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="9、多线程中的死锁？">9、多线程中的死锁？</h4><p>死锁是由于多个线程（进程）在执行过程中，因为争夺资源而造成的互相等待现象，你可以理解为卡主了。产生死锁的必要条件有四个：</p><ul><li>**互斥条件：**指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</li><li>**请求和保持条件：**指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</li><li>**不可剥夺条件：**指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</li><li>**环路等待条件：**指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</li></ul><p>最常见的就是 <strong>同步函数 + 主队列</strong> 的组合，本质是队列阻塞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;1&quot;);</span><br><span class="line">// 什么也不会打印，直接报错</span><br></pre></td></tr></table></figure><h4 id="10、GCD执行原理？">10、GCD执行原理？</h4><ul><li>GCD有一个底层线程池，这个池中存放的是一个个的线程。之所以称为“池”，很容易理解出这个“池”中的线程是可以重用的，当一段时间后这个线程没有被调用的话，这个线程就会被销毁。注意：开多少条线程是由底层线程池决定的（线程建议控制再3~5条），池是系统自动来维护，不需要我们程序员来维护，我们只关心的是向队列中添加任务，队列调度即可。</li><li>如果队列中存放的是同步任务，则任务出队后，底层线程池中会提供一条线程供这个任务执行，任务执行完毕后这条线程再回到线程池。这样队列中的任务反复调度，因为是同步的，所以当我们用currentThread打印的时候，就是同一条线程。</li><li>如果队列中存放的是异步的任务，（注意异步可以开线程），当任务出队后，底层线程池会提供一个线程供任务执行，因为是异步执行，队列中的任务不需等待当前任务执行完毕就可以调度下一个任务，这时底层线程池中会再次提供一个线程供第二个任务执行，执行完毕后再回到底层线程池中。</li><li>这样就对线程完成一个复用，而不需要每一个任务执行都开启新的线程，也就从而节约的系统的开销，提高了效率。在iOS7.0的时候，使用GCD系统通常只能开5-8条线程，iOS8.0以后，系统可以开启很多条线程，但是实在开发应用中，建议开启线程条数：3-5条最为合理。</li></ul><h3 id="项目架构">项目架构</h3><h4 id="1、MVC、MVVM模式">1、MVC、MVVM模式</h4><h5 id="MVC（Model、View、Controller）">MVC（Model、View、Controller）</h5><p>MVC是比较直观的架构模式，最核心的就是通过Controller层来进行调控<br>Model和View永远不能相互通信，只能通过Controller传递<br>Controller可以直接与Model对话（读写调用Model），Model通过Notification和KVO机制与Controller间接通信<br>Controller可以直接与View对话，通过IBoutlet直接操作View，IBoutlet直接对应View的控件（例如创建一个Button：需声明一个 IBOutlet UIButton * btn），View通过action向Controller报告时间的发生(用户点击了按钮)。Controller是View的直接数据源</p><ul><li><strong>优点:</strong> 对于混乱的项目组织方式，有了一个明确的组织方式。通过Controller来掌控全局，同时将View展示和Model的变化分开</li><li><strong>缺点:</strong> 愈发笨重的Controller，随着业务逻辑的增加，大量的代码放进Controller，导致Controller越来越臃肿，堆积成千上万行代码，后期维护起来费时费力</li></ul><h5 id="MVVM（Model、Controller-View、ViewModel）">MVVM（Model、Controller/View、ViewModel）</h5><p>在MVVM中，View和ViewController联系在一起，我们把它们视为一个组件，View和ViewController都不能直接引用model，而是引用是视图模型即ViewModel。 ViewModel是一个用来放置用户输入验证逻辑、视图显示逻辑、网络请求等业务逻辑的地方，这样的设计模式，会轻微增加代码量，但是会减少代码的复杂性</p><ul><li><strong>优点:</strong> View可以独立于Model的变化和修改，一个ViewModel可以绑定到不同的View上，降低耦合，增加重用</li><li><strong>缺点:</strong> 过于简单的项目不适用、大型的项目视图状态较多时构建和维护成本太大<br>合理的运用架构模式有利于项目、团队开发工作，不同的设计模式，只是让不同的场景有了更多的选择方案。根据项目场景和开发需求，选择最合适的解决方案。</li></ul><h3 id="调试技巧">调试技巧</h3><h4 id="1、LLDB常用的调试命令？">1、LLDB常用的调试命令？</h4><p>**po：**print object的缩写，表示显示对象的文本描述，如果对象不存在则打印nil。<br>**p：**可以用来打印基本数据类型。<br>**call：**执行一段代码 如：call NSLog(@“%@”, @“yang”)<br>**expr：**动态执行指定表达式<br>**bt：**打印当前线程堆栈信息 （bt all 打印所有线程堆栈信息）<br>**image：**常用来寻找栈地址对应代码位置 如：image lookup --address 0xxxx</p><h4 id="2、断点调试？">2、断点调试？</h4><p><strong>条件断点</strong><br>打上断点之后，对断点进行编辑，设置相应过滤条件。下面简单的介绍一下条件设置：</p><ol><li>Condition：返回一个布尔值，当布尔值为真触发断点，一般里面我们可以写一个表达式。</li><li>Ignore：忽略前N次断点，到N+1次再触发断点。</li><li>Action：断点触发事件，分为六种：</li></ol><ul><li>AppleScript：执行脚本。</li><li>Capture GPU Frame：用于OpenGL ES调试，捕获断点处GPU当前绘制帧。</li><li>Debugger Command：和控制台中输入LLDB调试命令一致。</li><li>Log Message：输出自定义格式信息至控制台。</li><li>Shell Command：接收命令文件及相应参数列表，Shell Command是异步执行的，只有勾选“Wait until done”才会等待Shell命令执行完在执行调试。</li><li>Sound：断点触发时播放声音。</li><li>Options(Automatically continue after evaluating actions选项)：选中后，表示断点不会终止程序的运行。</li></ul><p><strong>异常断点</strong><br>异常断点可以快速定位不满足特定条件的异常，比如常见的数组越界，这时候很难通过异常信息定位到错误所在位置。这个时候异常断点就可以发挥作用了。<br>Exception：可以选择抛出异常对象类型：OC或C++。<br>Break：选择断点接收的抛出异常来源是Throw还是Catch语句。</p><p><strong>符号断点</strong><br>符号断点的创建方式和异常断点一样一样的，在符号断点中可以指定要中断执行的方法：<br>Symbol:[类名 方法名]可以执行到指定类的指定方法中开始断点。</p><h4 id="3、iOS-常见的崩溃类型有哪些？">3、iOS 常见的崩溃类型有哪些？</h4><ul><li>unrecognized selector crash</li><li>KVO crash</li><li>NSNotification crash</li><li>NSTimer crash</li><li>Container crash</li><li>NSString crash</li><li>Bad Access crash （野指针）</li><li>UI not on Main Thread Crash</li></ul><h3 id="性能优化">性能优化</h3><h4 id="1、造成tableView卡顿的原因有哪些？">1、造成tableView卡顿的原因有哪些？</h4><ol><li>最常用的就是cell的重用， 注册重用标识符</li></ol><ul><li>如果不重用cell时，每当一个cell显示到屏幕上时，就会重新创建一个新的cell</li><li>如果重用cell，为cell创建一个ID，每当需要显示cell 的时候，都会先去缓冲池中寻找可循环利用的cell，如果没有再重新创建cell</li></ul><ol start="2"><li>避免cell的重新布局</li></ol><ul><li>cell的布局填充等操作比较耗时，一般创建时就布局好</li></ul><ol start="3"><li>提前计算并缓存cell的属性及内容</li></ol><ul><li>当我们创建cell的数据源方法时，编译器并不是先创建cell 再定cell的高度</li><li>而是先根据内容一次确定每一个cell的高度，高度确定后，再创建要显示的cell，滚动时，每当cell进入凭虚都会计算高度，提前估算高度告诉编译器，编译器知道高度后，紧接着就会创建cell，这时再调用高度的具体计算方法，这样可以方式浪费时间去计算显示以外的cell</li></ul><ol start="4"><li>减少cell中控件的数量</li></ol><ul><li>尽量使cell得布局大致相同，不同风格的cell可以使用不用的重用标识符，初始化时添加控件，</li><li>不适用的可以先隐藏</li></ul><ol start="5"><li>不要使用ClearColor，无背景色，透明度也不要设置为0</li></ol><ul><li>渲染耗时比较长</li></ul><ol start="6"><li>使用局部更新</li></ol><ul><li>如果只是更新某组的话，使用reloadSection进行局部更</li></ul><ol start="7"><li>加载网络数据，下载图片，使用异步加载，并缓存</li><li>少使用addView 给cell动态添加view</li><li>按需加载cell，cell滚动很快时，只加载范围内的cell</li><li>不要实现无用的代理方法，tableView只遵守两个协议</li><li>缓存行高：estimatedHeightForRow不能和HeightForRow里面的layoutIfNeed同时存在，这两者同时存在才会出现“窜动”的bug。所以我的建议是：只要是固定行高就写预估行高来减少行高调用次数提升性能。如果是动态行高就不要写预估方法了，用一个行高的缓存字典来减少代码的调用次数即可</li><li>不要做多余的绘制工作。在实现drawRect:的时候，它的rect参数就是需要绘制的区域，这个区域之外的不需要进行绘制。例如上例中，就可以用CGRectIntersectsRect、CGRectIntersection或CGRectContainsRect判断是否需要绘制image和text，然后再调用绘制方法。</li><li>预渲染图像。当新的图像出现时，仍然会有短暂的停顿现象。解决的办法就是在bitmap context里先将其画一遍，导出成UIImage对象，然后再绘制到屏幕；</li><li>使用正确的数据结构来存储数据。</li></ol><h4 id="2、如何提升-tableview-的流畅度？">2、如何提升 tableview 的流畅度？</h4><p>本质上是降低 CPU、GPU 的工作，从这两个大的方面去提升性能。<br>**CPU：**对象的创建和销毁、对象属性的调整、布局计算、文本的计算和排版、图片的格式转换和解码、图像的绘制<br>**GPU：**纹理的渲染</p><ol><li>卡顿优化在 CPU 层面</li></ol><ul><li>尽量用轻量级的对象，比如用不到事件处理的地方，可以考虑使用 CALayer 取代 UIView</li><li>不要频繁地调用 UIView 的相关属性，比如 frame、bounds、transform 等属性，尽量减少不必要的修改</li><li>尽量提前计算好布局，在有需要时一次性调整对应的属性，不要多次修改属性</li><li>Autolayout 会比直接设置 frame 消耗更多的 CPU 资源</li><li>图片的 size 最好刚好跟 UIImageView 的 size 保持一致</li><li>控制一下线程的最大并发数量</li><li>尽量把耗时的操作放到子线程</li><li>文本处理（尺寸计算、绘制）</li><li>图片处理（解码、绘制）</li></ul><ol start="2"><li>卡顿优化在 GPU层面</li></ol><ul><li>尽量避免短时间内大量图片的显示，尽可能将多张图片合成一张进行显示</li><li>GPU能处理的最大纹理尺寸是 4096x4096，一旦超过这个尺寸，就会占用 CPU 资源进行处理，所以纹理尽量不要超过这个尺寸</li><li>尽量减少视图数量和层次</li><li>减少透明的视图（alpha&lt;1），不透明的就设置 opaque 为 YES</li><li>尽量避免出现离屏渲染</li></ul><h4 id="3、iOS-保持界面流畅的技巧？">3、iOS 保持界面流畅的技巧？</h4><ol><li>预排版，提前计算</li></ol><ul><li>在接收到服务端返回的数据后，尽量将 CoreText 排版的结果、单个控件的高度、cell 整体的高度提前计算好，将其存储在模型的属性中。需要使用时，直接从模型中往外取，避免了计算的过程。</li><li>尽量少用 UILabel，可以使用 CALayer 。避免使用 AutoLayout 的自动布局技术，采取纯代码的方式</li></ul><ol start="2"><li>预渲染，提前绘制</li></ol><ul><li>例如圆形的图标可以提前在，在接收到网络返回数据时，在后台线程进行处理，直接存储在模型数据里，回到主线程后直接调用就可以了</li><li>避免使用 CALayer 的 Border、corner、shadow、mask 等技术，这些都会触发离屏渲染。</li></ul><ol start="3"><li>异步绘制</li><li>全局并发线程</li><li>高效的图片异步加载</li></ol><h4 id="4、APP启动时间应从哪些方面优化？">4、APP启动时间应从哪些方面优化？</h4><p>App启动时间可以通过xcode提供的工具来度量，在Xcode的Product-&gt;Scheme–&gt;Edit Scheme-&gt;Run-&gt;Auguments中，将环境变量DYLD_PRINT_STATISTICS设为YES，优化需以下方面入手</p><ol><li>dylib loading time</li></ol><ul><li>核心思想是减少dylibs的引用</li><li>合并现有的dylibs（最好是6个以内）</li><li>使用静态库</li></ul><ol start="2"><li>rebase/binding time</li></ol><ul><li>核心思想是减少DATA块内的指针</li><li>减少Object C元数据量，减少Objc类数量，减少实例变量和函数（与面向对象设计思想冲突）</li><li>减少c++虚函数</li><li>多使用Swift结构体（推荐使用swift）</li></ul><ol start="3"><li>ObjC setup time</li></ol><ul><li>核心思想同上，这部分内容基本上在上一阶段优化过后就不会太过耗时</li><li>initializer time</li></ul><ol start="4"><li>使用initialize替代load方法</li></ol><ul><li>减少使用c/c++的attribute((constructor))；推荐使用<code>dispatch_once() pthread_once() std:once()</code>等方法</li><li>推荐使用swift</li><li>不要在初始化中调用<code>dlopen()</code>方法，因为加载过程是单线程，无锁，如果调用dlopen则会变成多线程，会开启锁的消耗，同时有可能死锁</li><li>不要在初始化中创建线程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>佛山游记（五一）</title>
      <link href="/post/78b31bc4.html"/>
      <url>/post/78b31bc4.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bf4c07551df3883c82bd0c7dd484186b718a4538c24ee695d1d61c43595895d9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 游记加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马来游记</title>
      <link href="/post/1bff4ac0.html"/>
      <url>/post/1bff4ac0.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2976c149a70e63849721efc12409e8a65f8416ec081768efc49ace01bc8c72fe"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 游记加密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
