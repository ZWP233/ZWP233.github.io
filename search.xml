<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建日志</title>
    <url>/3276806130.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>🔝重要内容置顶</p>
<p>注意每次备份前，都需要commit一下~（回忆前面讲的内容，如果不commit就只是在本地有缓存，没有上传到缓存区）</p>
<pre class="line-numbers language-none"><code class="language-none">➜  dlog git:(master) ✗ git add themes&#x2F;butterfly41
➜  dlog git:(master) ✗ git add .
➜  dlog git:(master) ✗ git commit -m &#39;211023版本提交&#39;
➜  dlog git:(master) ✗ git push backup_github master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>后面的<code>hexo</code>是远程仓库名，<code>master</code>是<code>hexo</code>这个远程仓库的默认分支名，这些名字都可以自己个性化命名，它们都不是代码中的<strong>关键字</strong>！</p>
<p>将备份下载到本地的代码：(要预先给电脑配置好SSH哦~)</p>
<pre class="line-numbers language-none"><code class="language-none">➜  dlog git:(master) ✗git clone https:&#x2F;&#x2F;gitee.com&#x2F;dhndzwxj&#x2F;hexo-backup.git hexo-backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如何将仓库拷贝到本地？(以Windows版本为例)</p>
<pre class="line-numbers language-none"><code class="language-none">cd Desktop
git clone git@github.com:dhndzwxj&#x2F;hexo-backup.git juncker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当然，进行这一切的前提是提前在使用的电脑上设置好SSH key，方法详见本文章3.1节。</p>
<p>下载主题：</p>
<pre class="line-numbers language-none"><code class="language-none">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><a href="https://www.jianshu.com/p/af83fc73e525">【完美解决】Hexo博客出现“Cannot GET/xxx”错误</a></p>
<pre class="line-numbers language-none"><code class="language-none">npm audit fix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> <a href="https://www.dhndzwxj.top/3276806131.html#1-%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83"></a>1. 搭建环境</h2>
<p>首先搭建<code>nodejs</code>和<code>git</code>环境。这两个环境相当于博客搭建的基础设施，没有这两个东西的支持，就没法对自己的博客实现结构化管理。虽然这一步看起来非常枯燥无聊，却是实现后续所有功能的关键步骤！经过实验，下载这两个环境的时候，一定要关闭电脑的安全中心当中的“病毒和威胁防护”，否则直接被电脑当病毒杀灭了。</p>
<h3 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> <a href="https://www.dhndzwxj.top/3276806131.html#11-windows"></a>1.1 Windows</h3>
<p>第一步，点击<a href="https://nodejs.org/en/download/current/">nodejs</a>进行下载nodejs。</p>
<p>按照提示一步一步进行安装操作即可(时间比较长，请保持耐心~)。下一步是Windows平台配置环境。</p>
<p>高级系统设置——环境变量（配置环境变量的目的是，以后<code>git</code>和<code>npm</code>这两个命令可以在任何目录下使用，变成了全局的指令。不配置的话会出错！）</p>
<p>新增系统变量：<br />
变量名填：NODE_PATH<br />
变量值填：（文件路径）</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688057.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688057.png" alt="" /></a></p>
<p>还需要在Path变量名中修改nodejs文件默认路径</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688076.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688076.png" alt="" /></a></p>
<p>第二步，git环境搭建</p>
<p>到Git官网下载，<a href="https://www.dhndzwxj.top/local_file/Git-2.33.1-64-bit.exe">下载地址</a>，一步一步进行安装。如下图(仅展示需要提示的部分，基本上选择默认选项即可)：</p>
<h3 id="-3"><a class="markdownIt-Anchor" href="#-3"></a> <a href="https://www.dhndzwxj.top/3276806131.html#12-mac"></a>1.2 Mac</h3>
<p>苹果电脑上的安装相对比较简单。</p>
<p>下载nodejs：<a href="https://nodejs.org/en/">node-v16.11.1.pkg</a></p>
<p>下载git：<a href="https://sourceforge.net/projects/git-osx-installer/files/git-2.33.0-intel-universal-mavericks.dmg/download?use_mirror=autoselect">git-2.33.0-intel.dmg</a></p>
<p>检查安装的版本信息：</p>
<pre class="line-numbers language-none"><code class="language-none"># 首先检查是否安装了git和node.js，终端输入一下命令，
node -v #是否出现安装版本信息，出现说明已经安装了
git --version #同上述情况
# 如果没有安装，则进行安装,都可以通过直接下载安装测序进行安装，这里不演示了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果已经安装好了上述的软件，那么可以安装hexo，然后等待安装成功即可。</p>
<h3 id="-4"><a class="markdownIt-Anchor" href="#-4"></a> <a href="https://www.dhndzwxj.top/3276806131.html#13-nas"></a>1.3 Nas</h3>
<p>略，可参考<a href="https://blog.csdn.net/bryanwang_3099/article/details/114642267">基于黑群晖 NAS 搭建 Hexo 博客系统</a>。</p>
<h2 id="-5"><a class="markdownIt-Anchor" href="#-5"></a> <a href="https://www.dhndzwxj.top/3276806131.html#2-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9"></a>2. 搭建博客站点</h2>
<p>因为<code>npm</code>的服务器在海外，所以有时候用这个指令安装东西的话速度比较慢。好在国内有淘宝镜像<code>cnpm</code>，功能和原装的<code>npm</code>一模一样，只需在命令行中输入：</p>
<pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org
npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org #（Windows）
sudo npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org #（MacBook）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>以后直接用cnpm替换npm即可！如有可选更新，cnpm也可以进行升级：</p>
<pre class="line-numbers language-none"><code class="language-none">npm -g i cnpm #更新cnpm
npm install -g npm@[版本号] #更新npm
sudo npm install -g npm@[版本号] #更新npm（MacBook）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="-6"><a class="markdownIt-Anchor" href="#-6"></a> <a href="https://www.dhndzwxj.top/3276806131.html#21-windows"></a>2.1 Windows</h3>
<p>第一步是安装Hexo环境：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第二步是新建一个存放博客的专属文件夹，然后在这个文件夹下进行操作：</p>
<pre class="line-numbers language-none"><code class="language-none"># 在你的家目录下创建一个blog文件夹
mkdir dlog
# 进入目录
cd dlog
# 初始化目录
hexo init
#开启本地服务 
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>出现以下信息，说明你可以本地访问博客系统，在浏览器输入<code>http://localhost:4000</code>这个网址，就可以看到博客首页。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688130.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688130.png" alt="" /></a></p>
<h3 id="-7"><a class="markdownIt-Anchor" href="#-7"></a> <a href="https://www.dhndzwxj.top/3276806131.html#22-mac"></a>2.2 Mac</h3>
<p>Mac上的步骤不能说一模一样的，反正也是八九不离十了。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo npm install -g hexo-cli
# 在你的家目录下创建一个blog文件夹
mkdir blog
# 进入目录
cd blog
# 初始化目录
hexo init
#开启本地服务 
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-8"><a class="markdownIt-Anchor" href="#-8"></a> <a href="https://www.dhndzwxj.top/3276806131.html#23-%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2"></a>2.3 部署hexo博客</h3>
<p>以下步骤对Windows和Mac而言，没有任何区别。</p>
<p>首先需要安装<code>hexo-deployer-git</code>插件，这样我们才能把生成的<code>public</code>文件夹部署到Github或者其他代码托管平台。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下面你需要打开根目录，然后在这个目录下找到站点配置文件<code>_config.yml</code>（如下图左）。并且打开这个文件，进行编辑。</p>
<p>在站点配置文件内（如上图右）找到<code>deploy</code>这一行代码，按照以下的格式修改即可。（下面是本人的个性化设置，各个参数是什么意思，容我细细道来）</p>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: git
  repo: git@github.com:dhndzwxj&#x2F;dhndzwxj.github.io.git 
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>deploy: 部署的意思，一个关键词</li>
<li>type：部署的类型，这里选择的是git，就是上面我们已经安装的那个！</li>
<li>repo：仓库的意思，我们所有的本地文件都要上传到这里！我们要在github上面申请自己的账号，建造自己的仓库~（具体怎么做见后文！）</li>
<li>branch：仓库的分支的意思，一个仓库里面可以有多个分支，就像是一个大院里面有很多间厢房一样。具体的含义后面解释。</li>
</ul>
<h3 id="-9"><a class="markdownIt-Anchor" href="#-9"></a> <a href="https://www.dhndzwxj.top/3276806131.html#24-nas"></a>2.4 Nas</h3>
<p>略，可参考<a href="https://blog.csdn.net/bryanwang_3099/article/details/114642267">基于黑群晖 NAS 搭建 Hexo 博客系统</a>。</p>
<h2 id="-10"><a class="markdownIt-Anchor" href="#-10"></a> <a href="https://www.dhndzwxj.top/3276806131.html#3-%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2"></a>3. 博客代码部署</h2>
<h3 id="-11"><a class="markdownIt-Anchor" href="#-11"></a> <a href="https://www.dhndzwxj.top/3276806131.html#31-github"></a>3.1 Github</h3>
<p>对我们而言，Github可能只是一个存数据的仓库而已。但对于大多数编程爱好者而言，这是一个巨大的资源宝库，是全球编程爱好者交流思想的平台。它的官方网址是：<a href="https://github.com/">Github</a>。</p>
<p>第一步要在Github上申请一个账号。点击网站右上角的<code>Sign up</code>，然后在下一个页面用自己的邮箱进行注册，输入一个比较复杂的密码，输入自己的个性化用户名，然后选择是否接受更新（输入y表示同意，n表示不同意），然后进行人机验证，最后在邮箱接收验证码。</p>
<p>后面就是一些个性化的设置，不关键，此处略去。如果想跳过这些烦人的步骤，直接把网页拉倒最底下，点一下skip personalization即可。</p>
<p>接下来进入github个人首页，如下图所示。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688189.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688189.jpg" alt="" /></a></p>
<p>下面我们就要建立“仓库”用以储存我们的博客网站了！点击如上图中左边的“create repository”（如果你已经有仓库了，那么酒店左上角的“New”，或者点右上角“+”，里面有个“New repository”），进入下面的页面。这个页面里面一些设置要特别注意了！仓库的名字（repository name）一定要和自己的名字(owner)一模一样！而且一定要写成<code>yourname.github.io</code>的格式。不然后面没办法生成相应的github页面。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688203.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688203.png" alt="" /></a></p>
<p>这样仓库就建好了。每一个仓库都有自己的地址，如下图：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688226.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688226.png" alt="" /></a></p>
<p>一般而言，最重要的地址是SSH地址，将其复制下来，粘贴到博客站点配置文件<code>blog/_config.yml</code>就可以了。这里解释了上面<code>deploy</code>中<code>repo</code>的参数的含义！</p>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: git
  repo: git@github.com:dhndzwxj&#x2F;dhndzwxj.github.io.git 
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>下一步要做的呢，就是在本地的文件和github仓库之间建立联系，其实两行代码也就解决了：</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;dhndzwxj&quot;
git config --global user.email dhndzwxj@ruc.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意啊，上面的user.name和user.email一定替换成自己的githubID和注册的邮箱~</p>
<p>接下来还有个问题！我们目的是把本地的文件上传到云端的github，但是每次访问github，它都会要求我们输入密码，否则就没有权限（也是出于安全的目的）。怎么省掉这个麻烦呢？方法就是创建SSH（别问我这是啥，照着下面的说法做就是了）！</p>
<p>（1）检查是否有SSH key</p>
<p>登陆<code>github</code>，点击头像位置处 <code>Settings ——&gt; SSH and GPG keys</code> ，查看是否有<code>SSH keys</code>。如果有，直接跳到第（3）步；如果没有，则继续。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688244.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688244.jpg" alt="" /></a></p>
<p>（2）新建 SSH key，在CMD中输入如下代码，注意大小写，后面的邮箱替换成自己注册github的邮箱：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;dhndzwxj@ruc.edu.cn&quot;
ssh-keygen -t ed25519 -C &quot;dhndzwxj@ruc.edu.cn&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后会出现：</p>
<pre class="line-numbers language-none"><code class="language-none">Generating public&#x2F;private rsa key pair.
Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;电脑名&#x2F;.ssh&#x2F;id_rsa):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>直接回车就可以。然后会出现：</p>
<pre class="line-numbers language-none"><code class="language-none">Enter passphrase (empty for no passphrase):
Enter same passphrase again:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容，但就我个人的使用体验而言，还是不设置的好，否则的话每次上传都需要输入密码，很麻烦。</p>
<p><strong>注意：输入密码的时候没有*字样的，直接输入就好</strong>。然后会出现：</p>
<pre class="line-numbers language-none"><code class="language-none">BASH
Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;电脑名&#x2F;.ssh&#x2F;id_rsa.
Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;电脑名&#x2F;.ssh&#x2F;id_rsa.pub.
The key fingerprint is:
65:69:······02:4b emailname@email.com
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|                 |
|       .   o .   |
|    . o o &#x3D; o    |
|   . o * &#x3D; o     |
|  E  o + o .     |
| . o.   . .      |
|     ..          |
+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，密钥已经成功生成。</p>
<p>（3）接下来在github上添加SSH key：</p>
<ul>
<li>打开本地文件：id_rsa.pub（文件路径可以在上一步SSH生成成功后看到路径，比如我的是<code>/Users/电脑名/.ssh/id_rsa.pub</code>），可以将这个文件在编辑器中打开，然后全选复制。
<ul>
<li>这一步需要注意，打开后直接复制可能会损坏原来的字段格式，推荐使用命令行进行复制。mac上可以使用这个代码：<code>cat ~/.ssh/id_rsa.pub</code>。windows电脑就使用这个代码：<code>clip &lt; C:/Users/Administrator/.ssh/id_rsa.pub</code>。</li>
<li>登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys ——&gt; New SSH key，点击新建SSH key。</li>
</ul>
</li>
<li>将 ① 中复制的内容粘贴在key文本框里，title可以不用填（或者自己起一个名字也可以）。</li>
</ul>
<p>（4）测试设置是否成功：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果出现以下内容：<code>Hi dhndzwxj! You've successfully authenticated, but GitHub does not provide shell access.</code>。或者<code>kex_exchange_identification: Connection closed by remote host</code>。可以尝试访问该网站：<a href="https://docs.github.com/cn/authentication/troubleshooting-ssh/error-permission-denied-publickey">https://docs.github.com/cn/authentication/troubleshooting-ssh/error-permission-denied-publickey</a></p>
<pre class="line-numbers language-none"><code class="language-none">npm un hexo-deployer-git
npm i hexojs&#x2F;hexo-deployer-git
ssh -T GITHUB-dhndzwxj@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>（5）然后就可以部署你的博客到github啦。这之后，输入网址<code>yourname.github.io</code>，就能访问自己的网站了。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果这一步报错，可能是因为没有安装<code>hexo-deployer-git</code>插件，安装即可：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>代码解读：第（6）步实现了三个步骤：</p>
<ul>
<li>
<p><code>hexo cl</code> 是 <code>hexo clean</code>的简写。意思是清除本地的缓存，实际上就是把博客文件夹下的<code>public</code>文件夹删除掉了。这个<code>public</code>是基于本地的文件生成的、用于上传到仓库或者其他网站服务器上的文件夹，可以理解为本地文件上网的中转站、交通工具，删掉了也不影响本地的内容。</p>
</li>
<li>
<p><code>hexo g</code> 是<code>hexo generate</code>的简写，意思是生成public文件夹。</p>
</li>
<li>
<p><code>hexo d</code>是<code>hexo deploy</code>的简写，意思是将生成的public文件夹部署到网上，我们这里是部署到github上面。为了顺利部署，我们前面也提到过，要在站点文件夹下<code>_config.yml</code>文件中修改一些内容，如下：</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: git
  repo: git@github.com:dhndzwxj&#x2F;dhndzwxj.github.io.git 
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的<code>repo</code>后面要换成自己仓库的SSH，SSH在如下的位置：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688226.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688226.png" alt="" /></a></p>
<h3 id="-12"><a class="markdownIt-Anchor" href="#-12"></a> <a href="https://www.dhndzwxj.top/3276806131.html#31a-%E9%83%A8%E7%BD%B2%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5"></a>3.1a 部署意外情况</h3>
<p>不过<code>hexo d</code>还可能遇到其他一些情况：<code>Please make sure you have the correct access rights and the repository exists</code> 。解决方法是：</p>
<p>到这里问题就很明确了，是DNS解析出问题了，导致github.com域名被解析成了localhost的ip地址，就自然连不上GitHub了。</p>
<p>Windows下执行<code>ipconfig /flushdns</code> 清楚DNS缓存后也没用，最后修改<code>/etc/hosts</code>文件，增加一条github.com的域名映射搞定。</p>
<pre class="line-numbers language-none"><code class="language-none">140.82.113.4 github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置http proxy</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:7890

git config --local http.postBuffer 524288000 
#如果是缓存不够，设置500M缓存

git config --global sendpack.sideband false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要取消代理：</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global --unset http.proxy
git config --global --unset httpx.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>client_loop: send disconnect: Broken pipeiB</p>
<p>I solved the same problem by editing the file <code>~/.ssh/config</code> to have:</p>
<pre class="line-numbers language-none"><code class="language-none">Host *
    User dhndzwxj@ruc.edu.cn
    Hostname ssh.github.com
    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa
    ServerAliveInterval 20
    TCPKeepAlive no
    Port 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果还有ip地址问题，就删掉<code>/.ssh/known_hosts</code>。</p>
<p>github 的ip地址为。</p>
<pre class="line-numbers language-none"><code class="language-none">ping github.com
PING github.com (140.82.113.4): 56 data bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>！！！！！！！！！！！！！！！！！！！！</p>
<p>删除.ssh文件夹下的<code>known_hosts</code></p>
<p>git 设置和取消代理</p>
<pre class="line-numbers language-none"><code class="language-none"># 设置ss
git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;

git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;

# 设置代理
git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080

git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080

# 取消代理
git config --global --unset http.proxy

git config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可能遇见这种问题：</p>
<pre class="line-numbers language-none"><code class="language-none">On branch master
Changes not staged for commit:   
(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
(use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>删掉博客目录下的<code>.git</code>文件夹（一般为隐藏状态）即可。不过值得注意的是，这个文件夹被删掉之后，所有的远程“代号需要重新设置”：</p>
<pre class="line-numbers language-none"><code class="language-none">git remote add [代号] [仓库名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="-13"><a class="markdownIt-Anchor" href="#-13"></a> <a href="https://www.dhndzwxj.top/3276806131.html#32-gitee"></a>3.2 Gitee</h3>
<p>别名“码云”，服务器在国内。优点是下载速度比Github快了一个数量级，缺点是一旦博客中有某些“敏感词”就无法上线自己的博客。它的官方网址是：<a href="https://gitee.com/">Gitee</a>。后续的过程基本上重复了上一步在Github中所作的一切，因此不再赘述。</p>
<p>不过gitee的站点发布和github不太一样。需要在最后一步开启网站服务。不过我的博客经常被gitee检查出敏感词汇，因此一直没有上线成功，就不展示了哈~</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688343.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688343.jpg" alt="" /></a></p>
<p>如何将一个项目同时提交到GitHub和Gitee(码云)上？</p>
<p>找到.git下面的config文件，通过vi命令进行修改，笔者起初文件内容如下：</p>
<pre class="line-numbers language-none"><code class="language-none">[core]
        repositoryformatversion &#x3D; 0
        filemode &#x3D; true
        bare &#x3D; false
        logallrefupdates &#x3D; true
        ignorecase &#x3D; true
        precomposeunicode &#x3D; true
[remote &quot;origin&quot;]
        url &#x3D; git@github.com:secbr&#x2F;shiro.git
        fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*
[branch &quot;main&quot;]
        remote &#x3D; origin
        merge &#x3D; refs&#x2F;heads&#x2F;main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改之后变为：</p>
<pre class="line-numbers language-none"><code class="language-none">[core]
        repositoryformatversion &#x3D; 0
        filemode &#x3D; true
        bare &#x3D; false
        logallrefupdates &#x3D; true
        ignorecase &#x3D; true
        precomposeunicode &#x3D; true
[remote &quot;origin&quot;]
        &#x2F;&#x2F; github的仓库地址
        url &#x3D; git@github.com:secbr&#x2F;shiro.git
        &#x2F;&#x2F; gitee的仓库地址
        url &#x3D; git@gitee.com:secbro&#x2F;shiro.git
        fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*
[branch &quot;main&quot;]
        remote &#x3D; origin
        merge &#x3D; refs&#x2F;heads&#x2F;main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="-14"><a class="markdownIt-Anchor" href="#-14"></a> <a href="https://www.dhndzwxj.top/3276806131.html#4-%E6%92%B0%E5%86%99%E5%8D%9A%E5%AE%A2"></a>4. 撰写博客</h2>
<h3 id="-15"><a class="markdownIt-Anchor" href="#-15"></a> <a href="https://www.dhndzwxj.top/3276806131.html#41-%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6%E5%A4%B9"></a>4.1 博客文件夹</h3>
<p>我们打开自己的博客根目录，跟着我一个个了解里面的这些文件（夹）都是干什么的：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688356.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688356.png" alt="" /></a></p>
<ul>
<li><code>_config.yml</code>：俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面改。</li>
<li><code>node_modules</code>:存储Hexo插件的文件，可以实现各种扩展功能。一般不需要管。</li>
<li><code>package.json</code>：别问我，我也不知道干嘛的。</li>
<li><code>scaffolds</code>：模板文件夹，里面的<code>post.md</code>文件可以设置每一篇博客的模板。具体用起来就知道能干嘛了。</li>
<li><code>source</code>：非常重要。所有的个人文件都在里面！</li>
<li><code>themes</code>：主题文件夹，可以从<a href="https://hexo.io/themes/">Hexo主题官网</a>或者网上大神的Github主页下载各种各样美观的主题，让自己的网站变得逼格高端的关键！</li>
</ul>
<p>接下来重点介绍<code>source</code>文件夹。新建的博客中，<code>source</code>文件夹下默认只有一个子文件夹——<code>_posts</code>。我们写的博客都放在这个子文件夹里面。我们还可以在<code>source</code>里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。</p>
<h3 id="-16"><a class="markdownIt-Anchor" href="#-16"></a> <a href="https://www.dhndzwxj.top/3276806131.html#42-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6"></a>4.2 新建博客文件</h3>
<p>博客文件格式为<code>.md</code>（Markdown格式文件，建议使用<a href="https://www.typora.io/">typora软件</a>进行编辑）。我们一定要用代码建立新的博客 ：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo n 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688523.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688523.png" alt="" /></a></p>
<p>如上图，左边的是<code>scafford</code>文件夹下的模板文件，右边是我们刚刚新建的markdown文件。我们可以看出模板文件是干嘛用的了吧！之所以要用代码新建博客文件，是因为这种方式生成的文件有前面的头文件(Front Matter)，这些内容对于后面生成网页很有用！默认的模板文件中并没有这么丰富的内容，这些新添加的东西都是我写博客一年来积累的符合个人习惯的设置，不必邯郸学步。</p>
<p>写好内容后，在命令行一键三连：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后随便打开一个浏览器，在网址栏输入<code>localhost:4000/</code>，就能发现自己的网站更新了！不过这只是在本地进行了更新，要想部署到网上（Github上），输入如下代码：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后在浏览器地址栏输入<code>https://yourname.github.io</code>，或者<code>yourname.github.io</code>就能在网上浏览自己的博客了！</p>
<p>以上，我们的博客网站1.0版本就搭建完成了，如果没有更多的需求，做到这里基本上就可以了。如果有更多的要求，还需要进一步的精耕细作！</p>
<h3 id="-17"><a class="markdownIt-Anchor" href="#-17"></a> <a href="https://www.dhndzwxj.top/3276806131.html#43-typora-markdown%E8%AF%AD%E6%B3%95"></a>4.3 Typora-Markdown语法</h3>
<p>如果想要系统学习相关的编码知识，需要研究以下两套代码：</p>
<p>Markdown语法：<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></p>
<p>Markdown是支持html和html5的语法的：<a href="https://www.runoob.com/html/html-tutorial.html">菜鸟教程</a></p>
<p>不过出于快速上手的目的，下面我分享一些设置和模板，方便新学者能快速投入使用。</p>
<p>首先要对Typora软件进行一些设置。按<code>Ctrl+,</code>打开其设置界面。</p>
<p>（1）由于个人喜欢使用<a href="https://lanlan2017.github.io/blog/83c2e83a/">LaTeX语法</a>，因此要在<code>Markdown</code>标签中打开内联公式：</p>
<ul>
<li><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688550.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688550.png" alt="" /></a></li>
</ul>
<p>（2）此外如果在Typora中插入图片，我的做法是用QQ截图（或者其他截图工具）然后直接粘贴到Typora里。这样做一般都会成功，生成的图片格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">![image-20211026101023735](&#x2F;..&#x2F;..&#x2F;images&#x2F;%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97&#x2F;image-20211026101023735.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>插入图片代码的基本格式为<code>![图片描述](图片路径)</code>。其中“图片描述”部分可以省略不写。图片路径是我自己设置过的：打开Typora的设置，在“图像”标签下，自定义的图片插入路径：（如果不设置，我都不知道这插入的图片存到我电脑的什么奇怪位置去了！）</p>
</li>
<li>
<p>我的图片和文章的存储结构为：</p>
</li>
<li>
<p>source</p>
<ul>
<li>_posts</li>
<li>images</li>
</ul>
</li>
<li>
<p>下一张图的<code>../images/$&#123;filename&#125;</code>是在macOS系统下设置的。不过在windows系统下这么设置就出现了问题，要改成<code>/../../images/$&#123;filename&#125;</code>。【在相对路径的语法中，<code>.</code>代表文件所在的目录，<code>..</code>代表上一级目录，<code>$&#123;filename&#125;</code>代表文件名。】</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688607.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688607.png" alt="" /></a></p>
</li>
<li>
<p><code>/../../source/images/$&#123;filename&#125;</code>的含义是，在<code>_post</code>的同目录（<code>source</code>）下，创建一个<code>images</code>子文件夹（如果文件夹已经存在就不另建了），然后在<code>images</code>下，以当前工作的markdown文件名新建子子文件夹，于是这篇博文中的所有图片都保存在这个新的子子文件夹下了。</p>
</li>
<li>
<p>当然，我不推荐用上面的方法插入图片，因为没办法设置图片的大小、位置等信息。我一般用html标签语言插入图片，代码如下：</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&lt;div align&#x3D;&#39;center&#39;&gt;
  &lt;img src&#x3D;&#39;图片路径&#39; width&#x3D;450px&gt;
  &lt;p align&#x3D;&#39;center&#39; style&#x3D;&#39;font-size:15px;font-family:kaiti;color:red&#39;&gt;图片标题 &lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><code>&lt;div&gt;&lt;/div&gt;</code>是html中表示代码块的标签，相似的还有<code>&lt;span&gt;&lt;/span&gt;</code>。只不过前者用于行间，后者用于行内。它包裹住所有的内容都会独立出现为一个大模块，里面的<code>align='center'</code>是设置整个模块的位置。</p>
</li>
<li>
<p><code>&lt;img&gt;</code>是设置图片插入的标签（这个标签没有<code>&lt;/img&gt;</code>配合），<code>src</code>写的是图片路径参数，<code>width</code>是图片宽度参数，<code>px</code>是宽度单位。其实还有高度的参数<code>height</code>，只不过我一般宽高只设置一个。还可以加入参数<code>float='left'</code>，效果就像是word里面的“四周环绕型”，不推荐。</p>
</li>
<li>
<p><code>&lt;p&gt;&lt;/p&gt;</code>是图片周边的文字内容。<code>align</code>前面已经介绍，<code>style</code>下可以设置文字的字号(<code>font-size</code>)、字体(<code>font-family</code>)、颜色(<code>color</code>)等，彼此之间用英文的分号间隔。（注意：这些属性都是可选的，也可以一个style都不写，那样就随系统默认格式。）</p>
</li>
</ul>
<p>（3）行间文字的设置，和上面介绍的图片周边的文字基本一样，只不过这里一般使用<code>&lt;span&gt;&lt;/span&gt;</code>标签。格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;span style&#x3D;&#39;color:blue;background:yellow;font-size:18px;font-family:hei&#39;&gt;测试字体&lt;&#x2F;span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>（4）如果要插入代码块，把自己的代码存在文章中，在英文输入法下按三下键盘上的这个键（下图），然后回车，代码环境就出现了：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688711.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688711.jpg" alt="" /></a></p>
<p>（5）插入表格：<code>段落——表格——插入表格</code>。</p>
<p>（6）无序列表</p>
<p>就是输入减号<code>-</code>然后按下空格，按下回车。如下：</p>
<ul>
<li>一级列表
<ul>
<li>二级列表</li>
</ul>
</li>
</ul>
<p>生成二级列表的方法是按键盘的<code>Tab</code>键，返回上一级列表的方法是按键盘的<code>Shift+Tab</code>键。</p>
<p>（7）有序列表</p>
<p>就是输入1.然后按下空格，按下回车，如下：</p>
<p>（8）文中尾注</p>
<pre class="line-numbers language-none"><code class="language-none">马克思[^2]是全世界无产阶级和劳动人民的伟大导师。

[^2]: 卡尔·马克思，全名卡尔·海因里希·马克思（德语：Karl Heinrich Marx，1818年5月5日－1883年3月14日），马克思主义的创始人之一。……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：在typora中写文章，能用html代码就别用markdown语法，否则生成网页的时候非常容易出现问题。比如对于加粗，建议使用标签<code>&lt;b&gt;&lt;/b&gt;</code>。而不是markdown的<code>**内容**</code>。</p>
</blockquote>
<h2 id="-18"><a class="markdownIt-Anchor" href="#-18"></a> <a href="https://www.dhndzwxj.top/3276806131.html#5-%E6%8F%92%E4%BB%B6"></a>5. 插件</h2>
<p>使用插件可以让我们的博客功能更为强大，也能满足自己的一些特殊需要。下面列举一些事例，如有其他的要求，可以自行上网搜索、学习。</p>
<h3 id="-19"><a class="markdownIt-Anchor" href="#-19"></a> <a href="https://www.dhndzwxj.top/3276806131.html#51-%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5"></a>5.1 永久链接</h3>
<p>在做优化之前，hexo-next文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。这样，如果文章标题是中文的话，URL链接是也会是中文，特别容易出现编码错乱的问题。那能不能生成唯一不变的URL链接呢？答案是可以的，已经有人给我们实现了。这就是我们要说的<code>hexo-abbrlink</code>插件：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改博客站点配置文件_config.yml，将带有<code>permalink:</code>的一行改为：</p>
<pre class="line-numbers language-none"><code class="language-none">permalink: &#x2F;:abbrlink.html  # 此处可以自己设置
abbrlink:
    alg: crc32   #算法： crc16(default) and crc32
    rep: hex     #进制： dec(default) and hex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-20"><a class="markdownIt-Anchor" href="#-20"></a> <a href="https://www.dhndzwxj.top/3276806131.html#52-latex"></a>5.2 LaTeX</h3>
<p>推荐这个插件：<a href="https://github.com/hexojs/hexo-math">https://github.com/hexojs/hexo-math</a></p>
<pre class="line-numbers language-none"><code class="language-none">npm i hexo-math --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>有几个坑：</p>
<ul>
<li>行间公式的换行，<code>\\</code>是远远不够的，要写成<code>\\\tag\\</code>;</li>
<li>上标符号<code>^</code>后面接了一个内容后要紧接着空格，不然会出错；例如：<code>^\star =</code>, <code>^&#123; \star&#125;</code></li>
<li>下标符号<code>_</code>和后面的内容一定要有间隔，例如：<code>x_ 1</code>,<code>\mathscr&#123;R&#125;_ &#123;++&#125;</code></li>
<li>数学公式中，二阶导数的两个“撇”最好用代码<code>^&#123; \prime\prime&#125;</code>来表示。</li>
<li>数学公式中。减号’-'前后一定不要什么内容都没有，不然会被渲染为markdown语法中的item！</li>
<li>latex中的公式环境eqnarray会在html中自动生成公式的tag，因此最好使用{eqnarray*}环境——或者添加<code>\notag</code></li>
</ul>
</blockquote>
<p>Hexo默认使用<code>marked.js</code>去解析我们写的<code>markdown</code>，比如一些符号，<code>_</code>代表斜体，会被处理为标签，比如<code>x_i</code>在开始被渲染的时候，处理为<code>xi</code>，比如<strong>init</strong>会被处理成<strong>init。</strong></p>
<p>因此，我们需要采取<strong>更换Markdown引擎</strong>的方式。</p>
<pre class="line-numbers language-none"><code class="language-none">npm i hexo-renderer-mathjax --save
npm uninstall hexo-renderer-marked --save
npm install hexo-renderer-kramed --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。</p>
<p>之后，现在站点配置文件下添加如下内容：</p>
<pre class="line-numbers language-none"><code class="language-none"># _config.yml
math:
  katex:
    css: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;katex@0.12.0&#x2F;dist&#x2F;katex.min.css&#39;
    options:
      throwOnError: false
  mathjax:
    css: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;hexo-math@4.0.0&#x2F;dist&#x2F;style.css&#39;
    options:
      conversion:
        display: false
      tex:
      svg:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要在主题配置文件中开启<code>mathjax</code>开关，把<code>mathjax</code>默认的<code>false</code>修改为<code>true</code>，具体如下：</p>
<pre class="line-numbers language-none"><code class="language-none"># MathJax Support
mathjax:
  enable: true
  per_page: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>别着急，这样还不够，还需要在文章的<code>Front-matter</code>里打开<code>mathjax</code>开关，如下：</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: index.html
date: 2016-12-28 21:01:30
tags:
mathjax: true
--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-21"><a class="markdownIt-Anchor" href="#-21"></a> <a href="https://www.dhndzwxj.top/3276806131.html#53-%E8%A1%8C%E5%86%85%E5%85%AC%E5%BC%8Fbug"></a>5.3 行内公式bug</h3>
<p>对于Typora软件而言，按<code>Crtl+/</code>（macOS按<code>command+/</code>）。可以进入源代码模式，这样就能看清楚那部分代码除了问题了！这样修改效率很高！（如下图）</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688761.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688761.png" alt="" /></a></p>
<h3 id="-22"><a class="markdownIt-Anchor" href="#-22"></a> <a href="https://www.dhndzwxj.top/3276806131.html#54-%E8%84%9A%E6%B3%A8"></a>5.4 脚注</h3>
<p><code>hexo-renderer-markdown-it-plus</code>插件（目前在使用，这个插件和hexo-renderer-kramed有冲突）</p>
<p>原生的主题是不支持网页脚注的，非常不方便。几经查找、探索，终于找到合适的方法，点击脚注即可实现跳转。</p>
<p>首先卸载原来的 markdown 渲染插件（我这里原来是 marked，这是 Hexo 提供的默认渲染插件），然后把 <code>hexo-renderer-markdown-it-plus</code> 装上：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm un hexo-renderer-marked --save
cnpm i hexo-renderer-markdown-it-plus --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后在博客站点根目录下的<code>_config.yml</code>中进行相应的配置。<a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Simple-Configuration">简单的配置方法</a>只包括设置 markdown 格式，这里就不详述了。<a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Advanced-Configuration">高级的配置方法</a>中包含很多可选项：</p>
<pre class="line-numbers language-none"><code class="language-none">markdown:
  # 渲染设置
  render:
    # 置为true时，html内容保持不变；置为false时，html内容将被转义成普通字符串
    html: true
    # 是否生成与XHTML完全兼容的标签（虽然我不懂是什么意思）
    xhtmlOut: false
    # 置为true时，每个换行符都被渲染成一个&lt;br&gt;（即Hexo的默认表现）；置为false时，只有空行才会被渲染为&lt;br&gt;（GFM的默认表现）
    breaks: true
    # 是否自动识别链接并把它渲染成链接
    linkify: true
    # 是否自动识别印刷格式（意思是把(c)渲染为©这样的）
    typographer: true
    # 如果typographer被设置为true，则该选项用于设置将dumb quotes（&quot;&quot;）自动替换为smart quotes
    quotes: &#39;“”‘’&#39;
  # 设置所需插件
  plugins:
    - markdown-it-abbr
    - markdown-it-footnote
    - markdown-it-ins
    - markdown-it-sub
    - markdown-it-sup
  # 锚点设置（因为我没有尝试相关内容，所以就不翻译相关说明了）
  anchors:
    level: 2
    collisionSuffix: &#39;v&#39;
    permalink: true
    permalinkClass: header-anchor
    permalinkSymbol: § #¶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里设置了文中章节、脚注等内容的格式。</p>
<h3 id="-23"><a class="markdownIt-Anchor" href="#-23"></a> <a href="https://www.dhndzwxj.top/3276806131.html#55-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E5%8A%9F%E8%83%BD"></a>5.5 文章加密功能</h3>
<p>有些文章的内容，我们不希望别人能看到，Hexo提供了加密文章的插件：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install --save hexo-blog-encrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后在你的文章的头部(Front Matter)添加上对应的字段，如 password, abstract, message。（这时候文章模板<code>blog/scaffod/post.md</code>的作用就体现出来了，这些内容加在模板里，以后生成的每一篇文章都能选择是否进行加密）</p>
<p>如果<code>password:</code>后面空着，就是无密码；我发现如果密码内容加上英文输入法下的引号，引号也不会被算作密码内容。</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: 文章加密
date: 2019-01-04T22:20:13.000Z
category: 教程
tags:
  - 博客
  - Hexo
keywords: 博客文章密码
password: TloveY#是该博客加密使用的密码
abstract: 密码：TloveY#是该博客的摘要，会显示在博客的列表页
message:  输入密码，查看文章#这个是博客查看时，密码输入框上面的描述性文字
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过加密文件的<code>toc</code>无法上下拉，如果网页目录特别长就很不方便。原因是插件<code>hexo-blog-encrypt</code>给<code>toc</code>添加了<code>display inline</code> (如下图)，导致没办法滚动。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688799.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688799.png" alt="" /></a></p>
<p>未加密的应该是这样的：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688828.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688828.png" alt="" /></a></p>
<p>尝试修改插件：</p>
<p>找到需要修改的文件：<code>node_modules/hexo-blog-encrypt/lib/hbe.js</code>。然后注释这一段代码：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; document.getElementById(&#39;hexo-blog-encrypt&#39;).style.display &#x3D; &#39;inline&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>把这两句代码中的<code>display = 'inline'</code>，改为<code>display = ''</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; TOC part
var tocDiv &#x3D; document.getElementById(&quot;toc-div&quot;);
if (tocDiv) &#123;
  tocDiv.style.display &#x3D; &#39;&#39;;
&#125;

var tocDivs &#x3D; document.getElementsByClassName(&#39;toc-div-class&#39;);
if (tocDivs &amp;&amp; tocDivs.length &gt; 0) &#123;
  for (var idx &#x3D; 0; idx &lt; tocDivs.length; idx++) &#123;
    tocDivs[idx].style.display &#x3D; &#39;&#39;;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就成功了！</p>
<p>自主修改<code>hbe.js</code>文件完整版：</p>
<p>解决加密文章toc无法滚动的问题</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;node_modules&#x2F;hexo-blog-encrypt&#x2F;lib&#x2F;hbe.js

(() &#x3D;&gt; &#123;
  &#39;use strict&#39;;

  const cryptoObj &#x3D; window.crypto || window.msCrypto;
  const storage &#x3D; window.localStorage;

  const storageName &#x3D; &#39;hexo-blog-encrypt:#&#39; + window.location.pathname;
  const keySalt &#x3D; textToArray(&#39;hexo-blog-encrypt的作者们都是大帅比!&#39;);
  const ivSalt &#x3D; textToArray(&#39;hexo-blog-encrypt是地表最强Hexo加密插件!&#39;);

&#x2F;&#x2F; As we can&#39;t detect the wrong password with AES-CBC,
&#x2F;&#x2F; so adding an empty div and check it when decrption.
const knownPrefix &#x3D; &quot;&lt;hbe-prefix&gt;&lt;&#x2F;hbe-prefix&gt;&quot;;

  const mainElement &#x3D; document.getElementById(&#39;hexo-blog-encrypt&#39;);
  const wrongPassMessage &#x3D; mainElement.dataset[&#39;wpm&#39;];
  const wrongHashMessage &#x3D; mainElement.dataset[&#39;whm&#39;];
  const dataElement &#x3D; mainElement.getElementsByTagName(&#39;script&#39;)[&#39;hbeData&#39;];
  const encryptedData &#x3D; dataElement.innerText;
  const HmacDigist &#x3D; dataElement.dataset[&#39;hmacdigest&#39;];

  function hexToArray(s) &#123;
    return new Uint8Array(s.match(&#x2F;[\da-f]&#123;2&#125;&#x2F;gi).map((h &#x3D;&gt; &#123;
      return parseInt(h, 16);
    &#125;)));
  &#125;

  function textToArray(s) &#123;
    var i &#x3D; s.length;
    var n &#x3D; 0;
    var ba &#x3D; new Array()

    for (var j &#x3D; 0; j &lt; i;) &#123;
      var c &#x3D; s.codePointAt(j);
      if (c &lt; 128) &#123;
        ba[n++] &#x3D; c;
        j++;
      &#125; else if ((c &gt; 127) &amp;&amp; (c &lt; 2048)) &#123;
        ba[n++] &#x3D; (c &gt;&gt; 6) | 192;
        ba[n++] &#x3D; (c &amp; 63) | 128;
        j++;
      &#125; else if ((c &gt; 2047) &amp;&amp; (c &lt; 65536)) &#123;
        ba[n++] &#x3D; (c &gt;&gt; 12) | 224;
        ba[n++] &#x3D; ((c &gt;&gt; 6) &amp; 63) | 128;
        ba[n++] &#x3D; (c &amp; 63) | 128;
        j++;
      &#125; else &#123;
        ba[n++] &#x3D; (c &gt;&gt; 18) | 240;
        ba[n++] &#x3D; ((c &gt;&gt; 12) &amp; 63) | 128;
        ba[n++] &#x3D; ((c &gt;&gt; 6) &amp; 63) | 128;
        ba[n++] &#x3D; (c &amp; 63) | 128;
        j +&#x3D; 2;
      &#125;
    &#125;
    return new Uint8Array(ba);
  &#125;

  function arrayBufferToHex(arrayBuffer) &#123;
    if (typeof arrayBuffer !&#x3D;&#x3D; &#39;object&#39; || arrayBuffer &#x3D;&#x3D;&#x3D; null || typeof arrayBuffer.byteLength !&#x3D;&#x3D; &#39;number&#39;) &#123;
      throw new TypeError(&#39;Expected input to be an ArrayBuffer&#39;)
    &#125;

    var view &#x3D; new Uint8Array(arrayBuffer)
    var result &#x3D; &#39;&#39;
    var value

    for (var i &#x3D; 0; i &lt; view.length; i++) &#123;
      value &#x3D; view[i].toString(16)
      result +&#x3D; (value.length &#x3D;&#x3D;&#x3D; 1 ? &#39;0&#39; + value : value)
    &#125;

    return result
  &#125;

  async function getExecutableScript(oldElem) &#123;
    let out &#x3D; document.createElement(&#39;script&#39;);
    const attList &#x3D; [&#39;type&#39;, &#39;text&#39;, &#39;src&#39;, &#39;crossorigin&#39;, &#39;defer&#39;, &#39;referrerpolicy&#39;];
    attList.forEach((att) &#x3D;&gt; &#123;
      if (oldElem[att])
        out[att] &#x3D; oldElem[att];
    &#125;)

    return out;
  &#125;

  async function convertHTMLToElement(content) &#123;
    let out &#x3D; document.createElement(&#39;div&#39;);
    out.innerHTML &#x3D; content;
    out.querySelectorAll(&#39;script&#39;).forEach(async (elem) &#x3D;&gt; &#123;
      elem.replaceWith(await getExecutableScript(elem));
    &#125;);

    return out;
  &#125;

  function getKeyMaterial(password) &#123;
    let encoder &#x3D; new TextEncoder();
    return cryptoObj.subtle.importKey(
      &#39;raw&#39;,
      encoder.encode(password),
      &#123;
        &#39;name&#39;: &#39;PBKDF2&#39;,
      &#125;,
      false,
      [
        &#39;deriveKey&#39;,
        &#39;deriveBits&#39;,
      ]
    );
  &#125;

  function getHmacKey(keyMaterial) &#123;
    return cryptoObj.subtle.deriveKey(&#123;
      &#39;name&#39;: &#39;PBKDF2&#39;,
      &#39;hash&#39;: &#39;SHA-256&#39;,
      &#39;salt&#39;: keySalt.buffer,
      &#39;iterations&#39;: 1024
    &#125;, keyMaterial, &#123;
      &#39;name&#39;: &#39;HMAC&#39;,
      &#39;hash&#39;: &#39;SHA-256&#39;,
      &#39;length&#39;: 256,
    &#125;, true, [
      &#39;verify&#39;,
    ]);
  &#125;

  function getDecryptKey(keyMaterial) &#123;
    return cryptoObj.subtle.deriveKey(&#123;
      &#39;name&#39;: &#39;PBKDF2&#39;,
      &#39;hash&#39;: &#39;SHA-256&#39;,
      &#39;salt&#39;: keySalt.buffer,
      &#39;iterations&#39;: 1024,
    &#125;, keyMaterial, &#123;
      &#39;name&#39;: &#39;AES-CBC&#39;,
      &#39;length&#39;: 256,
    &#125;, true, [
      &#39;decrypt&#39;,
    ]);
  &#125;

  function getIv(keyMaterial) &#123;
    return cryptoObj.subtle.deriveBits(&#123;
      &#39;name&#39;: &#39;PBKDF2&#39;,
      &#39;hash&#39;: &#39;SHA-256&#39;,
      &#39;salt&#39;: ivSalt.buffer,
      &#39;iterations&#39;: 512,
    &#125;, keyMaterial, 16 * 8);
  &#125;

  async function verifyContent(key, content) &#123;
    const encoder &#x3D; new TextEncoder();
    const encoded &#x3D; encoder.encode(content);

    let signature &#x3D; hexToArray(HmacDigist);

    const result &#x3D; await cryptoObj.subtle.verify(&#123;
      &#39;name&#39;: &#39;HMAC&#39;,
      &#39;hash&#39;: &#39;SHA-256&#39;,
    &#125;, key, signature, encoded);
    console.log(&#96;Verification result: $&#123;result&#125;&#96;);
    if (!result) &#123;
      alert(wrongHashMessage);
      console.log(&#96;$&#123;wrongHashMessage&#125;, got &#96;, signature, &#96; but proved wrong.&#96;);
    &#125;
    return result;
  &#125;

  async function decrypt(decryptKey, iv, hmacKey) &#123;
    let typedArray &#x3D; hexToArray(encryptedData);

    const result &#x3D; await cryptoObj.subtle.decrypt(&#123;
      &#39;name&#39;: &#39;AES-CBC&#39;,
      &#39;iv&#39;: iv,
    &#125;, decryptKey, typedArray.buffer).then(async (result) &#x3D;&gt; &#123;
      const decoder &#x3D; new TextDecoder();
      const decoded &#x3D; decoder.decode(result);

      &#x2F;&#x2F; check the prefix, if not then we can sure here is wrong password.
      if (!decoded.startsWith(knownPrefix)) &#123;
        throw &quot;Decode successfully but not start with KnownPrefix.&quot;;
      &#125;

      const hideButton &#x3D; document.createElement(&#39;button&#39;);
      hideButton.textContent &#x3D; &#39;Encrypt again&#39;;
      hideButton.type &#x3D; &#39;button&#39;;
      hideButton.classList.add(&quot;hbe-button&quot;);
      hideButton.addEventListener(&#39;click&#39;, () &#x3D;&gt; &#123;
        window.localStorage.removeItem(storageName);
        window.location.reload();
      &#125;);

      &#x2F;&#x2F; document.getElementById(&#39;hexo-blog-encrypt&#39;).style.display &#x3D; &#39;inline&#39;;
      document.getElementById(&#39;hexo-blog-encrypt&#39;).innerHTML &#x3D; &#39;&#39;;
      document.getElementById(&#39;hexo-blog-encrypt&#39;).appendChild(await convertHTMLToElement(decoded));
      document.getElementById(&#39;hexo-blog-encrypt&#39;).appendChild(hideButton);

      &#x2F;&#x2F; support html5 lazyload functionality.
      document.querySelectorAll(&#39;img&#39;).forEach((elem) &#x3D;&gt; &#123;
        if (elem.getAttribute(&quot;data-src&quot;) &amp;&amp; !elem.src) &#123;
          elem.src &#x3D; elem.getAttribute(&#39;data-src&#39;);
        &#125;
      &#125;);

      &#x2F;&#x2F; support theme-next refresh
      window.NexT &amp;&amp; NexT.boot &amp;&amp; typeof NexT.boot.refresh &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; NexT.boot.refresh();

      &#x2F;&#x2F; TOC part
      var tocDiv &#x3D; document.getElementById(&quot;toc-div&quot;);
      if (tocDiv) &#123;
        tocDiv.style.display &#x3D; &#39;&#39;;
      &#125;

      var tocDivs &#x3D; document.getElementsByClassName(&#39;toc-div-class&#39;);
      if (tocDivs &amp;&amp; tocDivs.length &gt; 0) &#123;
        for (var idx &#x3D; 0; idx &lt; tocDivs.length; idx++) &#123;
          tocDivs[idx].style.display &#x3D; &#39;&#39;;
        &#125;
      &#125;

      return await verifyContent(hmacKey, decoded);
    &#125;).catch((e) &#x3D;&gt; &#123;
      alert(wrongPassMessage);
      console.log(e);
      return false;
    &#125;);

    return result;

  &#125;

  function hbeLoader() &#123;

    const oldStorageData &#x3D; JSON.parse(storage.getItem(storageName));

    if (oldStorageData) &#123;
      console.log(&#96;Password got from localStorage($&#123;storageName&#125;): &#96;, oldStorageData);

      const sIv &#x3D; hexToArray(oldStorageData.iv).buffer;
      const sDk &#x3D; oldStorageData.dk;
      const sHmk &#x3D; oldStorageData.hmk;

      cryptoObj.subtle.importKey(&#39;jwk&#39;, sDk, &#123;
        &#39;name&#39;: &#39;AES-CBC&#39;,
        &#39;length&#39;: 256,
      &#125;, true, [
        &#39;decrypt&#39;,
      ]).then((dkCK) &#x3D;&gt; &#123;
        cryptoObj.subtle.importKey(&#39;jwk&#39;, sHmk, &#123;
          &#39;name&#39;: &#39;HMAC&#39;,
          &#39;hash&#39;: &#39;SHA-256&#39;,
          &#39;length&#39;: 256,
        &#125;, true, [
          &#39;verify&#39;,
        ]).then((hmkCK) &#x3D;&gt; &#123;
          decrypt(dkCK, sIv, hmkCK).then((result) &#x3D;&gt; &#123;
            if (!result) &#123;
              storage.removeItem(storageName);
            &#125;
          &#125;);
        &#125;);
      &#125;);
    &#125;

    mainElement.addEventListener(&#39;keydown&#39;, async (event) &#x3D;&gt; &#123;
      if (event.isComposing || event.keyCode &#x3D;&#x3D;&#x3D; 13) &#123;
        const password &#x3D; document.getElementById(&#39;hbePass&#39;).value;
        const keyMaterial &#x3D; await getKeyMaterial(password);
        const hmacKey &#x3D; await getHmacKey(keyMaterial);
        const decryptKey &#x3D; await getDecryptKey(keyMaterial);
        const iv &#x3D; await getIv(keyMaterial);

        decrypt(decryptKey, iv, hmacKey).then((result) &#x3D;&gt; &#123;
          console.log(&#96;Decrypt result: $&#123;result&#125;&#96;);
          if (result) &#123;
            cryptoObj.subtle.exportKey(&#39;jwk&#39;, decryptKey).then((dk) &#x3D;&gt; &#123;
              cryptoObj.subtle.exportKey(&#39;jwk&#39;, hmacKey).then((hmk) &#x3D;&gt; &#123;
                const newStorageData &#x3D; &#123;
                  &#39;dk&#39;: dk,
                  &#39;iv&#39;: arrayBufferToHex(iv),
                  &#39;hmk&#39;: hmk,
                &#125;;
                storage.setItem(storageName, JSON.stringify(newStorageData));
              &#125;);
            &#125;);
          &#125;
        &#125;);
      &#125;
    &#125;);
  &#125;

  hbeLoader();

&#125;)();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-24"><a class="markdownIt-Anchor" href="#-24"></a> <a href="https://www.dhndzwxj.top/3276806131.html#56-%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0pdf%E5%B9%B6%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88"></a>5.6 上传本地pdf并在线预览</h3>
<p>安装插件</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm i hexo-pdf -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果是网上的pdf，参考格式：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;% pdf http:&#x2F;&#x2F;www.u.arizona.edu&#x2F;~compitel&#x2F;marston.pdf %&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果直接在想添加的页面中 (md 文件) 添加pdf，就以网页标签的格式写代码：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;embed width&#x3D;&#39;700&#39; height&#x3D;&#39;650&#39; fullscreen&#x3D;&#39;yes&#39; src&#x3D;&#39;http:&#x2F;&#x2F;www.u.arizona.edu&#x2F;~compitel&#x2F;marston.pdf&#39;&gt;点击打开pdf文件&lt;&#x2F;embed&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对于本地的pdf文件，在搭建好的hexo博客的根目录的<code>blog/source</code>文件夹下新建一个文件夹，如<code>local_file</code>（用来存pdf文件。参考格式：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;% pdf &#39;&#x2F;local_file&#x2F;test.pdf&#39; %&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要让pdf文件在一个新的页面打开，参考下面的代码：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&#39;&#x2F;local_file&#x2F;test.pdf&#39; target&#x3D;&#39;_blank&#39;&gt;点击这里在新的网页打开pdf文件&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注意，要先执行<code>hexo d</code>命令将本地的pdf文件上传到<code>github</code>上，然后pdf文件才能显示在网站上！这里我们就不难发现，github的仓库充当的是远程服务器的作用！</p>
<p>参考：<a href="https://github.com/superalsrk/hexo-pdf">https://github.com/superalsrk/hexo-pdf</a></p>
<h3 id="-25"><a class="markdownIt-Anchor" href="#-25"></a> <a href="https://www.dhndzwxj.top/3276806131.html#57-%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5"></a>5.7 引用本地文件的链接</h3>
<p>其实不只是pdf文件，其他文件也可以上传到github上，并且在文章中直接引用的。可以在根目录下创建自己的文件夹，比如说<code>my_folder</code>，然后在这个文件夹下创建一个文档<code>test.txt</code>。那么通过以下代码就可以直接插入到网站上面了：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&#39;&#x2F;my_folder&#x2F;test.txt&#39; target&#x3D;&#39;_blank&#39;&gt;test文件&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>区别不过是，如果引用的是pdf文件，就能直接打开一个新页面并进行文件预览。如果是其他格式的文件，浏览器默认为我们把文件下载到本地。</p>
<h3 id="-26"><a class="markdownIt-Anchor" href="#-26"></a> <a href="https://www.dhndzwxj.top/3276806131.html#58-%E5%BD%92%E6%A1%A3%E8%AE%A1%E6%95%B0"></a>5.8 归档计数</h3>
<pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-generator-index
npm install --save hexo-generator-archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后在博客站点配置文件<code>blog/_config.yml</code>中更改：</p>
<pre class="line-numbers language-none"><code class="language-none">index_generator:
  path: &#39;&#39;
  per_page: 10
  order_by: -date
# 归档页面
archive_generator:
  per_page: 50
  yearly: true
  monthly: true
#效果，首页每间隔10篇文章就分页，归档页每间隔50篇文章才分页。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-27"><a class="markdownIt-Anchor" href="#-27"></a> <a href="https://www.dhndzwxj.top/3276806131.html#59-mermaid"></a>5.9 mermaid</h3>
<p>这个<a href="https://butterfly.js.org/posts/4aa8abbe/#inlineImg">博主</a>介绍了一些标签外挂功能，可以按需索取：</p>
<blockquote>
<p><code>mermaid</code>标签不允许嵌套于一些隐藏属性的标签外挂，例如: <code>tag-hide</code>内的标签外挂和<code>tabs</code>标签外挂，这会导致<code>mermaid</code>图示无法正常显示，使用时请留意。</p>
<p>请不要压缩<code>html</code>代码，不然会导致<code>mermaid</code>显示异常</p>
</blockquote>
<p>使用<code>mermaid</code>标签可以绘制<code>Flowchart</code>（流程图）、<code>Sequence diagram</code>（时序图 ）、<code>Class Diagram</code>（类別图）、<code>State Diagram</code>（状态图）、<code>Gantt</code>（甘特图）和<code>Pie Chart</code>（圆形图），具体可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文檔</a>。</p>
<p>由于网页不支持直接显示<code>Markdown</code>中的<code>mermaid</code>语法，需要安装一个插件：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install --save hexo-filter-mermaid-diagrams<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后设置站点根目录：</p>
<pre class="line-numbers language-none"><code class="language-none"># mermaid chart
mermaid: ## mermaid url https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid
  enable: true  # default true
  version: &quot;7.1.2&quot; # default v7.1.2
  options:  # find more api options from https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid&#x2F;blob&#x2F;master&#x2F;src&#x2F;mermaidAPI.js
    #startOnload: true  &#x2F;&#x2F; default true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后一步需要对<code>js</code>文件进行修改，需要修改的文件为<code>footer.swig</code>或者<code>footer.pug</code>或者<code>footer.ejs</code>或者</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;footer.swig
&#123;% if theme.mermaid.enable %&#125;
  &lt;script src&#x3D;&#39;https:&#x2F;&#x2F;unpkg.com&#x2F;mermaid@&#123;&#123; theme.mermaid.version &#125;&#125;&#x2F;dist&#x2F;mermaid.min.js&#39;&gt;&lt;&#x2F;script&gt;
  &lt;script&gt;
    if (window.mermaid) &#123;
      mermaid.initialize(&#123;&#123; JSON.stringify(theme.mermaid.options) &#125;&#125;);
    &#125;
  &lt;&#x2F;script&gt;
&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;- footer.pug
if theme.mermaid.enable &#x3D;&#x3D; true
  script(type&#x3D;&#39;text&#x2F;javascript&#39;, id&#x3D;&#39;maid-script&#39; mermaidoptioins&#x3D;theme.mermaid.options src&#x3D;&#39;https:&#x2F;&#x2F;unpkg.com&#x2F;mermaid@&#39;+ theme.mermaid.version + &#39;&#x2F;dist&#x2F;mermaid.min.js&#39; + &#39;?v&#x3D;&#39; + theme.version)
  script.
    if (window.mermaid) &#123;
      var options &#x3D; JSON.parse(document.getElementById(&#39;maid-script&#39;).getAttribute(&#39;mermaidoptioins&#39;));
      mermaid.initialize(options);
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- footer.ejs --&gt;
&lt;% if (theme.mermaid.enable) &#123; %&gt;
  &lt;script src&#x3D;&#39;https:&#x2F;&#x2F;unpkg.com&#x2F;mermaid@&lt;%&#x3D; theme.mermaid.version %&gt;&#x2F;dist&#x2F;mermaid.min.js&#39;&gt;&lt;&#x2F;script&gt;
  &lt;script&gt;
    if (window.mermaid) &#123;
      mermaid.initialize(&#123;theme: &#39;forest&#39;&#125;);
    &#125;
  &lt;&#x2F;script&gt;
&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子</p>
<pre class="line-numbers language-none"><code class="language-none">pie title 日常支出
&quot;衣&quot; : 100
&quot;食&quot; : 200
&quot;住&quot; : 200
&quot;行&quot; : 200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">flowchart LR
1 --&gt; 2 x--x 3 --- 4 &lt;--&gt; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">stateDiagram-v2
[*] --&gt; Still
Still --&gt; [*]
Still --&gt; Moving
Moving --&gt; Still
Moving --&gt; Crash
Crash --&gt; [*]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-28"><a class="markdownIt-Anchor" href="#-28"></a> <a href="https://www.dhndzwxj.top/3276806131.html#510-%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91"></a>5.10 插入视频</h3>
<p>首先安装插件：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm i hexo-tag-aplayer --save
cnpm i hexo-tag-dplayer --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后写代码：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p align&#x3D;&#39;center&#39;&gt;
  &lt;video height&#x3D;&quot;400&quot; autoplay&#x3D;&quot;autoplay&quot; controls&#x3D;&quot;controls&quot; allowfullscreen&#x3D;&quot;true&quot;&gt;
  &lt;source src&#x3D;&quot;&#x2F;local_video&#x2F;各省GDP排行榜.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于B站视频而言，在网页端获取分享链接，然后直接粘贴进markdown文件即可（如下图）。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688854.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688854.jpg" alt="" /></a></p>
<p>当然这种方式生成的视频无法控制其大小和位置，因此我这么写：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p align&#x3D;&#39;center&#39;&gt;
 &lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;799951124&amp;bvid&#x3D;BV1ey4y1b7GA&amp;cid&#x3D;320466524&amp;page&#x3D;1&quot; style&#x3D;&quot;width:100%; height:600px;&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot;&gt; &lt;&#x2F;iframe&gt;
&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>效果如下图：</p>
<p>至于来自其他视频网站的资源如何挂在自己的博客上，需要自己慢慢摸索了，不一一列举。</p>
<p>Safari上出现问题的原因可以参考这篇文章：<a href="https://www.jianshu.com/p/fecdec504ab0?from=singlemessage">修复video标签在safari中无法播放mp4视频的问题</a>。</p>
<h2 id="-29"><a class="markdownIt-Anchor" href="#-29"></a> <a href="https://www.dhndzwxj.top/3276806131.html#6-butterfly%E4%B8%BB%E9%A2%98"></a>6 butterfly主题</h2>
<p><a href="https://butterfly.js.org/posts/7670b080/">butterfly美化魔改教程合集</a></p>
<blockquote>
<p>注意：不要把个人需要的文件/图片放在主题<code>source</code>文件夹里，因为在升级主题的过程中，可能会把文件覆盖删除了。</p>
<p>在Hexo根目录的<code>source</code>文件夹里，创建一个文件夹来放置个人文件/图片。引用文件时直接写为<code>/文件夹名称/文件名</code>。这个技巧在配置主题文件时尤其要注意！</p>
</blockquote>
<h3 id="-30"><a class="markdownIt-Anchor" href="#-30"></a> <a href="https://www.dhndzwxj.top/3276806131.html#61-%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD"></a>6.1 主题下载</h3>
<p>这是从大神的github仓库里把主题克隆到我们的博客网站目录<code>blog/themes/butterfly</code>下：</p>
<pre class="line-numbers language-none"><code class="language-none">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个主题的模板引擎为<code>pug</code>格式的文件，因此需要安装对应的支持程序：(至于模板引擎文件是啥，可参考后面——不知道也无所谓)</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-renderer-pug hexo-renderer-stylus --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里我经常会遇到一个问题：我的错误是 Cannot GET /，因此在public目录下寻找<code>index.html</code>是否存在。如果不存在，执行下面代码对其进行修复：</p>
<pre class="line-numbers language-none"><code class="language-none">npm audit fix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看是否少了什么组件，通过<code>cnpm install hexo-xxx-xxx</code> 安装即可。</p>
<p>然后在博客站点配置文件<code>blog/_config.yml</code>中更改：</p>
<pre class="line-numbers language-none"><code class="language-none">theme: butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注意，themes后面的参数，要和主题所在的文件夹名一致！</p>
<h3 id="-31"><a class="markdownIt-Anchor" href="#-31"></a> <a href="https://www.dhndzwxj.top/3276806131.html#61a-%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9B%B4%E6%96%B0"></a>6.1a 网站主题的更新</h3>
<p>此部分仅对于已经配置好的用户参考。如果您是第一次使用本主题，请直接前往<a href="https://www.dhndzwxj.top/3276806131.html#6-2">6.2</a>。</p>
<p>由于大多数主题都会定期更新，但是把自己原来的个性化修改内容重新在新版本上体现，又会浪费大量时间。这里总结一个相对节约时间、清晰明了的办法：利用github自带的compare功能。</p>
<p>首先fork更新的主题仓库，这样自己的github上就有了这个新的repository，然后把这个仓库clone到本地，然后命名为<code>Jerryc227</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">git clone git@github.com:dhndzwxj&#x2F;hexo-theme-butterfly.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后将这个本地文件夹与原作者的仓库建立联系</p>
<pre class="line-numbers language-none"><code class="language-none">git remote add upstream git@github.com:jerryc127&#x2F;hexo-theme-butterfly.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>接下来将自己的旧版本的主题文件拷贝并替换掉<code>Jerryc227</code>的原有内容，然后“三连”。</p>
<pre class="line-numbers language-none"><code class="language-none">git add .
git commit -m &#39;主题更新&#39;
git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样自己fork掉的仓库的内容就成功更新了。最后将自己本地的修改同原作者的仓库做比较：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688871.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688871.png" alt="" /></a></p>
<p>6-2</p>
<h3 id="-32"><a class="markdownIt-Anchor" href="#-32"></a> <a href="https://www.dhndzwxj.top/3276806131.html#62-%E7%BD%91%E7%AB%99%E8%83%8C%E6%99%AF"></a>6.2 网站背景</h3>
<p>默认显示白色，可设置图片或者颜色。</p>
<p>修改主题配置文件<code>blog/themes/butterfly/_config.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">#圖片格式 url(http:&#x2F;&#x2F;xxxxxx.com&#x2F;xxx.jpg)
#顏色（HEX值&#x2F;RGB值&#x2F;顔色單詞&#x2F;漸變色)
#留空 不顯示背景
background:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>留意: 如果你的网站根目录不是<code>/</code>,使用本地图片时，需加上你的根目录。<br />
例如：网站是<code>https://yoursite.com/blog</code>,引用一张<code>img/xx.png</code>图片，则设置<code>background</code>为 <code>url(/blog/img/xx.png)</code></p>
<h3 id="-33"><a class="markdownIt-Anchor" href="#-33"></a> <a href="https://www.dhndzwxj.top/3276806131.html#63-%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1"></a>6.3 字数统计</h3>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-wordcount --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改主题配置文件：</p>
<pre class="line-numbers language-none"><code class="language-none">wordcount:
  enable: true
  post_wordcount: true
  min2read: true
  total_wordcount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如需调整右侧卡片网站信息内项目的数据，在文件<code>/butterfly/layout/includes/widgets/card_webinfo.pug</code>中操作。</p>
<h3 id="-34"><a class="markdownIt-Anchor" href="#-34"></a> <a href="https://www.dhndzwxj.top/3276806131.html#63a-%E6%96%87%E7%AB%A0meta%E4%BF%A1%E6%81%AF"></a>6.3a 文章meta信息</h3>
<pre class="line-numbers language-none"><code class="language-none">post_meta:
  page: # Home Page
...
  post:
...
  tags: true # true or false 文章頁是否顯示標籤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我发现即使将主题配置文件中如下tags设置为true，依然没有显示标签。检查后发现是缺少对应代码，在大概38行的位置添加如下代码：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;- \blog\themes\butterfly\layout\includes\header\post-info.pug
if (theme.post_meta.post.tags &amp;&amp; page.tags.data.length &gt; 0)
  span.post-meta-tags
    span.post-meta-separator |
    each item, index in page.tags.data
      i.fas.fa-tag
      a(href&#x3D;url_for(item.path)).article-meta__tags #[&#x3D;item.name]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意该<code>if</code>要和前面的<code>if (theme.post_meta.post.categories &amp;&amp; page.categories.data.length &gt; 0)</code>缩进相同。</p>
<blockquote>
<p>小结：各个特殊符号的含义</p>
<ul>
<li><code>#</code>：例如<code>#post-meta</code>，生成的HTML代码为<code>&lt;div id='post-meta'&gt;</code>。（不过会另起一行）</li>
<li><code>.</code>：例如<code>.meta-firstline</code>，生成的HTML代码为<code>&lt;div class='meta-firstline'&gt;</code>。</li>
<li><code>.</code>：<code>span.post-meta-author=page.author</code>，生成的HTML代码为<code>&lt;span class='post-meta-author'&gt;page.author代表的内容&lt;/span&gt;</code>。</li>
</ul>
</blockquote>
<p>若要把第一行的meta信息整体修改，下面是现成的代码[大概第8行]（对于author，我在其网页标签添加了id，<code>&lt;div id=&quot;post-meta-author&quot;&gt;</code>）</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;- \blog\themes\butterfly\layout\includes\header\post-info.pug
  .meta-firstline
    if (theme.post_meta.post.author)
        i.fa-solid.fa-user
        span.post-meta-author&#x3D;page.author
    if (theme.post_meta.post.date_type)
      span.post-meta-date
        if (theme.post_meta.post.author)
          span.post-meta-separator |
        if (theme.post_meta.post.date_type &#x3D;&#x3D;&#x3D; &#39;both&#39;)
          i.far.fa-calendar-alt.fa-fw.post-meta-icon
          span.post-meta-label&#x3D; _p(&#39;post.created&#39;)
          time.post-meta-date-created(datetime&#x3D;date_xml(page.date) title&#x3D;_p(&#39;post.created&#39;) + &#39; &#39; + full_date(page.date))&#x3D;date(page.date, config.date_format)
          span.post-meta-separator |
          i.fas.fa-history.fa-fw.post-meta-icon
          span.post-meta-label&#x3D; _p(&#39;post.updated&#39;)
          time.post-meta-date-updated(datetime&#x3D;date_xml(page.updated) title&#x3D;_p(&#39;post.updated&#39;) + &#39; &#39; + full_date(page.updated))&#x3D;date(page.updated, config.date_format)
        else
          - let data_type_update &#x3D; theme.post_meta.post.date_type &#x3D;&#x3D;&#x3D; &#39;updated&#39;
          - let date_type &#x3D; data_type_update ? &#39;updated&#39; : &#39;date&#39;
          - let date_icon &#x3D; data_type_update ? &#39;fas fa-history&#39; :&#39;far fa-calendar-alt&#39;
          - let date_title &#x3D; data_type_update ? _p(&#39;post.updated&#39;) : _p(&#39;post.created&#39;)
          i.fa-fw.post-meta-icon(class&#x3D;date_icon)
          span.post-meta-label&#x3D; date_title
          time(datetime&#x3D;date_xml(page[date_type]) title&#x3D;date_title + &#39; &#39; + full_date(page[date_type]))&#x3D;date(page[date_type], config.date_format)    
    if (theme.post_meta.post.categories &amp;&amp; page.categories.data.length &gt; 0)
      span.post-meta-categories
        if (theme.post_meta.post.date_type)
          span.post-meta-separator |
        each item, index in page.categories.data
          i.fas.fa-inbox.fa-fw.post-meta-icon
          a(href&#x3D;url_for(item.path)).post-meta-categories #[&#x3D;item.name]
          if (index &lt; page.categories.data.length - 1)
            i.fas.fa-angle-right.post-meta-separator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也在网站首页修改展示文章的meta[大概在第26行添加]</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;- \blog\themes\butterfly\layout\includes\mixins\post-ui.pug
        if (theme.post_meta.page.author)
          span.post-meta-author
            i.fa-solid.fa-user
            span.post-meta-author&#x3D;article.author
            span.article-meta-separator |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-35"><a class="markdownIt-Anchor" href="#-35"></a> <a href="https://www.dhndzwxj.top/3276806131.html#64-%E4%B8%BB%E9%A1%B5%E5%92%8C%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2%E4%BE%A7%E8%BE%B9%E6%A0%8F"></a>6.4 主页和文章页面侧边栏</h3>
<p>需要在文件<code>/butterfly/layout/includes/widgets/index.pug</code>中操作。我这里是去掉了文章页面的“最新文章”部分，于是我在读懂这段代码后，把“最新文章”和“广告”对应的两条代码删除了。此外，我也想让头像成为<code>sticky_layout</code>（随着网页滑动跟着走的效果），我的代码改成了下面的样子：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;- &#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;widgets&#x2F;index.pug

#aside-content.aside-content
  &#x2F;&#x2F;- post
  if is_post()
    &#x2F;&#x2F;- 如果是文章页面，下面对应的else应该指的是主页面
    - const tocStyle &#x3D; page.toc_style_simple
    - const tocStyleVal &#x3D; tocStyle &#x3D;&#x3D;&#x3D; true || tocStyle &#x3D;&#x3D;&#x3D; false ? tocStyle : theme.toc.style_simple
    if showToc &amp;&amp; tocStyleVal
      .sticky_layout
        include .&#x2F;card_post_toc.pug
    else
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_author&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_announcement&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_top_self&#39;, &#123;&#125;, &#123;cache: true&#125;)
      .sticky_layout
        if showToc
          include .&#x2F;card_post_toc.pug
        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_recent_post&#39;, &#123;&#125;, &#123;cache: true&#125;)
        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_ad&#39;, &#123;&#125;, &#123;cache: true&#125;)
  else
    &#x2F;&#x2F;- page
    !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_author&#39;, &#123;&#125;, &#123;cache: true&#125;)
    !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_announcement&#39;, &#123;&#125;, &#123;cache: true&#125;)
    !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_top_self&#39;, &#123;&#125;, &#123;cache: true&#125;)      

    .sticky_layout
      if showToc
        include .&#x2F;card_post_toc.pug
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_recent_post&#39;, &#123;&#125;, &#123;cache: true&#125;)
      &#x2F;&#x2F;- !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_ad&#39;, &#123;&#125;, &#123;cache: true&#125;)
      &#x2F;&#x2F;- !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_newest_comment&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_categories&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_tags&#39;, &#123;&#125;, &#123;cache: true&#125;)
      &#x2F;&#x2F;- !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_archives&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_webinfo&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_bottom_self&#39;, &#123;&#125;, &#123;cache: true&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>个人觉得<code>card_author</code>头像下面“文章”“标签”“分类”三个栏目没啥用，就把这个文件<code>butterfly/layout/includes/widget/card_author.pug</code>中的这些代码删掉，然后就有简洁的头像了~</p>
<pre class="line-numbers language-none"><code class="language-none">.card-info-data.site-data.is-center
  a(href&#x3D;url_for(config.archive_dir) + &#39;&#x2F;&#39;)
    .headline&#x3D; _p(&#39;aside.articles&#39;)
    .length-num&#x3D; site.posts.length
  a(href&#x3D;url_for(config.tag_dir) + &#39;&#x2F;&#39;)
    .headline&#x3D; _p(&#39;aside.tags&#39;)
    .length-num&#x3D; site.tags.length
  a(href&#x3D;url_for(config.category_dir) + &#39;&#x2F;&#39;)
    .headline&#x3D; _p(&#39;aside.categories&#39;) 
    .length-num&#x3D; site.categories.length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此外，主页侧边栏“最新文章”、归档以及主页文章简介面上有图片，如果不想要这些图片，需要在主题配置文件下面的部分进行修改：</p>
<pre class="line-numbers language-none"><code class="language-none">cover:
  # display the cover or not (是否顯示文章封面)
  index_enable: false
  aside_enable: false
  archives_enable: false
  # the position of cover in home page (封面顯示的位置)
  # left&#x2F;right&#x2F;both
  position: both
  # When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)
  default_cover: &#x2F;private_img&#x2F;banner2.gif
    # - https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;01&#x2F;gkihqEjXxJ5UZ1C.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>文章加密功能的设置，在文件<code>butterfly/layout/includes/widget/card_post_toc.pug</code>中进行编辑。</p>
<h3 id="-36"><a class="markdownIt-Anchor" href="#-36"></a> <a href="https://www.dhndzwxj.top/3276806131.html#65-%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6"></a>6.5 文章置顶</h3>
<p>【推荐】<code>hexo-generator-index</code>从 2.0.0 开始，已经支持文章置顶功能。你可以直接在文章的<code>front-matter</code>区域里添加<code>sticky: 1</code>属性来把这篇文章置顶。<strong>数值越大，置顶的优先级越大</strong>。</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: &#123;&#123; title &#125;&#125;
author: 揭晓
categories:
  - null
  - null
  - null
tags:
  - null
  - null
  - null
mathjax:
abstract: 这里有东西被加密了，需要输入密码查看哦。
message: 您好，这里需要密码。
wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。
wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。
typora-root-url: images
abbrlink: 
date: &#123;&#123; date &#125;&#125;
sticky:
description:
password:
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-37"><a class="markdownIt-Anchor" href="#-37"></a> <a href="https://www.dhndzwxj.top/3276806131.html#66-%E7%9B%AE%E5%BD%95%E6%8A%98%E5%8F%A0"></a>6.6 目录折叠</h3>
<p>由于我个人的目录比较大，完全展开三级目录的话，右边栏就完全被目录铺满了。<code>butterfly</code>主题提供了目录可折叠的选项，只需要在主题配置文件<code>/butterfly/config.yml</code>设置：</p>
<pre class="line-numbers language-none"><code class="language-none">card_categories: 
  enable: true
  limit: 0 # if set 0 will show all
  expand: true # none&#x2F;true&#x2F;false
  sort_order: # Don&#39;t modify the setting unless you know how it works<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-38"><a class="markdownIt-Anchor" href="#-38"></a> <a href="https://www.dhndzwxj.top/3276806131.html#67-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2"></a>6.7 本地搜索</h3>
<h4 id="-39"><a class="markdownIt-Anchor" href="#-39"></a> <a href="https://www.dhndzwxj.top/3276806131.html#671-%E4%B8%BB%E9%A2%98v451%E5%8E%9F%E7%94%9F%E5%8A%9F%E8%83%BD"></a>6.7.1 主题v4.5.1原生功能</h4>
<p>插件安装</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改站点配置文件<code>_config.yml</code>, 添加以下内容</p>
<pre class="line-numbers language-none"><code class="language-none">search:
  path: search.xml
  field: post #默认post，将覆盖博客所有帖子；page，只覆盖博客所有页面；all所有
  content: true #若为false，则设置不搜索文章内容，只根据搜索标题
  format: html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主题配置文件<code>/blog/themes/butterfly/_config.yml</code>如下修改：</p>
<pre class="line-numbers language-none"><code class="language-none"># Local search
local_search:
  enable: true
  preload: true #預加載，開啟後，進入網頁後會自動加載搜索文件。關閉時，只有點擊搜索按鈕後，才會加載搜索文件
  CDN:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="-40"><a class="markdownIt-Anchor" href="#-40"></a> <a href="https://www.dhndzwxj.top/3276806131.html#672-%E5%8E%9F%E7%94%9F%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E8%A7%A3%E8%AF%BB"></a>6.7.2 原生搜索功能解读</h4>
<p>需要编辑的文件为主题下的：<code>themes/butterfly/source/js/search/local-search.js</code>。</p>
<p><a href="https://www.dhndzwxj.top/1830845253.html#js_study">基于butterfly下local-search文档解读的js学习笔记</a>。</p>
<p>通过阅读这个文件，我发现决定了<strong>搜索结果的输出内容</strong>的代码为：[大概在166行]</p>
<pre class="line-numbers language-none"><code class="language-none">if (dataContent !&#x3D;&#x3D; &#39;&#39;) &#123;
                str +&#x3D; &#39;&lt;p class&#x3D;&quot;search-result&quot;&gt;&#39; + pre + matchContent + post + &#39;&lt;&#x2F;p&gt;&#39;
              &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果要自定义搜索结果样式（不推荐修改，因为加载速度会变慢）最关键的一行代码为[大概在153行]：</p>
<pre class="line-numbers language-none"><code class="language-none">keywords.forEach(keyword &#x3D;&gt; &#123;
    if(keyword[0]&#x3D;&#x3D;&#x3D;&#39;#&#39; &amp;&amp; keyword.length&gt;1)&#123;
        keyword &#x3D; keyword.substring(1)
      &#125; 
      let regexStr &#x3D; keyword
      const specialRegex &#x3D; &#x2F;[^\w\s]+&#x2F; &#x2F;&#x2F; match special characters
      if (keyword.length &#x3D;&#x3D;&#x3D; 1 &amp;&amp; specialRegex.test(keyword)) &#123;
        regexStr &#x3D; &#96;\\$&#123;keyword&#125;&#96;
      &#125;
  matchContent &#x3D; matchContent.replaceAll(keyword, &#39;&lt;span class&#x3D;&quot;search-keyword&quot;&gt;&#39; + keyword + &#39;&lt;&#x2F;span&gt;&#39;)
  dataTitle &#x3D; dataTitle.replaceAll(keyword, &#39;&lt;span class&#x3D;&quot;search-keyword&quot;&gt;&#39; + keyword + &#39;&lt;&#x2F;span&gt;&#39;)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由上述两段代码此可见，最关键的变量是<code>matchContent</code>（正文中包含关键词的部分），它是怎么定义的？[大概在151行]</p>
<pre class="line-numbers language-none"><code class="language-none">let matchContent &#x3D; dataContent.substring(start, end)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>它由<code>dataContent</code>定义【范围是从start到end】，<code>dataContent</code>又是怎么定义的？</p>
<p>✓ [大概在第102行]</p>
<pre class="line-numbers language-none"><code class="language-none">let dataTitle &#x3D; data.title ? data.title.trim().toLowerCase() : &#39;&#39;  &#x2F;&#x2F;获取标题
const dataContent &#x3D; data.content ? data.content.trim().replace(&#x2F;&lt;[^&gt;]+&gt;&#x2F;g, &#39;&#39;).toLowerCase() : &#39;&#39; &#x2F;&#x2F;获取正文,其中【.replace(&#x2F;&lt;[^&gt;]+&gt;&#x2F;g, &#39;&#39;)】去掉了网页标签（正则表达式的意思是去掉&#39;&lt;&gt;&#39;中的内容）
const dataUrl &#x3D; data.url.startsWith(&#39;&#x2F;&#39;) ? data.url : GLOBAL_CONFIG.root + data.url &#x2F;&#x2F;获取链接
+ let dataTags &#x3D; data.tags ? data.tags.trim().toLowerCase() : &#39;&#39;  &#x2F;&#x2F;获取标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里定义了文章的标题<code>dataTitle</code>、正文内容<code>dataContent</code>、文章链接<code>dataUrl</code>。这三项内容都来自<code>data</code>变量的方法。而<code>data</code>的方法是怎么定义的？</p>
<p>✓ 在data方法里增加一个tags方法[大概在第59行]</p>
<pre class="line-numbers language-none"><code class="language-none">      const res &#x3D; await response.text()
      const t &#x3D; await new window.DOMParser().parseFromString(res, &#39;text&#x2F;xml&#39;)
      const a &#x3D; await t
data &#x3D; [...a.querySelectorAll(&#39;entry&#39;)].map(item &#x3D;&gt;&#123;
        return &#123;
          title: item.querySelector(&#39;title&#39;).textContent,
          content: item.querySelector(&#39;content&#39;) &amp;&amp; item.querySelector(&#39;content&#39;).textContent,
          url: item.querySelector(&#39;url&#39;).textContent,
+         tags: item.querySelector(&#39;tags&#39;) &amp;&amp; item.querySelector(&#39;tags&#39;).textContent
        &#125;
      &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>back_selec</p>
<p>通过读<code>data</code>定义的代码，我们发现<code>querySelector</code>很关键！深入学习可以参考<a href="https://www.dhndzwxj.top/1830845253.html#querySelector">js学习笔记的相关内容</a>。</p>
<p>其实对于data变量的各个方法，其定义的根据来自插件<code>hexo-generator-search</code>生成的模板文件<code>/hexo-generator-search/templates/search.xml</code>。打开这个<code>search.xml</code>文件，我们就能看到<code>entry</code> <code>title</code> <code>url</code> <code>tags</code> <code>tag</code>这些奇怪的css选择器了。</p>
<h4 id="-41"><a class="markdownIt-Anchor" href="#-41"></a> <a href="https://www.dhndzwxj.top/3276806131.html#673-%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%98%BE%E7%A4%BA%E6%A0%87%E7%AD%BE"></a>6.7.3 搜索结果对话框显示标签</h4>
<p>上面的<code>tags</code>行是参照<code>content</code>行添加的（url行末尾要加一个英文逗号，否则会报错）。因为一篇post的front-matter不一定包含<code>tags</code>和<code>content</code>，因此需要做一下是否有tags的判断（<code>&amp;&amp;</code>），否则会出错。</p>
<p>原版代码：</p>
<pre class="line-numbers language-none"><code class="language-none">if (dataContent !&#x3D;&#x3D; &#39;&#39;) &#123;
  str +&#x3D; &#39;&lt;p class&#x3D;&quot;search-result&quot;&gt;&#39; + pre + matchContent + post + &#39;&lt;&#x2F;p&gt;&#39;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>✓ 原版生成的搜索结果只显示标题和正文节选，没有标签tags，这里的魔改就是增加了这个内容。[大概在第191行]</p>
<p>【这部分是反复修改的部分，也是标签搜索功能实现最为关键的地方】</p>
<pre class="line-numbers language-none"><code class="language-none">if (dataContent !&#x3D;&#x3D; &#39;&#39;) &#123;
&#x2F;&#x2F;- 自定义开始：生成的搜索结果框里，加入显示tags
let splitT &#x3D; &#39;&#39; 
&#x2F;&#x2F;- 第一步：下面是去掉dataTags里非汉字和字母（数字）的部分，然后用两个汉字分号&#39;；；&#39;把各个tags分隔开（保存在spliT变量里）
let space &#x3D; 1
for (let i&#x3D;0;i&lt;dataTags.length;i++)&#123;
  if (&#x2F;\S&#x2F;.test(dataTags[i]))&#123; 
    &#x2F;&#x2F; \S 匹配Unicode非空白
    space &#x3D; 0
    splitT &#x3D; splitT.concat(dataTags[i])
  &#125;else&#123;
    if(space&#x3D;&#x3D;&#x3D;0)&#123;
      splitT &#x3D; splitT + &#39;；；&#39; 
      space &#x3D; 1
    &#125; 
  &#125;          
&#125;
&#x2F;&#x2F;去掉splitT末尾的双分号；；
for(let i&#x3D;0;i&lt;splitT.length;i++)&#123;
  let l &#x3D; splitT.length
  if(splitT[l-1]&#x3D;&#x3D;&#39;；&#39; &amp;&amp; l&gt;1)&#123;
    splitT &#x3D; splitT.substring(0,l-2)
  &#125;
&#125;

&#x2F;&#x2F;- 第二步： highlight all keywords
keywords.forEach(keyword &#x3D;&gt; &#123;
  if(keyword[0] &#x3D;&#x3D;&#x3D; &#39;#&#39; &amp; keyword.length&gt;1)&#123;
    keyword &#x3D; keyword.substring(1) &#x2F;&#x2F; 如果第一个字符为#且长度大于1，将关键词第一个#去掉后再匹配
  &#125;     
  splitT &#x3D; splitT.replace(new RegExp(keyword,&quot;gi&quot;),&#39;&lt;span class&#x3D;&quot;search-keyword&quot;&gt;&#39; + keyword + &#39;&lt;&#x2F;span&gt;&#39;)
&#125;) 

&#x2F;&#x2F;- 第三步：由于第一步产生的为纯文本且包括双分号，此步骤去掉分号且加上fas fa-tag、控制字体（保存在splitTags里）
let splitTags &#x3D; &#39;&lt;br&#x2F;&gt;&lt;i class&#x3D;&quot;fas fa-tag&quot;&gt;&lt;span style&#x3D;&quot;font-family:times&quot;&gt;&#39;
space &#x3D; 1
for(let i&#x3D;0;i&lt;splitT.length;i++)&#123;
  if(splitT[i] !&#x3D;&#x3D; &#39;；&#39;)&#123;
    space &#x3D; 0
    splitTags &#x3D; splitTags.concat(splitT[i])
  &#125;else&#123;
    if(space&#x3D;&#x3D;&#x3D;0)&#123;
      splitTags &#x3D; splitTags + &#39;&lt;&#x2F;span&gt;&lt;&#x2F;i&gt;&amp;nbsp &amp;nbsp&lt;i class&#x3D;&quot;fas fa-tag&quot;&gt;&lt;span style&#x3D;&quot;font-family:times&quot;&gt;&#39;
      space &#x3D; 1
    &#125;
  &#125;         
&#125;
splitTags &#x3D; splitTags + &#39;&lt;&#x2F;span&gt;&lt;&#x2F;i&gt;&#39;

post &#x3D; &#x2F;S&#x2F;.test(splitT) ?  post + splitTags : post  
&#x2F;&#x2F;- 自定义结束

  str +&#x3D; &#39;&lt;p class&#x3D;&quot;search-result&quot;&gt;&#39; + pre + matchContent + post + &#39;&lt;&#x2F;p&gt;&#39;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688900.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688900.png" alt="" /></a></p>
<h4 id="-42"><a class="markdownIt-Anchor" href="#-42"></a> <a href="https://www.dhndzwxj.top/3276806131.html#674-%E6%8C%89%E7%85%A7%E6%A0%87%E7%AD%BE%E6%90%9C%E7%B4%A2"></a>6.7.4 按照标签搜索</h4>
<blockquote>
<p>【最终目标】搜索框输入的关键词，如果其第一个字符是<code>#</code>且<strong>关键词长度大于1</strong>，就进行<strong>标签匹配</strong>；否则和之前的搜索功能一样。</p>
<p>【准备工作】</p>
<p>需要编辑的文件为主题下的：<code>themes/butterfly/source/js/search/local-search.js</code>。</p>
<p>hexo-generator-search插件里负责搜索的js文件为<code>/hexo-generator-search/lib/json_generaotr.js</code>。该文件里面提供了获取帖子（posts）和页面（pages）标题（title）、内容（content）、标签（tags）、目录（categories）……，确实没有获取author的方法。不要随便添加，因为还要和<code>/hexo-generator-search/templates/search.xml</code>对应上！</p>
</blockquote>
<p>先读一下butterfly主题local-search的代码逻辑！大致分为以下几个步骤：</p>
<p>①搜索功能从大概96行<code>data.forEach(data =&gt; &#123;</code>开始。foreach()是一个遍历函数，用来遍历所有的帖子。遍历过程分为两个子步骤：第一，先看遍历的帖子的标题、正文、标签（tags是我自己加的）是否包含关键词，如果包含令isMatch=true,否则isMatich=false;【大概107-128行】第二，对于isMatch=true的帖子，在搜索框显示其内容【大概131-201行】。</p>
<p>②我的目的是，搜索框输入的关键词，如果其第一个字符是<code>#</code>且<strong>关键词长度大于1</strong>，就进行<strong>标签匹配</strong>；否则和之前的搜索功能一样。</p>
<p>③为了匹配标签，需要在<code>data.forEach(data =&gt; &#123;</code>部分新定义2个变量。[大概103行]</p>
<pre class="line-numbers language-none"><code class="language-none">let dataTags &#x3D; data.tags ? data.tags.trim().toLowerCase() : &#39;&#39;  &#x2F;&#x2F;获取标签
let indexTag &#x3D; -1&#x2F;&#x2F;- +++添加标签定位变量
let l_keywords &#x3D; keywords.toString().split(&#39;&#39;).length &#x2F;&#x2F;- +++获取搜索关键词的长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>以及给data增加了一个tags方法：【前面已添加】</p>
<pre class="line-numbers language-none"><code class="language-none">data &#x3D; [...a.querySelectorAll(&#39;entry&#39;)].map(item &#x3D;&gt;&#123;
        return &#123;
          title: item.querySelector(&#39;title&#39;).textContent,
          content: item.querySelector(&#39;content&#39;) &amp;&amp; item.querySelector(&#39;content&#39;).textContent,
          url: item.querySelector(&#39;url&#39;).textContent,
+         tags: item.querySelector(&#39;tags&#39;) &amp;&amp; item.querySelector(&#39;tags&#39;).textContent
        &#125;
      &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要是对下面这点代码进行魔改：【大概111行】</p>
<pre class="line-numbers language-none"><code class="language-none">keywords.forEach((keyword, i) &#x3D;&gt; &#123;
  indexTitle &#x3D; dataTitle.indexOf(keyword)
  indexContent &#x3D; dataContent.indexOf(keyword)
  if (indexTitle &lt; 0 &amp;&amp; indexContent &lt; 0) &#123;
    isMatch &#x3D; false
  &#125; else &#123;
    if (indexContent &lt; 0) &#123;
      indexContent &#x3D; 0
    &#125;
    if (i &#x3D;&#x3D;&#x3D; 0) &#123;
      firstOccur &#x3D; indexContent
    &#125;
  &#125;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>魔改之后是下面这个样子：</p>
<pre class="line-numbers language-none"><code class="language-none">if (dataTitle !&#x3D;&#x3D; &#39;&#39; || dataContent !&#x3D;&#x3D; &#39;&#39;) &#123;
  keywords.forEach((keyword, i) &#x3D;&gt; &#123;
    if (keywords[0][0] &#x3D;&#x3D;&#x3D; &#39;#&#39; &amp;&amp; l_keywords &gt; 1 &amp;&amp; keywords[0][1] !&#x3D;&#x3D; &#39;#&#39;)&#123; &#x2F;&#x2F;- 最后一个判断条件修复了正文中&#39;##&#39;无法搜索的问题
        &#x2F;&#x2F;如果关键词第一个字符是#且长度大于1，那么进行tag搜索
        keyword &#x3D; keyword.substring(1) &#x2F;&#x2F; 将关键词第一个#去掉后再匹配
        &#x2F;&#x2F;- 定义dataTags0的意义：去掉tags里面的网页标签代码，否则会把网页标签里面的代码（非正文内容）也匹配
        let dataTags0 &#x3D; &#39;&#39;
        for(let i&#x3D;0; i&lt;dataTags.length;i++)&#123;
          dataTags0 &#x3D; dataTags0.concat(dataTags[i].replace(&#x2F;&lt;[^&gt;]+&gt;&#x2F;g, &#39;&#39;))
        &#125;
        dataTags0 &#x3D; dataTags0.trim().toLowerCase()
        indexTag &#x3D; dataTags0.indexOf(keyword)
        if ( indexTag &lt; 0 )&#123;
          isMatch &#x3D; false
        &#125;else&#123;
          firstOccur &#x3D; 0
        &#125;
      &#125;else &#123;
        indexTitle &#x3D; dataTitle.indexOf(keyword)
        indexContent &#x3D; dataContent.indexOf(keyword)
        if (indexTitle &lt; 0 &amp;&amp; indexContent &lt; 0) &#123;
          isMatch &#x3D; false
        &#125; else &#123;
          if (indexContent &lt; 0) &#123;
            indexContent &#x3D; 0
          &#125;
          if (i &#x3D;&#x3D;&#x3D; 0) &#123;
            firstOccur &#x3D; indexContent
          &#125;
        &#125;
      &#125;
  &#125;)
&#125; else &#123;
  isMatch &#x3D; false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-43"><a class="markdownIt-Anchor" href="#-43"></a> <a href="https://www.dhndzwxj.top/3276806131.html#67a-3-hexo%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2"></a>6.7a 3-hexo主题的本地搜索</h3>
<p>主题项目地址：<a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a>。</p>
<p>搜索效果:</p>
<table><tbody><tr><td><a href="博客搭建日志/assets/16783555689054.gif" data-fancybox="gallery" data-caption="" data-thumb="博客搭建日志/assets/16783555689054.gif"><img src="博客搭建日志/assets/16783555689054.gif" width="300px"></a><p>通过作者搜索</p></td><td><a href="博客搭建日志/assets/16783555689065.gif" data-fancybox="gallery" data-caption="" data-thumb="博客搭建日志/assets/16783555689065.gif"><img src="博客搭建日志/assets/16783555689065.gif" width="300px"></a><p>通过标签搜索</p></td></tr></tbody></table>
<p>实现搜索功能的关键代码：</p>
<p>ejs和js代码</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;nav id&#x3D;&quot;title-list-nav&quot;&gt;
    &lt;% site.posts.forEach(function(post, i)&#123;  %&gt;
    &lt;% if (post.hidden &#x3D;&#x3D;&#x3D; true) &#123; return true &#125; %&gt;
    &lt;a &lt;% if(post.top)&#123;%&gt;id&#x3D;&quot;top&quot;&lt;%&#125;%&gt; class&#x3D;&quot;&lt;%&#x3D; __(&#39;all_articles&#39;) %&gt; &lt;% post.categories.forEach(function(category, i)&#123; %&gt;&lt;%&#x3D;category.name%&gt; &lt;% &#125;) %&gt;&quot;
       href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot;
       data-tag&#x3D;&quot;&lt;% post.tags.forEach(function(tag, i)&#123; %&gt;&lt;%&#x3D;tag.name%&gt;&lt;% if (i+1&lt;post.tags.length)&#123;%&gt;,&lt;%&#125;&#125;)%&gt;&quot;
       data-author&#x3D;&quot;&lt;% if(theme.author &amp;&amp; theme.author.on&#x3D;&#x3D;true &amp;&amp; post.author) &#123;%&gt;&lt;%&#x3D;post.author %&gt;&lt;%&#125;%&gt;&quot; &gt;
        &lt;span class&#x3D;&quot;post-title&quot; title&#x3D;&quot;&lt;%&#x3D;post.title %&gt;&quot;&gt;&lt;%&#x3D;post.title %&gt;&lt;&#x2F;span&gt;
        &lt;span class&#x3D;&quot;post-date&quot; title&#x3D;&quot;&lt;%&#x3D; date(post.date, &#39;YYYY-MM-DD HH:mm:ss&#39;)%&gt;&quot;&gt;&lt;%&#x3D; date(post.date, &#39;YYYY&#x2F;MM&#x2F;DD&#39;) %&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;a&gt;
    &lt;% &#125;) %&gt;
    &lt;div id&#x3D;&quot;no-item-tips&quot;&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;nav&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; &#x2F;source&#x2F;js&#x2F;script.js
$searchInput.on(&quot;input&quot;, function (e) &#123;
    inputChange();
&#125;);
$searchInput.on(&quot;change&quot;, function (e) &#123;
    inputChange();
&#125;);
&#x2F;*根据搜索条件，过滤文章列表*&#x2F;
function inputChange() &#123;
    var i;
    setTimeout(function () &#123;
        $searchInput.focus()
    &#125;, 50)
    var val &#x3D; $searchInput.val().trim();
    $(&#39;#search-panel&#39;).show().siblings().hide()
    $outlineList.hide();
    if ($(&#39;#local-search-result&#39;).length&gt;0) &#123;
        if (val.length&gt;3 &amp;&amp; (val.substr(0,3).toLowerCase() &#x3D;&#x3D;&#x3D; &#39;in:&#39; || val.substr(0,3).toLowerCase()&#x3D;&#x3D;&#x3D;&#39;in：&#39;)) &#123;
            $outlineList.hide();
            $(&#39;#title-list-nav&#39;).hide()
            $(&#39;#local-search-result&#39;).show();
            searchAll(val.substr(3))
        &#125; else &#123;
            $(&#39;#title-list-nav&#39;).show();
            $(&#39;#local-search-result&#39;).hide();
        &#125;
    &#125; else &#123;
        $outlineList.hide();
        $(&#39;#title-list-nav&#39;).show();
    &#125;
    var categories &#x3D; $(&quot;.nav-left ul li&gt;div.active&quot;).data(&#39;rel&#39;).split(&#39;&lt;---&gt;&#39;)
    &#x2F;&#x2F; 处理特殊字符
    for (i &#x3D; 0; i &lt; categories.length; i++) &#123;
        categories[i] &#x3D;  categories[i]
          .replace(&#x2F;(?&#x3D;\&#x2F;|\\|#|\(|\)|\[|\]|\.)&#x2F;g, &quot;\\&quot;)
    &#125;
    var activeTitle &#x3D; categories.join(&#39;.&#39;);
    var searchType &#x3D; &#39;&#39;;
    var containType &#x3D; &#39;&#39;;
    $(&#39;#no-item-tips&#39;).hide()
    $(&quot;.nav-right nav a .post-title .search-keyword&quot;).each(function () &#123;
        $(this).parent().html($(this).parent().attr(&#39;title&#39;))
    &#125;)
    if (val &#x3D;&#x3D;&#x3D; &quot;&quot;) &#123;
        $(&quot;.nav-right nav a&quot;).css(&quot;display&quot;, &quot;none&quot;);
        $(&quot;.nav-right nav a.&quot; + activeTitle).css(&quot;display&quot;, &quot;block&quot;);
    &#125; else if (val.substr(0, 1) &#x3D;&#x3D;&#x3D; &quot;#&quot;) &#123;
        searchType &#x3D; &#39;标签&#39;
        containType &#x3D; &#39;为&#39;
        if (val.substr(1).length !&#x3D;&#x3D; 0) &#123;
            $(&quot;.nav-right nav a&quot;).css(&quot;display&quot;, &quot;none&quot;);
            $(&quot;.nav-right nav&quot;).find(&quot;a.&quot; + activeTitle + &quot;:contains_tag(&#39;&quot; + val.substr(1) + &quot;&#39;)&quot;).css(&quot;display&quot;, &quot;block&quot;);
        &#125;
    &#125; else if (val.substr(0, 1) &#x3D;&#x3D;&#x3D; &quot;@&quot;) &#123;
        searchType &#x3D; &#39;作者&#39;
        containType&#x3D; &#39;为&#39;
        if (val.substr(1).length !&#x3D;&#x3D; 0) &#123;
            $(&quot;.nav-right nav a&quot;).css(&quot;display&quot;, &quot;none&quot;);
            $(&quot;.nav-right nav&quot;).find(&quot;a.&quot; + activeTitle + &quot;:contains_author(&#39;&quot; + val.substr(1) + &quot;&#39;)&quot;).css(&quot;display&quot;, &quot;block&quot;);
        &#125;
    &#125; else &#123;
        searchType &#x3D; &#39;标题&#39;
        containType &#x3D; &#39;包含&#39;
        &#x2F;&#x2F; $(&quot;.nav-right nav a&quot;).css(&quot;display&quot;, &quot;none&quot;);
        $(&quot;.nav-right nav&quot;).find(&quot;a.&quot; + activeTitle + &quot;:&quot;+ ($(&#39;#search-panel &gt; .icon-case-sensitive&#39;).hasClass(&#39;active&#39;) ? &#39;containsSensitive&#39; : &#39;contains&#39;) + &quot;(&#39;&quot; + val + &quot;&#39;)&quot;).css(&quot;display&quot;, &quot;block&quot;);
        $(&quot;.nav-right nav a&quot;).each(function () &#123;
            var title &#x3D; $(this).children(&#39;.post-title&#39;).attr(&#39;title&#39;);
            for (i &#x3D; 0; i &lt; categories.length; i++) &#123;
                if (!$(this).hasClass(categories[i])) &#123;
                    $(this).css(&#39;display&#39;, &#39;none&#39;).children(&#39;.post-title&#39;).html(title)
                    return true;
                &#125;
            &#125;

            var caseSensitive &#x3D; $(&#39;#search-panel &gt; .icon-case-sensitive&#39;).hasClass(&#39;active&#39;);
            var vals &#x3D; (caseSensitive ? val : val.toUpperCase()).split(&#39;&#39;);
            var inputReg &#x3D; new RegExp(vals.join(&#39;[\\s\\S]*&#39;));
            if (inputReg.test(caseSensitive ? title : title.toUpperCase())) &#123;
                &#x2F;&#x2F; 给匹配到的字符添加高亮
                var nowPos &#x3D; 0;
                var titleHtml &#x3D; title.split(&#39;&#39;)
                var titleCase &#x3D; (caseSensitive ? title : title.toUpperCase()).split(&#39;&#39;)
                for (i &#x3D; 0; i &lt; vals.length; i++) &#123;
                    nowPos &#x3D; titleCase.indexOf(vals[i], nowPos)
                    titleHtml[nowPos] &#x3D; [&#39;&lt;span class&#x3D;&quot;search-keyword&quot;&gt;&#39;, titleHtml[nowPos], &#39;&lt;&#x2F;span&gt;&#39;].join(&#39;&#39;)
                &#125;
                $(this).css(&#39;display&#39;, &#39;block&#39;).children(&#39;.post-title&#39;).html(titleHtml.join(&#39;&#39;))
            &#125; else &#123;
                $(this).css(&#39;display&#39;, &#39;none&#39;).children(&#39;.post-title&#39;).html(title)
            &#125;
        &#125;)
    &#125;
    if (val !&#x3D;&#x3D; &#39;&#39;) &#123;
        $(&#39;#default-panel .icon-search&#39;).addClass(&#39;active&#39;)
        if (val &#x3D;&#x3D;&#x3D; &#39;in:&#39;) &#123;
            $(&#39;#no-item-tips&#39;).show().html(&#39;正在进行全局关键字搜索，请输入关键字&#39;);
        &#125; else if (!val.startsWith(&#39;in:&#39;) &amp;&amp; $(&quot;.nav-right nav a:visible&quot;).length &#x3D;&#x3D;&#x3D; 0) &#123;
            $(&#39;#no-item-tips&#39;).show().html(&#39;未在 &lt;span&gt;&#39; + activeTitle + &#39;&lt;&#x2F;span&gt; 分类中找到&#39;+ searchType + containType + &#39; &lt;span&gt;&#39; + val.replace(&#x2F;^[@|#]&#x2F;g,&#39;&#39;) + &#39;&lt;&#x2F;span&gt; 的文章&#39;);
        &#125;
    &#125; else &#123;
        $(&#39;#default-panel .icon-search&#39;).removeClass(&#39;active&#39;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要修改的文件为<code>butterfly/layout/index.pug</code>。改后的代码为：</p>
<pre class="line-numbers language-none"><code class="language-none">extends includes&#x2F;layout.pug

block content
  include .&#x2F;includes&#x2F;mixins&#x2F;post-ui.pug
  #recent-posts.recent-posts
    include includes&#x2F;pagination.pug
    +postUI
    include includes&#x2F;pagination.pug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如下：</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688928.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688928.jpg" alt="" /></a></p>
<h3 id="-44"><a class="markdownIt-Anchor" href="#-44"></a> <a href="https://www.dhndzwxj.top/3276806131.html#68a-tag-hide"></a>6.8a tag-hide</h3>
<p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字。格式为：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;% hideInline content,display,bg,color %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>content</code>: 文本内容</li>
<li><code>display</code>: 按钮显示的文字(可选)</li>
<li><code>bg</code>: 按鈕的背景颜色(可选)</li>
<li><code>color</code>: 按钮文字的颜色(可选)</li>
</ul>
<p>例子如下：</p>
<p>哪个英文字母最酷？ 因为西装裤(C装酷)</p>
<p>门里站着一个人? 闪</p>
<h3 id="-45"><a class="markdownIt-Anchor" href="#-45"></a> <a href="https://www.dhndzwxj.top/3276806131.html#69-%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9"></a>6.9 字体修改</h3>
<p>自定义 css并引入,不会的同学参考<a href="https://blog.leonus.cn/2022/custom.html">Hexo 博客添加自定义 css 和 js 文件</a>。</p>
<p>选择自己使用的字体，我用的是思源宋体。由于有些浏览器（如Safari和手机上的浏览器）不支持自己修改字体，这种时候就会使用系统的默认字体！</p>
<p>如何破局？需要在网页的头文件处<code>&lt;head&gt;&lt;/head&gt;</code>将需要设置的字体导入！具体的做法是在主题配置文件<code>themes/butterfly/_config.yml</code>作如下两个地方的修改：（这里是我的个性化修改，看官也可以根据自己的需要来设置，相关的字体在<a href="https://fonts.google.com/">谷歌Fonts API</a>处自行查找即可。）</p>
<pre class="line-numbers language-none"><code class="language-none"># Global font settings
# Don&#39;t modify the following settings unless you know how they work (非必要不要修改)
font:
  global-font-size: 16.5px
  code-font-size:
  font-family: Times, Noto Serif SC
  code-font-family:

# Font settings for the site title and site subtitle
# 左上角網站名字 主頁居中網站名字
blog_title_font:
  font_link:
  font-family: Ma Shan Zheng<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none"># Inject
# Insert the code to head (before &#39;&lt;&#x2F;head&gt;&#39; tag) and the bottom (before &#39;&lt;&#x2F;body&gt;&#39; tag)
# 插入代码到头部 &lt;&#x2F;head&gt; 之前 和 底部 &lt;&#x2F;body&gt; 之前
inject:
  head:
    - &lt;link rel&#x3D;&quot;preconnect&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&quot;&gt;
    - &lt;link rel&#x3D;&quot;preconnect&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.gstatic.com&quot; crossorigin&gt;
    - &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;fonts.loli.net&#x2F;css2?family&#x3D;Noto+Serif+SC:wght@400;500;700&amp;display&#x3D;swap&quot; rel&#x3D;&quot;stylesheet&quot;&gt; #思源宋体
    - &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;fonts.loli.net&#x2F;css2?family&#x3D;Ma+Shan+Zheng:wght@400;500;700&amp;display&#x3D;swap&quot; rel&#x3D;&quot;stylesheet&quot;&gt; #Mashanzheng
  bottom:
    - &lt;script type&#x3D;&#39;text&#x2F;javascript&#39; src&#x3D;&#39;https:&#x2F;&#x2F;ajax.loli.net&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.2.1&#x2F;jquery.min.js&#39;&gt;&lt;&#x2F;script&gt;
    - &lt;script id&#x3D;&quot;dsq-count-scr&quot; src&#x3D;&quot;&#x2F;&#x2F;https-www-dhndzwxj-top.disqus.com&#x2F;count.js&quot; async&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="-46"><a class="markdownIt-Anchor" href="#-46"></a> <a href="https://www.dhndzwxj.top/3276806131.html#%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8-api"></a>高级应用 API</h4>
<p>Google Fonts 还开放了一些接口（称为 Developer API），用于获取字体库的信息数据。</p>
<p>比如实时获取字体库实际可用的字体及其相关信息：</p>
<p><code>https://www.googleapis.com/webfonts/v1/webfonts?key=*YOUR-API-KEY*</code></p>
<p>这个请求的返回结果是一个 JSON 类型的数据，包括了每种字体的名称，样式种类（比如 regular，italic），版本，修改时间，包含的样式包的请求地址，等等。</p>
<p>请注意，在 URL 里面有一个 key，这个 key 是和您的 web 应用工程相联系的，只有注册过的 web 应用才能成功调用 Developer API。我们必须要在 Google Cloud Console 注册之后，才能获取这个 key。</p>
<p>关于这个 Developer API， 可以参阅这个<a href="https://developers.google.com/fonts/docs/developer_api">链接</a>。</p>
<p>参考下面这边文章来修改头文件：<a href="https://www.frankindev.com/2017/04/09/source-han-serif-in-web/">Web使用思源字体</a>。<a href="https://sb.sb/blog/css-cdn/">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a>。</p>
<p>谷歌Fonts API网址：<a href="https://fonts.google.com/">https://fonts.google.com/</a></p>
<p>解决谷歌字体API加载速度慢的问题：<a href="https://blog.csdn.net/klsfp/article/details/118228645">解决引入fonts.googleapis.com/css字体网页响应缓慢问题</a>。</p>
<h3 id="-47"><a class="markdownIt-Anchor" href="#-47"></a> <a href="https://www.dhndzwxj.top/3276806131.html#610-%E7%BD%91%E9%A1%B5%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%8D%A1%E7%89%87"></a>6.10 网页侧边栏卡片</h3>
<p>最重要的文件是<code>butterfly/layout/includes/widget/index.pug</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;- &#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;widget&#x2F;index.pug

#aside-content.aside-content
  &#x2F;&#x2F;- post
  if is_post()
    if showToc &amp;&amp; theme.toc.style_simple
      .sticky_layout
        include .&#x2F;card_post_toc.pug
    else
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_announcement&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_top_self&#39;, &#123;&#125;, &#123;cache: true&#125;)      
      .sticky_layout
        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_back&#39;, &#123;&#125;, &#123;cache: true&#125;)
        if showToc
          include .&#x2F;card_post_toc.pug
        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_recent_post&#39;, &#123;&#125;, &#123;cache: true&#125;)
        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_ad&#39;, &#123;&#125;, &#123;cache: true&#125;)
  else
    &#x2F;&#x2F;- page
    !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_author&#39;, &#123;&#125;, &#123;cache: true&#125;)
    !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_announcement&#39;, &#123;&#125;, &#123;cache: true&#125;)
    !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_top_self&#39;, &#123;&#125;, &#123;cache: true&#125;)      

    .sticky_layout
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_recent_post&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_categories&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_tags&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_webinfo&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_ad&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_newest_comment&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_archives&#39;, &#123;&#125;, &#123;cache: true&#125;)
      !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_bottom_self&#39;, &#123;&#125;, &#123;cache: true&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于作者卡片<code>butterfly/layout/includes/widget/card_author.pug</code>，我需要两种形态：一方面是主页上内容要全面（如下面左图），另一方面是文章内它的内容要简略。对于后者，我新建了一个<code>card_back.pug</code>文件。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;widget&#x2F;card_back.pug

if theme.aside.card_author.enable
  .card-widget.card-info
    .is-center
      .avatar-img
        img(src&#x3D;url_for(theme.avatar.img) onerror&#x3D;&#96;this.onerror&#x3D;null;this.src&#x3D;&#39;&#96; + url_for(theme.error_img.flink) + &#96;&#39;&#96; alt&#x3D;&quot;avatar&quot;)

    if theme.aside.card_author.button.enable
      a#card-info-btn.button--animated(href&#x3D;theme.aside.card_author.button.link)
        i(class&#x3D;theme.aside.card_author.button.icon)
        span&#x3D;theme.aside.card_author.button.text
  
    if(theme.social)
        .card-info-social-icons.is-center
          !&#x3D;fragment_cache(&#39;social&#39;, function()&#123;return partial(&#39;includes&#x2F;header&#x2F;social&#39;)&#125;) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-48"><a class="markdownIt-Anchor" href="#-48"></a> <a href="https://www.dhndzwxj.top/3276806131.html#611-%E6%97%B6%E9%92%9F"></a>6.11 时钟</h3>
<ol>
<li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-butterfly-clock-anzhiyu --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>添加配置信息，以下为写法示例 在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none"># electric_clock
# see https:&#x2F;&#x2F;anzhiy.cn&#x2F;posts&#x2F;fc18.html
electric_clock:
  enable: true # 开关
  priority: 5 #过滤器优先权
  enable_page: all # 应用页面
  exclude:
  # - &#x2F;posts&#x2F;
  # - &#x2F;about&#x2F;
  layout: # 挂载容器类型
    type: class
    name: sticky_layout
    index: 0
  loading: https:&#x2F;&#x2F;cdn.cbd.int&#x2F;hexo-butterfly-clock-anzhiyu&#x2F;lib&#x2F;loading.gif #加载动画自定义
  clock_css: https:&#x2F;&#x2F;cdn.cbd.int&#x2F;hexo-butterfly-clock-anzhiyu&#x2F;lib&#x2F;clock.min.css
  clock_js: https:&#x2F;&#x2F;cdn.cbd.int&#x2F;hexo-butterfly-clock-anzhiyu&#x2F;lib&#x2F;clock.min.js
  ip_api: https:&#x2F;&#x2F;widget.qweather.net&#x2F;simple&#x2F;static&#x2F;js&#x2F;he-simple-common.js?v&#x3D;2.0
  qweather_key: # 和风天气key
  gaud_map_key: # 高得地图web服务key
  default_rectangle: false # 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气
  rectangle: 112.982279,28.19409 # 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>参数释义</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>备选值/类型</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>priority</td>
<td>number</td>
<td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td>
</tr>
<tr>
<td>enable</td>
<td>true/false</td>
<td>【必选】控制开关</td>
</tr>
<tr>
<td>enable_page</td>
<td>path</td>
<td>【可选】填写想要应用的页面,如根目录就填’/’,分类页面就填’/categories/’。若要应用于所有页面，就填<code>all</code>，默认为<code>all</code></td>
</tr>
<tr>
<td>exclude</td>
<td>path</td>
<td>【可选】填写想要屏蔽的页面，可以多个。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td>
</tr>
<tr>
<td>layout.type</td>
<td>id/class</td>
<td>【可选】挂载容器类型，填写id或class，不填则默认为id</td>
</tr>
<tr>
<td><a href="http://layout.name/">layout.name</a></td>
<td>text</td>
<td>【必选】挂载容器名称</td>
</tr>
<tr>
<td>layout.index</td>
<td>0和正整数</td>
<td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td>
</tr>
<tr>
<td>loading</td>
<td>URL</td>
<td>【可选】电子钟加载动画的图片</td>
</tr>
<tr>
<td>clock_css</td>
<td>URL</td>
<td>【可选】电子钟样式CDN资源</td>
</tr>
<tr>
<td>clock_js</td>
<td>URL</td>
<td>【可选】电子钟执行脚本CDN资源</td>
</tr>
<tr>
<td>ip_api</td>
<td>URL</td>
<td>【可选】获取时钟IP的API</td>
</tr>
</tbody>
</table>
<p>配置文件</p>
<h3 id="-49"><a class="markdownIt-Anchor" href="#-49"></a> <a href="https://www.dhndzwxj.top/3276806131.html#6n-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"></a>6.n 主题配置文件</h3>
<pre class="line-numbers language-none"><code class="language-none"># Main menu navigation (導航目錄)
# see https:&#x2F;&#x2F;butterfly.js.org&#x2F;posts&#x2F;4aa8abbe&#x2F;#導航菜單
# --------------------------------------

menu:
  主页: &#x2F; || fas fa-home
  关于: &#x2F;about&#x2F; || fas fa-heart
  结构||fa fa-heartbeat:
    目录: &#x2F;categories&#x2F; || fas fa-folder-open
    归档: &#x2F;archives&#x2F; || fas fa-archive
    标签: &#x2F;tags&#x2F; || fas fa-tags

# Code Blocks (代碼相關)
# --------------------------------------

highlight_theme: light #  darker &#x2F; pale night &#x2F; light &#x2F; ocean &#x2F; mac &#x2F; mac light &#x2F; false
highlight_copy: true # copy button
highlight_lang: true # show the code language
highlight_shrink: false # true: shrink the code blocks &#x2F; false: expand the code blocks | none: expand code blocks and hide the button
highlight_height_limit: false # unit: px
code_word_wrap: false

# copy settings
# copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)
copy:
  enable: true
  copyright:
    enable: false
    limit_count: 0

# social settings (社交圖標設置)
# formal:
#   icon: link || the description
social:
  # fab fa-github: https:&#x2F;&#x2F;github.com&#x2F;xxxxx || Github
  # fas fa-envelope: mailto:xxxxxx@gmail.com || Email

# search (搜索)
# see https:&#x2F;&#x2F;butterfly.js.org&#x2F;posts&#x2F;ceeb73f&#x2F;#搜索系統
# --------------------------------------

# Algolia search
algolia_search:
  enable: false
  hits:
    per_page: 6

# Local search
local_search:
  enable: true
  preload: true #預加載，開啟後，進入網頁後會自動加載搜索文件。關閉時，只有點擊搜索按鈕後，才會加載搜索文件
  CDN:

# Math (數學)
# --------------------------------------
# About the per_page
# if you set it to true, it will load mathjax&#x2F;katex script in each page (true 表示每一頁都加載js)
# if you set it to false, it will load mathjax&#x2F;katex script according to your setting (add the &#39;mathjax: true&#39; in page&#39;s front-matter)
# (false 需要時加載，須在使用的 Markdown Front-matter 加上 mathjax: true)

# MathJax
mathjax:
  enable: true
  per_page: false

# KaTeX
katex:
  enable: false
  per_page: false
  hide_scrollbar: true

# Image (圖片設置)
# --------------------------------------

# Favicon（網站圖標）
favicon: &#x2F;private_img&#x2F;favicon.png

# Avatar (頭像)
avatar:
  img: &#x2F;private_img&#x2F;yuyingnan.jpg #https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;02&#x2F;24&#x2F;5O1day2nriDzjSu.png
  effect: false

# Disable all banner image
disable_top_img: false

# The banner image of home page
index_img: &#x2F;private_img&#x2F;bg0.png

# If the banner of page not setting, it will show the top_img
default_top_img: &#x2F;private_img&#x2F;bg1.png

# The banner image of archive page
archive_img:

# If the banner of tag page not setting, it will show the top_img
# note: tag page, not tags page (子標籤頁面的 top_img)
tag_img:

# The banner image of tag page
# format:
#  - tag name: xxxxx
tag_per_img:

# If the banner of category page not setting, it will show the top_img
# note: category page, not categories page (子分類頁面的 top_img)
category_img:

# The banner image of category page
# format:
#  - category name: xxxxx
category_per_img: &#x2F;private_img&#x2F;banner2.gif

cover:
  # display the cover or not (是否顯示文章封面)
  index_enable: false
  aside_enable: false
  archives_enable: false
  # the position of cover in home page (封面顯示的位置)
  # left&#x2F;right&#x2F;both
  position: both
  # When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)
  default_cover: &#x2F;private_img&#x2F;banner2.gif
    # - https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;01&#x2F;gkihqEjXxJ5UZ1C.jpg

# Replace Broken Images (替換無法顯示的圖片)
error_img:
  flink: &#x2F;private_img&#x2F;404.gif
  post_page: &#x2F;private_img&#x2F;banner.gif

# A simple 404 page
error_404:
  enable: true
  subtitle: &#39;无法打开该网页&#39;
  background: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;19&#x2F;aKOcLiyPl2JQdFD.png

post_meta:
  page: # Home Page
    date_type: both # created or updated or both 主頁文章日期是創建日或者更新日或都顯示
    date_format: date # date&#x2F;relative 顯示日期還是相對日期
    categories: true # true or false 主頁是否顯示分類
    tags: false # true or false 主頁是否顯示標籤
    label: true # true or false 顯示描述性文字
  post:
    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示
    date_format: date # date&#x2F;relative 顯示日期還是相對日期
    categories: true # true or false 文章頁是否顯示分類
    tags: true # true or false 文章頁是否顯示標籤
    label: true # true or false 顯示描述性文字

# wordcount (字數統計)
# see https:&#x2F;&#x2F;butterfly.js.org&#x2F;posts&#x2F;ceeb73f&#x2F;#字數統計
wordcount:
  enable: true
  post_wordcount: true
  min2read: true
  total_wordcount: true

# Display the article introduction on homepage
# 1: description
# 2: both (if the description exists, it will show description, or show the auto_excerpt)
# 3: auto_excerpt (default)
# false: do not show the article introduction
index_post_content:
  method: 3
  length: 500 # if you set method to 2 or 3, the length need to config

# anchor
anchor:
  button:
    enable: false
    always_show: false
    icon: # the unicode value of Font Awesome icon, such as &#39;\3423&#39;
  auto_update: false # when you scroll in post, the URL will update according to header id.

# Post
# --------------------------------------

# toc (目錄)
toc:
  post: true
  page: false
  number: false #自动编号
  expand: true
  style_simple: false # for post

post_copyright:
  enable: false
  decode: false
  author_href:
  license: CC BY-NC-SA 4.0
  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;

# Sponsor&#x2F;reward
reward:
  enable: true
  QR_code:
    - img: &#x2F;private_img&#x2F;wechat.png
      link:
      text: 微信
    - img: &#x2F;private_img&#x2F;alipay.jpg
      link:
      text: 支付宝

# Post edit
# Easily browse and edit blog source code online.
post_edit:
  enable: false
  # url: https:&#x2F;&#x2F;github.com&#x2F;user-name&#x2F;repo-name&#x2F;edit&#x2F;branch-name&#x2F;subdirectory-name&#x2F;
  # For example: https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;butterfly.js.org&#x2F;edit&#x2F;main&#x2F;source&#x2F;
  url: https:&#x2F;&#x2F;github.com&#x2F;dhndzwxj&#x2F;hexo-backup&#x2F;edit&#x2F;master&#x2F;source&#x2F;

# Related Articles
related_post:
  enable: false
  limit: 6 # Number of posts displayed
  date_type: created # or created or updated 文章日期顯示創建日或者更新日

# figcaption (圖片描述文字)
photofigcaption: false

# post_pagination (分頁)
# value: 1 || 2 || false
# 1: The &#39;next post&#39; will link to old post
# 2: The &#39;next post&#39; will link to new post
# false: disable pagination
post_pagination: 1

# Displays outdated notice for a post (文章過期提醒)
noticeOutdate:
  enable: true
  style: flat # style: simple&#x2F;flat
  limit_day: 30 # When will it be shown
  position: top # position: top&#x2F;bottom
  message_prev: 本文上次更新距离今天已经过去
  message_next: 天, 文中内容可能已经过时，望周知。

# Share System (分享功能)
# --------------------------------------

# AddThis
# https:&#x2F;&#x2F;www.addthis.com&#x2F;
addThis:
  enable: false
  pubid:

# Share.js
# https:&#x2F;&#x2F;github.com&#x2F;overtrue&#x2F;share.js
sharejs:
  enable: true
  sites: facebook,twitter,wechat,weibo,qq

# AddToAny
# https:&#x2F;&#x2F;www.addtoany.com&#x2F;
addtoany:
  enable: false
  item: facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link

# Comments System
# --------------------------------------

comments:
  # Up to two comments system, the first will be shown as default
  # Choose: Disqus&#x2F;Disqusjs&#x2F;Livere&#x2F;Gitalk&#x2F;Valine&#x2F;Waline&#x2F;Utterances&#x2F;Facebook Comments&#x2F;Twikoo
  use: Disqus
  text: true # Display the comment name next to the button
  # lazyload: The comment system will be load when comment element enters the browser&#39;s viewport.
  # If you set it to true, the comment count will be invalid
  lazyload: true
  count: true # Display comment count in top_img
  card_post_count: false # Display comment count in Home Page

# disqus
# https:&#x2F;&#x2F;disqus.com&#x2F;
disqus:
  shortname: https-www-dhndzwxj-top #disqus_ZdiIR8wtv4
  apikey: # For newest comments widget

# Alternative Disqus - Render comments with Disqus API
# DisqusJS 評論系統，可以實現在網路審查地區載入 Disqus 評論列表，兼容原版
# https:&#x2F;&#x2F;github.com&#x2F;SukkaW&#x2F;DisqusJS
disqusjs:
  shortname:
  apikey:
  option:

# livere (來必力)
# https:&#x2F;&#x2F;www.livere.com&#x2F;
livere:
  uid:

# gitalk
# https:&#x2F;&#x2F;github.com&#x2F;gitalk&#x2F;gitalk
gitalk:
  client_id:
  client_secret:
  repo:
  owner:
  admin:
  option:

# valine
# https:&#x2F;&#x2F;valine.js.org
valine:
  appId: # leancloud application app id
  appKey: # leancloud application app key
  avatar: monsterid # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar
  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)
  bg: # valine background
  visitor: false
  option:

# waline - A simple comment system with backend support fork from Valine
# https:&#x2F;&#x2F;waline.js.org&#x2F;
waline:
  serverURL: # Waline server address url
  bg: # waline background
  pageview: false
  option:

# utterances
# https:&#x2F;&#x2F;utteranc.es&#x2F;
utterances:
  repo:
  # Issue Mapping: pathname&#x2F;url&#x2F;title&#x2F;og:title
  issue_term: pathname
  # Theme: github-light&#x2F;github-dark&#x2F;github-dark-orange&#x2F;icy-dark&#x2F;dark-blue&#x2F;photon-dark
  light_theme: github-light
  dark_theme: photon-dark

# Facebook Comments Plugin
# https:&#x2F;&#x2F;developers.facebook.com&#x2F;docs&#x2F;plugins&#x2F;comments&#x2F;
facebook_comments:
  app_id:
  user_id: # optional
  pageSize: 10 # The number of comments to show
  order_by: social # social&#x2F;time&#x2F;reverse_time
  lang: zh_TW # Language en_US&#x2F;zh_CN&#x2F;zh_TW and so on

# Twikoo
# https:&#x2F;&#x2F;github.com&#x2F;imaegoo&#x2F;twikoo
twikoo:
  envId:
  region:
  visitor: false
  option:

# Giscus
# https:&#x2F;&#x2F;giscus.app&#x2F;
giscus:
  repo:
  repo_id:
  category_id:
  theme:
    light: light
    dark: dark
  option:

# Remark42
# https:&#x2F;&#x2F;remark42.com&#x2F;docs&#x2F;configuration&#x2F;frontend&#x2F;
remark42:
  host: # Your Host URL
  siteId: # Your Site ID
  option:

# Artalk
# https:&#x2F;&#x2F;artalk.js.org&#x2F;guide&#x2F;frontend&#x2F;config.html
artalk:
  server:
  site:
  visitor: false
  option:

# Chat Services
# --------------------------------------

# Chat Button [recommend]
# It will create a button in the bottom right corner of website, and hide the origin button
chat_btn: false

# The origin chat button is displayed when scrolling up, and the button is hidden when scrolling down
chat_hide_show: false

# chatra
# https:&#x2F;&#x2F;chatra.io&#x2F;
chatra:
  enable: false
  id:

# tidio
# https:&#x2F;&#x2F;www.tidio.com&#x2F;
tidio:
  enable: false
  public_key:

# daovoice
# http:&#x2F;&#x2F;daovoice.io&#x2F;
daovoice:
  enable: false
  app_id:

# gitter
# https:&#x2F;&#x2F;gitter.im&#x2F;
gitter:
  enable: false
  room:

# crisp
# https:&#x2F;&#x2F;crisp.chat&#x2F;en&#x2F;
crisp:
  enable: false
  website_id:

# messenger
# https:&#x2F;&#x2F;developers.facebook.com&#x2F;docs&#x2F;messenger-platform&#x2F;discovery&#x2F;facebook-chat-plugin&#x2F;
messenger:
  enable: false
  pageID:
  lang: zh_TW # Language en_US&#x2F;zh_CN&#x2F;zh_TW and so on

# Footer Settings
# --------------------------------------
footer:
  owner:
    enable: true
    since: 2020
  custom_text: 欢迎参观我的&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;github.com&#x2F;dhndzwxj&#39; target&#x3D;&#39;_blank&#39;&gt;github&lt;&#x2F;a&gt;个人主页！
  copyright: true # Copyright of theme and framework


# Analysis
# --------------------------------------

# Baidu Analytics
# https:&#x2F;&#x2F;tongji.baidu.com&#x2F;web&#x2F;welcome&#x2F;login
baidu_analytics:

# Google Analytics
# https:&#x2F;&#x2F;analytics.google.com&#x2F;analytics&#x2F;web&#x2F;
google_analytics:

# CNZZ Analytics
# https:&#x2F;&#x2F;www.umeng.com&#x2F;
cnzz_analytics:

# Cloudflare Analytics
# https:&#x2F;&#x2F;www.cloudflare.com&#x2F;zh-tw&#x2F;web-analytics&#x2F;
cloudflare_analytics:

# Microsoft Clarity
# https:&#x2F;&#x2F;clarity.microsoft.com&#x2F;
microsoft_clarity:

# Advertisement
# --------------------------------------

# Google Adsense (谷歌廣告)
google_adsense:
  enable: false
  auto_ads: true
  js: https:&#x2F;&#x2F;pagead2.googlesyndication.com&#x2F;pagead&#x2F;js&#x2F;adsbygoogle.js
  client:
  enable_page_level_ads: true

# Insert ads manually (手動插入廣告)
# ad:
#   index:
#   aside:
#   post:

# Verification (站長驗證)
# --------------------------------------

site_verification:
  # - name: google-site-verification
  #   content: xxxxxx
  # - name: baidu-site-verification
  #   content: xxxxxxx

# Beautify&#x2F;Effect (美化&#x2F;效果)
# --------------------------------------

# Theme color for customize
# Notice: color value must in double quotes like &quot;#000&quot; or may cause error!

theme_color:
  enable: true
  main: &#39;#E68258&#39; #&#39;#00B300&#39; #&#39;#1A1A1A&#39; #滑动条的颜色,背景以上的颜色
  paginator: &quot;#e68258&quot; #底部网页分页数字的颜色
  button_hover: &quot;#FF9966&quot; #鼠标停留在button上颜色渐变的效果；选择了比主题色更浅一号的橙色
  text_selection: &#39;#9F6506&#39; #&#39;#000066&#39; #&quot;#0000CC&quot; #选中文字后的颜色
  link_color: &quot;#b86ed0&quot; #网页链接的颜色
  meta_color: &quot;#858585&quot;
  hr_color: &quot;#A4D8FA&quot;
  code_foreground: &quot;#F47466&quot;
  code_background: &quot;#FFFF00&quot;
  toc_color: &#39;#E68258&#39; #&quot;#e68258&quot; #&quot;#00c4b6&quot;
  blockquote_padding_color: &quot;#e68258&quot; #引用部分左边长条边框颜色
  blockquote_background_color: &quot;#e68258&quot; #引用部分的背景颜色


# The top_img settings of home page
# default: top img - full screen, site info - middle (默認top_img全屏，site_info在中間)
# The position of site info, eg: 300px&#x2F;300em&#x2F;300rem&#x2F;10% (主頁標題距離頂部距離)
index_site_info_top:
# The height of top_img, eg: 300px&#x2F;300em&#x2F;300rem (主頁top_img高度)
index_top_img_height:

# The user interface setting of category and tag page (category和tag頁的UI設置)
# index - same as Homepage UI (index 值代表 UI將與首頁的UI一樣)
# default - same as archives UI 默認跟archives頁面UI一樣
category_ui: # 留空或 index
tag_ui: # 留空或 index

# Website Background (設置網站背景)
# can set it to color or image (可設置圖片 或者 顔色)
# The formal of image: url(http:&#x2F;&#x2F;xxxxxx.com&#x2F;xxx.jpg)
background:

# Footer Background
footer_bg: true

# the position of bottom right button&#x2F;default unit: px (右下角按鈕距離底部的距離&#x2F;默認單位為px)
rightside-bottom:

# Enter transitions (開啓網頁進入效果)
enter_transitions: true

# Background effects (背景特效)
# --------------------------------------

# canvas_ribbon (靜止彩帶背景)
# See: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;ribbon.js
canvas_ribbon:
  enable: false
  size: 150
  alpha: 0.6
  zIndex: -1
  click_to_change: false
  mobile: false

# Fluttering Ribbon (動態彩帶)
canvas_fluttering_ribbon:
  enable: true
  mobile: true

# canvas_nest
# https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js
canvas_nest:
  enable: false
  color: &#39;0,0,255&#39; #color of lines, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)
  opacity: 0.7 # the opacity of line (0~1), default: 0.5.
  zIndex: -1 # z-index property of the background, default: -1.
  count: 99 # the number of lines, default: 99.
  mobile: false

# Typewriter Effect (打字效果)
# https:&#x2F;&#x2F;github.com&#x2F;disjukr&#x2F;activate-power-mode
activate_power_mode:
  enable: false
  colorful: true # open particle animation (冒光特效)
  shake: true #  open shake (抖動特效)
  mobile: false

# Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)
fireworks:
  enable: false
  zIndex: 9999 # -1 or 9999
  mobile: false

# Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)
click_heart:
  enable: false
  mobile: false

# Mouse click effects: words (鼠標點擊效果: 文字)
ClickShowText:
  enable: false
  text:
    # - I
    # - LOVE
    # - YOU
  fontSize: 16.5px
  random: false
  mobile: false

# Default display mode (網站默認的顯示模式)
# light (default) &#x2F; dark
display_mode: light

# Beautify (美化頁面顯示)
beautify:
  enable: false
  field: post # site&#x2F;post
  title-prefix-icon: # &#39;\f0c1&#39;
  title-prefix-icon-color: # &#39;#F47466&#39;

# Global font settings
# Don&#39;t modify the following settings unless you know how they work (非必要不要修改)
font:
  global-font-size: 16.5px
  code-font-size:
  font-family: Times, Noto Serif SC
  code-font-family:

# Font settings for the site title and site subtitle
# 左上角網站名字 主頁居中網站名字
blog_title_font:
  font_link:
  font-family: Ma Shan Zheng

# The setting of divider icon (水平分隔線圖標設置)
hr_icon:
  enable: true
  icon: # the unicode value of Font Awesome icon, such as &#39;\3423&#39;
  icon-top:

# the subtitle on homepage (主頁subtitle)
subtitle:
  enable: true
  # Typewriter Effect (打字效果)
  effect: true
  # Effect Speed Options (打字效果速度參數)
  startDelay: 300 # time before typing starts in milliseconds
  typeSpeed: 150 # type speed in milliseconds
  backSpeed: 50 # backspacing speed in milliseconds
  # loop (循環打字)
  loop: true
  # source 調用第三方服務
  # source: false 關閉調用
  # source: 1  調用一言網的一句話（簡體） https:&#x2F;&#x2F;hitokoto.cn&#x2F;
  # source: 2  調用一句網（簡體） http:&#x2F;&#x2F;yijuzhan.com&#x2F;
  # source: 3  調用今日詩詞（簡體） https:&#x2F;&#x2F;www.jinrishici.com&#x2F;
  # subtitle 會先顯示 source , 再顯示 sub 的內容
  source: false
  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字
  sub:
    - 随手写一写，揭晓这世界

# Loading Animation (加載動畫)
preloader:
  enable: false
  # source
  # 1. fullpage-loading
  # 2. pace (progress bar)
  source: 1
  # pace theme (see https:&#x2F;&#x2F;codebyzach.github.io&#x2F;pace&#x2F;)
  pace_css_url:

# aside (側邊欄)
# --------------------------------------

aside:
  enable: true
  hide: false
  button: true
  mobile: true # display on mobile
  position: left # left or right
  display:
    archive: true
    tag: true
    category: true
  card_author:
    enable: true
    description:
    button:
      enable: true
      # icon: fab fa-github
      text: 回到首页
      link: &#x2F; 
  card_announcement:
    enable: false
    content: 随手写一些，揭晓这世界
  card_recent_post:
    enable: true
    limit: 5 # if set 0 will show all
    sort: updated # date or updated
    sort_order: &#39;updated&#39; # Don&#39;t modify the setting unless you know how it works
  card_categories:
    enable: true
    limit: 0 # if set 0 will show all
    expand: false # none&#x2F;true&#x2F;false
    sort_order: # Don&#39;t modify the setting unless you know how it works
  card_tags:
    enable: false
    limit: 0 # if set 0 will show all
    color: false
    sort_order: # Don&#39;t modify the setting unless you know how it works
  card_archives:
    enable: false
    type: monthly # yearly or monthly
    format: MMMM YYYY # eg: YYYY年MM月
    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending
    limit: 8 # if set 0 will show all
    sort_order: # Don&#39;t modify the setting unless you know how it works
  card_webinfo:
    enable: true
    post_count: true
    last_push_date: true
    sort_order: # Don&#39;t modify the setting unless you know how it works

# busuanzi count for PV &#x2F; UV in site
# 訪問人數
busuanzi:
  site_uv: true
  site_pv: true
  page_pv: true

# Time difference between publish date and now (網頁運行時間)
# Formal: Month&#x2F;Day&#x2F;Year Time or Year&#x2F;Month&#x2F;Day Time
runtimeshow:
  enable: true
  publish_date: 8&#x2F;21&#x2F;2020 00:00:00 #发布时间

# Aside widget - Newest Comments
newest_comments:
  enable: true
  sort_order: # Don&#39;t modify the setting unless you know how it works
  limit: 6
  storage: 10 # unit: mins, save data to localStorage
  avatar: true

# Bottom right button (右下角按鈕)
# --------------------------------------

# Conversion between Traditional and Simplified Chinese (簡繁轉換)
translate:
  enable: true
  # The text of a button
  default: 繁
  # the language of website (1 - Traditional Chinese&#x2F; 2 - Simplified Chinese）
  defaultEncoding: 2
  # Time delay
  translateDelay: 0
  # The text of the button when the language is Simplified Chinese
  msgToTraditionalChinese: &#39;繁&#39;
  # The text of the button when the language is Traditional Chinese
  msgToSimplifiedChinese: &#39;簡&#39;

# Read Mode (閲讀模式)
readmode: true

# dark mode
darkmode:
  enable: true
  # Toggle Button to switch dark&#x2F;light mode
  button: true
  # Switch dark&#x2F;light mode automatically (自動切換 dark mode和 light mode)
  # autoChangeMode: 1  Following System Settings, if the system doesn&#39;t support dark mode, it will switch dark mode between 6 pm to 6 am
  # autoChangeMode: 2  Switch dark mode between 6 pm to 6 am
  # autoChangeMode: false
  autoChangeMode: false

# Don&#39;t modify the following settings unless you know how they work (非必要請不要修改 )
# Choose: readmode,translate,darkmode,hideAside,toc,chat,comment
# Don&#39;t repeat 不要重複
rightside_item_order:
  enable: false
  hide: # readmode,translate,darkmode,hideAside
  show: # toc,chat,comment

# Lightbox (圖片大圖查看模式)
# --------------------------------------
# You can only choose one, or neither (只能選擇一個 或者 兩個都不選)

# medium-zoom
# https:&#x2F;&#x2F;github.com&#x2F;francoischalifour&#x2F;medium-zoom
medium_zoom: false

# fancybox
# http:&#x2F;&#x2F;fancyapps.com&#x2F;fancybox&#x2F;3&#x2F;
fancybox: true

# Tag Plugins settings (標籤外掛)
# --------------------------------------

# mermaid
# see https:&#x2F;&#x2F;github.com&#x2F;mermaid-js&#x2F;mermaid
mermaid:
  enable: true
  # built-in themes: default&#x2F;forest&#x2F;dark&#x2F;neutral
  theme:
    light: default
    dark: dark

# Note (Bootstrap Callout)
note:
  # Note tag style values:
  #  - simple    bs-callout old alert style. Default.
  #  - modern    bs-callout new (v2-v3) alert style.
  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.
  #  - disabled  disable all CSS styles import of note tag.
  style: flat
  icons: true
  border_radius: 3
  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).
  # Offset also applied to label tag variables. This option can work with disabled note tag.
  light_bg_offset: 0

# other
# --------------------------------------

# Pjax
# It may contain bugs and unstable, give feedback when you find the bugs.
# https:&#x2F;&#x2F;github.com&#x2F;MoOx&#x2F;pjax
pjax:
  enable: false
  exclude:
    # - xxxx
    # - xxxx

# Inject the css and script (aplayer&#x2F;meting)
aplayerInject:
  enable: false
  per_page: true

# Snackbar (Toast Notification 彈窗)
# https:&#x2F;&#x2F;github.com&#x2F;polonel&#x2F;SnackBar
# position 彈窗位置
# 可選 top-left &#x2F; top-center &#x2F; top-right &#x2F; bottom-left &#x2F; bottom-center &#x2F; bottom-right
snackbar:
  enable: false
  position: bottom-left
  bg_light: &#39;#49b1f5&#39; # The background color of Toast Notification in light mode
  bg_dark: &#39;#1f1f1f&#39; # The background color of Toast Notification in dark mode

# https:&#x2F;&#x2F;instant.page&#x2F;
# prefetch (預加載)
instantpage: false

# https:&#x2F;&#x2F;github.com&#x2F;vinta&#x2F;pangu.js
# Insert a space between Chinese character and English character (中英文之間添加空格)
pangu:
  enable: false
  field: site # site&#x2F;post

# Lazyload (圖片懶加載)
# https:&#x2F;&#x2F;github.com&#x2F;verlok&#x2F;vanilla-lazyload
lazyload:
  enable: false
  field: site # site&#x2F;post
  placeholder:
  blur: false

# PWA
# See https:&#x2F;&#x2F;github.com&#x2F;JLHwung&#x2F;hexo-offline
# ---------------
# pwa:
#   enable: false
#   manifest: &#x2F;pwa&#x2F;manifest.json
#   apple_touch_icon: &#x2F;pwa&#x2F;apple-touch-icon.png
#   favicon_32_32: &#x2F;pwa&#x2F;32.png
#   favicon_16_16: &#x2F;pwa&#x2F;16.png
#   mask_icon: &#x2F;pwa&#x2F;safari-pinned-tab.svg

# Open graph meta tags
# https:&#x2F;&#x2F;developers.facebook.com&#x2F;docs&#x2F;sharing&#x2F;webmasters&#x2F;
Open_Graph_meta:
  enable: true
  option:
    # twitter_card:
    # twitter_image:
    # twitter_id:
    # twitter_site:
    # google_plus:
    # fb_admins:
    # fb_app_id:

# Add the vendor prefixes to ensure compatibility
css_prefix: true

# Inject
# Insert the code to head (before &#39;&lt;&#x2F;head&gt;&#39; tag) and the bottom (before &#39;&lt;&#x2F;body&gt;&#39; tag)
# 插入代码到头部 &lt;&#x2F;head&gt; 之前 和 底部 &lt;&#x2F;body&gt; 之前
inject:
  head:
    - &lt;link rel&#x3D;&quot;preconnect&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&quot;&gt;
    - &lt;link rel&#x3D;&quot;preconnect&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.gstatic.com&quot; crossorigin&gt;
    - &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;fonts.loli.net&#x2F;css2?family&#x3D;Noto+Serif+SC:wght@400;500;700&amp;display&#x3D;swap&quot; rel&#x3D;&quot;stylesheet&quot;&gt; #思源宋体
    - &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;fonts.loli.net&#x2F;css2?family&#x3D;Ma+Shan+Zheng:wght@400;500;700&amp;display&#x3D;swap&quot; rel&#x3D;&quot;stylesheet&quot;&gt; #Mashanzheng
    # - &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;xxx.css&quot;&gt;
  bottom:
    - &lt;script type&#x3D;&#39;text&#x2F;javascript&#39; src&#x3D;&#39;https:&#x2F;&#x2F;ajax.loli.net&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.2.1&#x2F;jquery.min.js&#39;&gt;&lt;&#x2F;script&gt;
    - &lt;script id&#x3D;&quot;dsq-count-scr&quot; src&#x3D;&quot;&#x2F;&#x2F;https-www-dhndzwxj-top.disqus.com&#x2F;count.js&quot; async&gt;&lt;&#x2F;script&gt;
    # - &lt;script src&#x3D;&quot;xxxx&quot;&gt;&lt;&#x2F;script&gt;

# CDN
# Don&#39;t modify the following settings unless you know how they work
# 非必要請不要修改
CDN:
  # The CDN provider of internal scripts (主題內部 js 的 cdn 配置)
  # option: local&#x2F;jsdelivr&#x2F;unpkg&#x2F;cdnjs&#x2F;custom
  # Dev version can only choose. ( dev版的主題只能設置為 local )
  internal_provider: local

  # The CDN provider of third party scripts (第三方 js 的 cdn 配置)
  # option: local&#x2F;jsdelivr&#x2F;unpkg&#x2F;cdnjs&#x2F;custom
  # when set it to local, you need to install hexo-butterfly-extjs
  third_party_provider: jsdelivr

  # Add version number to CDN, true or false  
  version: false

  # Custom format
  # For example: https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;$&#123;cdnjs_name&#125;&#x2F;$&#123;version&#125;&#x2F;$&#123;min_cdnjs_file&#125;
  custom_format:

  option:
    # main_css:
    # main:
    # utils:
    # translate:
    # local_search:
    # algolia_js:
    # algolia_search_v4:
    # instantsearch_v4:
    # pjax:
    # gitalk:
    # gitalk_css:
    # blueimp_md5:
    # valine:
    # disqusjs:
    # disqusjs_css:
    # twikoo:
    # waline_js:
    # waline_css:
    # sharejs:
    # sharejs_css:
    # mathjax:
    # katex:
    # katex_copytex:
    # mermaid:
    # canvas_ribbon:
    # canvas_fluttering_ribbon:
    # canvas_nest:
    # lazyload:
    # instantpage:
    # typed:
    # pangu:
    # fancybox_css_v4:
    # fancybox_v4:
    # medium_zoom:
    # snackbar_css:
    # snackbar:
    # activate_power_mode:
    # fireworks:
    # click_heart:
    # ClickShowText:
    # fontawesomeV6:
    # flickr_justified_gallery_js:
    # flickr_justified_gallery_css:
    # aplayer_css:
    # aplayer_js:
    # meting_js:
    # prismjs_js:
    # prismjs_lineNumber_js:
    # prismjs_autoloader:
    # artalk_js:
    # artalk_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="-50"><a class="markdownIt-Anchor" href="#-50"></a> <a href="https://www.dhndzwxj.top/3276806131.html#7-git-%E6%95%99%E7%A8%8B%E5%8F%8A%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD"></a>7 Git 教程及博客备份</h2>
<p>这一步是要把我们本地的所有个人文件在网上进行备份——这很有必要，因为保不齐哪一天我们手残把电脑格式化了。不过想实现备份功能，要求我们对Git的一些内容有必要的了解，否则做起备份来往往会盲人摸象，反而自己把自己的文件用命令行代码清空了（这里有我的故事，有酒么？）。</p>
<p>Git教程：<a href="https://www.dhndzwxj.top/584278389.html">点这里</a>。</p>
<h3 id="-51"><a class="markdownIt-Anchor" href="#-51"></a> <a href="https://www.dhndzwxj.top/3276806131.html#71-%E7%94%9F%E6%88%90-ssh-key"></a>7.1 生成 SSH Key</h3>
<p>本例以 Github 为例作为远程仓库，如果你没有 Github 可以在官网 <a href="https://github.com/%E6%B3%A8%E5%86%8C%E3%80%82%E7%94%B1%E4%BA%8E%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0">https://github.com/注册。由于你的本地</a> Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p>
<p>使用以下命令生成 SSH Key：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;
ssh-keygen -t rsa -C &quot;dhndzwxj@ruc.edu.cn&quot;
ssh-keygen -t ed25519 -C &quot;dhndzwxj@ruc.edu.cn&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>查看当前的远程库:(执行时加上<code>-v</code>参数，你还可以看到每个别名的实际链接地址。)</p>
<pre class="line-numbers language-none"><code class="language-none">$ git remote
backup
$ git remote -v
backupgit@github.com:dhndzwxj&#x2F;hexo-backup.git (fetch)
backupgit@github.com:dhndzwxj&#x2F;hexo-backup.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-52"><a class="markdownIt-Anchor" href="#-52"></a> <a href="https://www.dhndzwxj.top/3276806131.html#72-%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81"></a>7.2 查看远程分支的更新状态</h3>
<pre class="line-numbers language-none"><code class="language-none">git remote show [仓库别名]
* remote backup
  Fetch URL: git@github.com:dhndzwxj&#x2F;hexo-backup.git
  Push  URL: git@github.com:dhndzwxj&#x2F;hexo-backup.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local ref configured for &#39;git push&#39;:
    master pushes to master (up to date)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Fetch URL和Push URL表示<code>fetch</code>和<code>push</code>的链接，<code>master tracked</code>表示本地和远程建立了连接。<code>up to date</code>表示本地和远程同步状态，<code>local out of date</code>表示本地落后于远程了。</p>
<h3 id="-53"><a class="markdownIt-Anchor" href="#-53"></a> <a href="https://www.dhndzwxj.top/3276806131.html#73-%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD"></a>7.3 博客备份</h3>
<p>注意每次备份前，都需要commit一下~（回忆前面讲的内容，如果不commit就只是在本地有缓存，没有上传到缓存区）然后下面一键三连：</p>
<pre class="line-numbers language-none"><code class="language-none">➜  dlog git:(master) ✗ git add .
➜  dlog git:(master) ✗ git commit -m &#39;211023版本提交&#39;
➜  dlog git:(master) ✗ git push backup master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>后面的<code>backup</code>是远程仓库名，<code>master</code>是backup这个远程仓库的默认分支名，这些名字都可以自己个性化命名，它们都不是代码中的<strong>关键字</strong>！</p>
<p>不过在提交的时候，往往出现主题文件无法commit的情况！为什么呢？因为主题文件也是从仓库里拉取下来的，它被关联到了作者的git仓库，所以提交不上去！</p>
<p>怎么解决呢？</p>
<p>①从暂存区删除该文件夹</p>
<pre class="line-numbers language-none"><code class="language-none">git rm --cache themes&#x2F;butterfly451<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>②把 <code>themes/主题名/.git</code>文件夹到放到别的位置，比方说桌面。记得把 <code>themes/主题名/.gitignore</code>里的 <code>_config</code>去掉</p>
<p>③<code>git status</code>查看当前状态</p>
<p>④直接按步骤提交就行了</p>
<pre class="line-numbers language-none"><code class="language-none">git add themes&#x2F;butterfly470&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>让后三连即可</p>
<p>标签</p>
<h3 id="-54"><a class="markdownIt-Anchor" href="#-54"></a> <a href="https://www.dhndzwxj.top/3276806131.html#74-%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%8B%89%E5%8F%96-%E5%A4%87%E4%BB%BD%E5%AE%9E%E6%88%98"></a>7.4 多设备拉取、备份实战</h3>
<h4 id="-55"><a class="markdownIt-Anchor" href="#-55"></a> <a href="https://www.dhndzwxj.top/3276806131.html#741-%E5%BE%80%E8%BF%94%E4%BA%8E%E5%A4%9A%E4%B8%AA%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E6%B5%81%E7%A8%8B%E5%BC%8F"></a>7.4.1 往返于多个设备之间：流程式</h4>
<p>在家里上传代码</p>
<pre class="line-numbers language-none"><code class="language-none">git remote add [远程仓库别名] [远程仓库地址]
git push [远程仓库别名] [分支]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>到公司新电脑上第一次获取代码</p>
<pre class="line-numbers language-none"><code class="language-none">git clone [远程仓库地址]
# 切换分支
git checkout [分支]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在Windows下，如果仓库中的一个pdf文件的路径太长，导致clone到本地之后无法checkout，解决方法是：</p>
<pre class="line-numbers language-none"><code class="language-none">git reset
git config core.protectNTFS false
git checkout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在公司进行开发(约定在dev分支进行开发)</p>
<pre class="line-numbers language-none"><code class="language-none">#切换到dev分支进行开发
git checkout dev
#把master分支合并到dev【仅一次】
git merge master
#修改代码
#提交代码
git add .
git commit -m &#39;记录信息&#39;
git push [远程仓库别名] dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>回到家中继续写代码</p>
<pre class="line-numbers language-none"><code class="language-none">#切换到dev分支进行开发
git checkout dev
#拉代码
git pull [远程仓库别名] dev
#继续开发
#提交代码
git add .
git commit -m &#39;记录信息&#39;
git push [远程仓库别名] dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>……以上流程循环往复。</p>
<p>开发完毕，要上线</p>
<pre class="line-numbers language-none"><code class="language-none"># 把dev分支的代码合并到master分支上
git checkout master
git merge dev
git push [远程仓库别名] master
# 把dev分支也推送到远程
git checkout dev
git merge master
git push [远程仓库别名] dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="-56"><a class="markdownIt-Anchor" href="#-56"></a> <a href="https://www.dhndzwxj.top/3276806131.html#742-%E5%BE%80%E8%BF%94%E4%BA%8E%E5%A4%9A%E4%B8%AA%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%85%B1%E5%90%8C%E5%BC%80%E5%8F%91-%E5%90%88%E5%B9%B6"></a>7.4.2 往返于多个设备之间：分布式（多设备共同开发、合并）</h4>
<p>在设备1和设备2共同开发，将代码合并的过程中可能会发生冲突。</p>
<p>怎么办？手动解决！</p>
<h3 id="-57"><a class="markdownIt-Anchor" href="#-57"></a> <a href="https://www.dhndzwxj.top/3276806131.html#75-%E4%B8%8A%E4%BC%A0%E8%B6%85%E8%BF%87100m%E7%9A%84%E6%96%87%E4%BB%B6"></a>7.5 上传超过100M的文件</h3>
<p>参考文章<a href="https://cloud.tencent.com/developer/article/1677003">轻松上传超过100M的文件至GitHub</a></p>
<p>就需要借助<strong>Git LFS</strong>。首先下载git-lfs（<a href="https://github.com/git-lfs/git-lfs">https://github.com/git-lfs/git-lfs</a>），安装好后进入本地仓库目录，执行下面的命令。</p>
<pre class="line-numbers language-none"><code class="language-none">git lfs track &quot;file&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>file</strong>是需要上传的大文件。执行完命令后会发现目录下生成了一个&quot;<strong>.gitattributes</strong>&quot;文件，文件内记录了我们要上传文件的信息。只有先把&quot;.gitattributes&quot;传上去，才可以上传大文件。</p>
<pre class="line-numbers language-none"><code class="language-none">git add .gitattributes
git commit -m &quot;submit file&quot;
git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上传完毕后，开始上传大文件。</p>
<pre class="line-numbers language-none"><code class="language-none">git add file
git commit -m &quot;add file&quot;
git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果发现自己空间不足，可以删去一些大文件或者购买更多的空间。</p>
<p>如果在上传过程中出现如下报错：</p>
<p><strong>batch response: Git LFS is disabled for this repository.</strong></p>
<p><strong>Uploading LFS objects: 0% (0/1), 0 B | 0 B/s, done</strong></p>
<p>就说明你的账号被冻结了，需要在GitHub后台提交解封申请。<a href="https://support.github.com/contact">https://support.github.com/contact</a></p>
<p>工作日一般几个小时就会帮你把账号解封，解封后就可以继续上传大文件啦~</p>
<h2 id="-58"><a class="markdownIt-Anchor" href="#-58"></a> <a href="https://www.dhndzwxj.top/3276806131.html#8-%E5%B0%86%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E6%89%98%E7%AE%A1%E5%88%B0vercel%E4%B8%8A"></a>8. 将博客站点托管到Vercel上！</h2>
<p>为什么使用Vercel托管网站？就我的个人使用体验而言，优点有以下几点：</p>
<ul>
<li>服务器在国内（据我查到的资料是在中国台湾），网页加载速度比Github Page快太多；</li>
<li>支持绑定Github账号，可以直接导入Github仓库</li>
<li>我看到的资料里，在Github上<code>hexo d</code>后，Vercel这边也会自动更新，比较省心。</li>
</ul>
<p>下面看看怎么做吧~首先上<a href="https://vercel.com/">Vercel官网</a>，注册一个自己的账号（点击网页右上角的“Sign Up”），然后（如下图）用Github账号就可以！</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688947.jpg"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688947.jpg" alt="" /></a></p>
<p>登陆成功后，我们下一步是在Vercel上新建一个项目（Project，如下图左），导入一个Git仓库（如下图右），点击Import就可以了</p>
<p>导入后便进入下面这个页面（下图左）。这里的意思是我们要不要建立一个开发团队，由于这项服务是收费的，所以我们当然就不需要啦，点击“Skip”即可跳过此步。然后进入下一个页面（下图右），直接点击“Deploy”，就可以将我们的Github项目部署到Vercel上面啦！做到这里，基本上就大功告成了！（下图右里面有一个选项叫做“PROJECT NAME”，也就是项目名称的意思，这个是能自己取名字的哦！）</p>
<p>最后一步是要知道，我们生成的Vercel网页的网址是什么？</p>
<p>如下图1，先在自己的主页上打开自己刚刚部署好的项目，然后点击图2的“View Domains”，即查看自己的域名。在图3中点击“Edit”，即对自己的域名进行编辑，最后在图4红框处进行改名（后面的&quot;.vercel.app&quot;不能改，只能改前面的内容），点击Save进行保存。</p>
<h2 id="-59"><a class="markdownIt-Anchor" href="#-59"></a> <a href="https://www.dhndzwxj.top/3276806131.html#9vercel%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D"></a>9.Vercel绑定域名</h2>
<p>1- 在vercel的主界面，点击Setting。</p>
<p>2-点击domains设置</p>
<p>3-在域名添加界面，填入信息，点击add按钮</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688966.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688966.png" alt="" /></a></p>
<h2 id="-60"><a class="markdownIt-Anchor" href="#-60"></a> <a href="https://www.dhndzwxj.top/3276806131.html#10%E5%B0%86github%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D"></a>10.将Github绑定自己的域名</h2>
<p>1-先买一个域名。</p>
<p>2-在github仓库里添加CNAME文件，并在文件中填写绑定的域名。</p>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688995.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555688995.png" alt="" /></a></p>
<p><strong>文件内容如下</strong>：（文件里填写要绑定的域名且不要包含<a href="Http://%E5%92%8Cwww">Http://和www</a>） 说白了就是你购买的域名，前面不要 <code>http</code> 和 <code>www</code></p>
<p>进入设置，找到 <strong>Custom domain</strong>添加域名后保存即可（添加CNAME文件并在文件中填写绑定的域名后应该会自动保存，看看有没有自动保存）</p>
<p>3-ping你的<a href="http://github.xn--io-on6cx8l">http://github.io域名</a>，得到一个IP；</p>
<p>4-然后在域名中添加两条A记录，使用刚刚得到的IP。一个主机记录为<code>www</code>，一个主机记录为<code>@</code>。</p>
<p>5-对DNS的配置不是立即生效的，过10分钟再去访问你的域名看看有没有配置成功 : )</p>
<h2 id="-61"><a class="markdownIt-Anchor" href="#-61"></a> <a href="https://www.dhndzwxj.top/3276806131.html#n-1-%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE"></a>N-1. 博客站点根目录文件配置</h2>
<p>对博客站点根目录进行个性化配置。这是我的个人设置，大家可以根据自己的需要更改。</p>
<p>博客站点根目录文件配置</p>
<pre class="line-numbers language-none"><code class="language-none"># Hexo Configuration
## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html
## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;

# Site
title: 小荷才露尖尖角
subtitle: 蜻蜓
description: &#39;随手写一写，揭晓这世界&#39;   #网站描述
keywords: 马克思主义政治经济学
author: 揭晓                            #你的名字
language: zh-CN                         #网站使用的语言
timezone: Asia&#x2F;Shanghai                 #网站时区

# URL
## Set your site url here. For example, if you use GitHub Page, set url as &#39;https:&#x2F;&#x2F;username.github.io&#x2F;project&#39;
url: https:&#x2F;&#x2F;dhndzwxj.github.io # http:&#x2F;&#x2F;example.com
root: &#x2F;
permalink: :abbrlink.html #前面绝对不能加&#39;&#x2F;&#39;
permalink_defaults:
pretty_urls:
  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks
  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks

#abbrlink配置
abbrlink:
  alg: crc32  # 算法：crc16(default) and crc32
  rep: dec    # 进制：dec(default) and hex  


# Directory 目录配置
source_dir: source    #资源文件夹，这个文件夹用来存放内容
public_dir: public    #公共文件夹，这个文件夹用于存放生成的站点文件
tag_dir: tags         #标签文件夹
archive_dir: archives #归档文件夹
category_dir: categories  #分类文件夹
code_dir: downloads&#x2F;code  #Include code 文件夹
i18n_dir: :lang       #国际化文件夹
skip_render:          #跳过指定文件的渲染，您可使用 glob 来配置路径

# Writing 写作配置
new_post_name: :title.md  #新文章的文件名称
default_layout: post      #默认文章布局
titlecase: false # Transform title into titlecase
external_link: 
  enable: true # Open external links in new tab
  field: site # Apply to the whole site
  exclude: &#39;&#39;
filename_case: 0          #把文件名称转换为 (1) 小写或 (2) 大写
render_drafts: false      #显示草稿
post_asset_folder: true  #是否启动资源文件夹
relative_link: true       #把链接改为与根目录的相对位址
future: true
highlight:
  enable: false
  line_number: false #决定了代码块左侧是否有行数
  auto_detect: false
  tab_replace: &#39;&#39;
  wrap: true
  hljs: true
prismjs:
  enable: true
  preprocess: true
  line_number: true #决定了代码块左侧是否有行数
  tab_replace: &#39;&#39;

# Home page setting
# path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)
# per_page: Posts displayed per page. (0 &#x3D; disable pagination)
# order_by: Posts order. (Order by date descending by default)
index_generator:
  path: &#39;&#39;
  per_page: 10
  order_by: -date
# 归档页面
archive_generator:
  per_page: 50
  yearly: true
  monthly: true
#效果，首页每间隔10篇文章就分页，归档页每间隔50篇文章才分页。

# Category &amp; Tag
default_category: #uncategorized
category_map:
tag_map:

# Metadata elements
## https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;meta
meta_generator: true

# Date &#x2F; Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;
date_format: YYYY-MM-DD
time_format: HH:mm:ss
## updated_option supports &#39;mtime&#39;, &#39;date&#39;, &#39;empty&#39;
updated_option: &#39;mtime&#39;

# Pagination
## Set per_page to 0 to disable pagination
per_page: 10
pagination_dir: page

# Include &#x2F; Exclude file(s)
## include:&#x2F;exclude: options only apply to the &#39;source&#x2F;&#39; folder
include:
exclude:
ignore:

#搜索功能
search:
  path: search.xml
  field: post
  content: true
  format: html
# #搜索功能2
# algolia:
#   applicationID: &#39;applicationID&#39;
#   apiKey: &#39;apiKey&#39;
#   indexName: &#39;...&#39;
# # 文章加密
encrypt: # hexo-blog-encrypt
  abstract: 有东西被加密了, 请输入密码查看.
  message: 您好, 这里需要密码.
  tags:
  - &#123;name: tagName, password: 密码A&#125;
  - &#123;name: tagName, password: 密码B&#125;
  wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.
  wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.

# # mermaid chart
# mermaid: ## mermaid url https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid
#   enable: true  # default true
#   version: &quot;9.2.2&quot; # default v7.1.2
#   options:  # find more api options from https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid&#x2F;blob&#x2F;master&#x2F;src&#x2F;mermaidAPI.js
#     #startOnload: true  &#x2F;&#x2F; default true


# # math
# math:
#   engine: &#39;mathjax&#39; 
#   mathjax:  
# _config.yml
math:
  katex:
    css: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;katex@0.12.0&#x2F;dist&#x2F;katex.min.css&#39;
    options:
      throwOnError: false
  mathjax:
    css: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;hexo-math@4.0.0&#x2F;dist&#x2F;style.css&#39;
    options:
      conversion:
        display: false
      tex:
      svg:

# electric_clock
# see https:&#x2F;&#x2F;akilar.top&#x2F;posts&#x2F;4e39cf4a&#x2F;
electric_clock:
  enable: true # 开关
  priority: 5 #过滤器优先权
  enable_page: all # 应用页面
  exclude:
    - &#x2F;posts&#x2F;
    - &#x2F;about&#x2F;
  layout: # 挂载容器类型
    type: class
    name: sticky_layout
    index: 0
  loading: https:&#x2F;&#x2F;npm.elemecdn.com&#x2F;hexo-butterfly-clock&#x2F;lib&#x2F;loading.gif #加载动画自定义
  clock_css: https:&#x2F;&#x2F;npm.elemecdn.com&#x2F;hexo-butterfly-clock&#x2F;lib&#x2F;clock.min.css #电子钟样式CDN资源
  clock_js: https:&#x2F;&#x2F;npm.elemecdn.com&#x2F;hexo-butterfly-clock&#x2F;lib&#x2F;clock.min.js #电子钟执行脚本CDN资源
  ip_api: https:&#x2F;&#x2F;pv.sohu.com&#x2F;cityjson?ie&#x3D;utf-8 #获取时钟IP的API

# Deployment
## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment
deploy:
  type: git
  # repo: git@gitee.com:dhndzwxj&#x2F;dhndzwxj.gitee.io.git
  repo: git@github.com:dhndzwxj&#x2F;dhndzwxj.github.io.git
  branch: master
# Extensions
## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;
plugins:
  # - hexo-footnote
## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;
theme: butterfly451
# theme: lanscape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="-62"><a class="markdownIt-Anchor" href="#-62"></a> <a href="https://www.dhndzwxj.top/3276806131.html#n-%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86"></a>N. 拓展知识</h2>
<h3 id="-63"><a class="markdownIt-Anchor" href="#-63"></a> <a href="https://www.dhndzwxj.top/3276806131.html#1-css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8"></a>1. CSS预处理器</h3>
<p>CSS指的是层叠样式表(_C_ascading _S_tyle _S_heets)，描述了如何在屏幕、纸张或其他媒体上显示 HTML 元素。可以同时控制多张网页的布局，外部样式存储在css文件中。一句话，css的目的是对html中每一个组块（如<code>&lt;a&gt;</code>，<code>&lt;p&gt;</code>，<code>&lt;i&gt;</code>，<code>&lt;h1&gt;</code>）进行个性化定制！</p>
<p>选择器</p>
<p>CSS 规则集（rule-set）由选择器和声明块组成：</p>
<ul>
<li>选择器指向您需要设置样式的 HTML 元素。(css是对html中各种元素进行个性化定制的服务！)</li>
<li>声明块包含一条或多条用分号分隔的声明。每条声明都包含一个 CSS 属性名称和一个值，以冒号分隔。多条 CSS 声明用分号分隔，声明块用花括号括起来。</li>
</ul>
<p><a href="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555689026.png"><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/assets/16783555689026.png" alt="" /></a></p>
<p>返回<a href="https://www.dhndzwxj.top/1830845253.html#before6-7">前面</a>。</p>
<p>例子：</p>
<pre class="line-numbers language-none"><code class="language-none">p &#123;
  color: red;
  text-align: center;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子解释</p>
<ul>
<li><code>p</code> 是 <code>CSS</code> 中的选择器（它指向要设置样式的 <code>HTML</code> 元素：<code>&lt;p&gt;</code>）。</li>
<li><code>color</code> 是属性，<code>red</code> 是属性值</li>
<li><code>text-align</code> 是属性，<code>center</code> 是属性值</li>
</ul>
<p>CSS（Cascading Style Sheet-级联样式表）的缺陷也很明显。这种「面向命名语言」，不太友好，格式死板，低复制效率。css 预处理器就是这样被创造出来，弥补了直接写 css 的一些缺憾：</p>
<ul>
<li>语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；</li>
<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li>
</ul>
<p><strong>Stylus</strong>：2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者。<a href="https://link.zhihu.com/?target=http%3A//wiki.jikexueyuan.com/project/harp-doc/Stylus.html">Stylus 中文文档</a>。</p>
<p>Stylus 是一个高效、动态以及丰富的 CSS 预处理器。它同时支持缩进的和通俗的两种风格的 CSS 语法风格。Stylus 扩展名为「 *.styl 」，<a href="https://link.zhihu.com/?target=https%3A//tj.github.io/nib/">Nib</a>是 Stylus 的应用的类库。给你的「* .styl 」添加 Nib 的最快方式是克隆 Nib 的 Git 版本库并引入，因为有了 Nib，Stylus 的高效性才更为突出。Stylus 在容错性上的突出特性也十分吸引我，你可以在一个 Stylus 文件里这样写，且它们都会被编译成标准 css：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;*style.styl*&#x2F;
&#x2F;*类似于CSS标准语法*&#x2F;
h1 &#123;
  color: #963;
  background-color:#333;
&#125;
&#x2F;*省略大括号（｛｝）*&#x2F;
h1 
  color: #963;
  background-color: #333;
&#x2F;*省略大括号（｛｝）和分号（;）*&#x2F;
h1
  color:#963
  background-color:#333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>Try Stylus！</strong></p>
<p>这一部分参考知乎<a href="https://zhuanlan.zhihu.com/p/27431427">徐小七七</a>。</p>
<pre class="line-numbers language-none"><code class="language-none">body,html
    margin:0
    padding:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>编译成：</p>
<pre class="line-numbers language-none"><code class="language-none">body,
html &#123;
  margin: 0;
  padding: 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>stylus : 强大的功能丰富的语言</p>
<pre class="line-numbers language-none"><code class="language-none">-pos(type, args)
  i &#x3D; 0
  position: unquote(type)
  &#123;args[i]&#125;: args[i + 1] is a &#39;unit&#39; ? args[i +&#x3D; 1] : 0
  &#123;args[i +&#x3D; 1]&#125;: args[i + 1] is a &#39;unit&#39; ? args[i +&#x3D; 1] : 0

absolute()
  -pos(&#39;absolute&#39;, arguments)

fixed()
  -pos(&#39;fixed&#39;, arguments)

#prompt
  absolute: top 150px left 5px
  width: 200px
  margin-left: -(@width &#x2F; 2)

#logo
  fixed: top left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译成</p>
<pre class="line-numbers language-none"><code class="language-none">#prompt &#123;
  position: absolute;
  top: 150px;
  left: 5px;
  width: 200px;
  margin-left: -100px;
&#125;
#logo &#123;
  position: fixed;
  top: 0;
  left: 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>stylus：nibstylus插件</p>
<pre class="line-numbers language-none"><code class="language-none">@import &#39;nib&#39;
body
  background: linear-gradient(20px top, white, black) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>编译成</p>
<pre class="line-numbers language-none"><code class="language-none">body &#123;
  background: -webkit-linear-gradient(20px top, #fff, #000);
  background: -moz-linear-gradient(20px top, #fff, #000);
  background: -o-linear-gradient(20px top, #fff, #000);
  background: -ms-linear-gradient(20px top, #fff, #000);
  background: linear-gradient(20px top, #fff, #000);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="-64"><a class="markdownIt-Anchor" href="#-64"></a> <a href="https://www.dhndzwxj.top/3276806131.html#2javascript-%E5%AE%9E%E4%BE%8B"></a>2.JavaScript 实例</h3>
<p><a href="https://www.w3school.com.cn/js/js_examples.asp">https://www.w3school.com.cn/js/js_examples.asp</a></p>
<p>前面的<code>html</code>是网页页面的主要内容，<code>css</code>是格式化定制页面外观的代码。而<code>JavaScript</code>的作用让上面的内容“动起来”，是让页面内容发生改变的代码。</p>
<blockquote>
<p>JavaScript是一种脚本语言。脚本语言又被称为扩建的语言，或者动态语言，是一种编程语言，用来控制软件应用程序，脚本通常以文本（如ASCII)保存，只在被调用时进行解释或编译。</p>
</blockquote>
<p>根据我的理解，JavaScript就是网页代码中的“函数”（function），它可以根据开发者的目的对网页内容、属性进行一些改变。</p>
<h3 id="-65"><a class="markdownIt-Anchor" href="#-65"></a> <a href="https://www.dhndzwxj.top/3276806131.html#%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84"></a>语法结构</h3>
<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;
...  
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>弹框的脚本：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; 
    &lt;title&gt;无标题文档&lt;&#x2F;title&gt;
    &lt;script&gt;
      alert(&quot;Welcome! Can I help you?&quot;);
    &lt;&#x2F;script&gt;
  &lt;&#x2F;head&gt;
  &lt;body&gt;
    ..
  &lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果将JavaScript代码写在body内，需要这么写：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; 
    &lt;title&gt;无标题文档&lt;&#x2F;title&gt;
  &lt;&#x2F;head&gt;
  &lt;body&gt;
    &lt;script&gt;
      document.write(&quot;&lt;h1&gt;Welcome!&lt;&#x2F;h1&gt;&quot;);
      document.write(&quot;&lt;h3&gt;Can I help you?&lt;&#x2F;h3&gt;&quot;);
    &lt;&#x2F;script&gt;
  &lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>复杂一点的代码：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;
    &lt;title&gt;无标题文档&lt;&#x2F;title&gt;
  &lt;&#x2F;head&gt;
  &lt;body&gt;
    &lt;h1&gt;中国图书网&lt;&#x2F;h1&gt;
    &lt;p id&#x3D;&quot;do&quot;&gt;社科类图书&lt;&#x2F;p&gt;
    &lt;div id&#x3D;&quot;DIV&quot;&gt;军事类图书&lt;&#x2F;div&gt;
    &lt;p&gt;
      &lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;Function()&quot;&gt;
        单击
      &lt;&#x2F;button&gt;
    &lt;&#x2F;p&gt;
    &lt;script&gt;
      function Function()&#123;
        document.getElementById(&quot;do&quot;).innerHTML&#x3D;&quot;计算机类图书&quot;;
        document.getElementById(&quot;DIV&quot;).innerHTML&#x3D;&quot;历史类图书&quot;;
      &#125;
    &lt;&#x2F;script&gt;
    &lt;p style&#x3D;&#39;color:red&#39;&gt;
      单击按钮，改变显示内容。
    &lt;&#x2F;p&gt;
  &lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
</search>
